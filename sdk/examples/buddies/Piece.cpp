////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (C) 2012 - TRACER. All rights reserved.
////////////////////////////////////////////////////////////////////////////////////////////////////

#include "Piece.h"

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////

namespace Buddies {

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////

Piece::Piece()
    : mBuddy(0)
    , mPart(0)
    , mRotation(0)
    , mMustSolve(true)
    , mAttribute(ATTR_NONE)
{
}

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////

Piece::Piece(
    int buddy,
    int part,
    bool must_solve,
    Attribute attribute)
    : mBuddy(buddy)
    , mPart(part)
    , mRotation(0)
    , mMustSolve(must_solve)
    , mAttribute(attribute)
{
}
 
////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////
   
int Piece::GetBuddy() const
{
    return mBuddy;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////

void Piece::SetBuddy(int buddy)
{
    mBuddy = buddy;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////

int Piece::GetPart() const
{
    return mPart;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////

void Piece::SetPart(int part)
{
    mPart = part;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////

int Piece::GetRotation() const
{
    return mRotation;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////

void Piece::SetRotation(int rotation)
{
    mRotation = rotation;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////

bool Piece::GetMustSolve() const
{
    return mMustSolve;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////

void Piece::SetMustSolve(bool mustSolve)
{
    mMustSolve = mustSolve;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////

Piece::Attribute Piece::GetAttribute() const
{
    return mAttribute;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////

void Piece::SetAttribute(Attribute attribute)
{
    mAttribute = attribute;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////

bool Piece::Compare(const Piece &rhs) const
{
    return mBuddy == rhs.mBuddy && mPart == rhs.mPart;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////

}

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////
