/* -*- mode: C; c-basic-offset: 4; intent-tabs-mode: nil -*-
 *
 * Copyright <c> 2012 Sifteo, Inc. All rights reserved.
 */

///////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

#ifndef SIFTEO_BUDDIES_PIECE_H_
#define SIFTEO_BUDDIES_PIECE_H_

///////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

#include "BuddyId.h"

///////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

namespace Buddies {

///////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

class Piece
{
public:
    enum Part
    {
        PART_HAIR = 0U,
        PART_EYE_LEFT,
        PART_MOUTH,
        PART_EYE_RIGHT,
        
        NUM_PARTS
    };
    
    enum Attribute
    {
        ATTR_NONE = 0U,
        ATTR_FIXED,
        ATTR_HIDDEN,
        
        NUM_ATTRIBUTES
    };
    
    Piece();
    Piece(
        BuddyId buddy,
        Part part,
        bool must_solve = false,
        Attribute attribute = ATTR_NONE);
    
    BuddyId GetBuddy() const;
    void SetBuddy(BuddyId buddy);
    
    Part GetPart() const;
    void SetPart(Part part);
    
    int GetRotation() const;
    void SetRotation(int rotation);
    
    bool GetMustSolve() const;
    void SetMustSolve(bool mustSolve);
    
    Attribute GetAttribute() const;
    void SetAttribute(Attribute attribute);
    
    bool Compare(const Piece &rhs) const;
    
private:
    BuddyId mBuddy       : 5;
    Part mPart           : 3;
    int mRotation        : 3;
    bool mMustSolve      : 1;
    Attribute mAttribute : 3;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

}

///////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

#endif

///////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////
