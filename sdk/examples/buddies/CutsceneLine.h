////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (C) 2012 - TRACER. All rights reserved.
////////////////////////////////////////////////////////////////////////////////////////////////////

#ifndef BUDDIES_CUTSCENELINE_H_
#define BUDDIES_CUTSCENELINE_H_

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////

#include "BuddyId.h"

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////

namespace Buddies {

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////

struct CutsceneLine
{
    enum View
    {
        VIEW_RIGHT = 0U,
        VIEW_LEFT,
        VIEW_FRONT,
        
        NUM_VIEWS
    };
    
    CutsceneLine(
        unsigned int speaker = 0U,
        View view = VIEW_RIGHT,
        const char *text = NULL)
        : mSpeaker(speaker)
        , mView(view)
        , mText(text)
    {
    }
    
    CutsceneLine &operator=(const CutsceneLine &rhs)
    {
        if (this != &rhs)
        {
            mSpeaker = rhs.mSpeaker;
            mView = rhs.mView;
            mText = rhs.mText;
        }
        return *this;
    }
    
    unsigned int mSpeaker;
    View mView;
    const char *mText;
};

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////

}

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////

#endif

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////
