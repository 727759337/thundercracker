#!/usr/bin/env python
"""
script to convert JSON puzzles in CubeBuddies format to a .h file that will be built into the game.  
"""

####################################################################################################
####################################################################################################

import sys
import json
import ValidatePuzzles

####################################################################################################
# Utility
####################################################################################################

def MakeSep():
    sep = ''
    for i in range(100):
        sep += '/'
    sep += '\n'
    return sep        

def Id(container, key):
    return key.upper() + '_' + container[key].upper()

def BuddyToId(name):
    return 'BUDDY_' + name.upper()

def BoolToString(value):
    if value:
        return 'true'
    else:
        return 'false'

####################################################################################################
####################################################################################################

def ConvertPuzzles(src, dest):
    with open(src, 'r') as f:
        j = json.load(f)
        with open(dest, 'w') as fout:
            # Comment Separator
            sep = MakeSep()
            
            # File Header
            fout.write(sep)
            fout.write('// Generated by %s - Do not edit by hand!\n' % __file__)
            fout.write(sep)
            fout.write('\n')
            
            for i_book, book in enumerate(j['books']):
                for i_puzzle, puzzle in enumerate(book['puzzles']):
                    id = '%d_%d' % (i_book, i_puzzle)
                
                    # Puzzle Header
                    fout.write(sep)
                    fout.write('// Puzzle %s\n' % id)
                    fout.write(sep)
                    fout.write('\n')
                    
                    # Cutscene Buddies (Start)
                    buddyIds = [BuddyToId(b) for b in puzzle['cutscene_start']['buddies']]
                    fout.write('const BuddyId kCutsceneBuddiesStart_%s[] = { %s };\n' % (id, ', '.join(buddyIds)))
                    
                    # Cutscene Lines (Start)
                    fout.write('const CutsceneLine kCutsceneLinesStart_%s[] =\n' % id)
                    fout.write('{\n')
                    for line in puzzle['cutscene_start']['lines']:
                        text = line['text'].replace('\n', '\\n')
                        vars = (line['speaker'], Id(line, 'view'), text)
                        fout.write('    CutsceneLine(%d, CutsceneLine::%s, "%s"),\n' % vars)
                    fout.write('};\n')
                    
                    # Cutscene Buddies (End)
                    buddyIds = [BuddyToId(b) for b in puzzle['cutscene_end']['buddies']]
                    fout.write('const BuddyId kCutsceneBuddiesEnd_%s[] = { %s };\n' % (id, ', '.join(buddyIds)))
                    
                    # Cutscene Lines (End)
                    fout.write('const CutsceneLine kCutsceneLinesEnd_%s[] =\n' % id)
                    fout.write('{\n')
                    for line in puzzle['cutscene_end']['lines']:
                        text = line['text'].replace('\n', '\\n')
                        vars = (line['speaker'], Id(line, 'view'), text)
                        fout.write('    CutsceneLine(%d, CutsceneLine::%s, "%s"),\n' % vars)
                    fout.write('};\n')
                    
                    # Buddy IDs
                    buddies = puzzle['buddies']
                    buddyIds = [BuddyToId(b['name']) for b in buddies]
                    fout.write('const BuddyId kBuddies_%s[] = { %s };\n' % (id, ', '.join(buddyIds)))
                    
                    # Pieces (Start)
                    fout.write('const Piece kPiecesStart_%s[][NUM_SIDES] =\n' % id)
                    fout.write('{\n')
                    for i_buddy, buddy in enumerate(buddies):
                        fout.write('    {\n')
                        for side in ['top', 'left', 'bottom', 'right']:
                            piece = buddy['pieces_start'][side]
                            vars = (BuddyToId(piece['buddy']), Id(piece, 'part'))
                            fout.write('        Piece(%s, Piece::%s),\n' % vars)
                        fout.write('    },\n')
                    fout.write('};\n')
                    
                    # Pieces (End)
                    fout.write('const Piece kPiecesEnd_%s[][NUM_SIDES] =\n' % id)
                    fout.write('{\n')
                    for i_buddy, buddy in enumerate(buddies):
                        fout.write('    {\n')
                        for side in ['top', 'left', 'bottom', 'right']:
                            piece = buddy['pieces_end'][side]
                            vars = (BuddyToId(piece['buddy']), Id(piece, 'part'), BoolToString(piece['solve']))
                            fout.write('        Piece(%s, Piece::%s, %s),\n' % vars)
                        fout.write('    },\n')
                    fout.write('};\n')
                    fout.write('\n')
            
            num_books = len(j['books'])
            num_puzzles = 0
            for book in j['books']:
                num_puzzles += len(book['puzzles'])
            
            # Books Array Header
            fout.write(sep)
            fout.write('// Books Array\n')
            fout.write(sep)
            fout.write('\n')
            
            # Books Array
            fout.write('const Book kBooks[%d] =\n' % num_books)
            fout.write('{\n')
            for i_book, book in enumerate(j['books']):
                unlock = book['unlock']
                if unlock == None:
                    unlock = '-1'
                else:
                    unlock = BuddyToId(unlock)
                fout.write('    Book("%s", %d, %s),\n' % (book['title'], len(book['puzzles']), unlock))
            fout.write('};\n')
            fout.write('\n')
            
            # Book Offsets Array
            book_offsets = []
            book_offset = 0
            for book in j['books']:
                book_offsets.append(book_offset)
                book_offset += len(book['puzzles'])
            offsets_str = ', '.join([str(o) for o in book_offsets])
            fout.write('const unsigned int kBookOffsets[%d] = { %s };\n' % (num_books, offsets_str))
            fout.write('\n')
            
            # Puzzle Array Header
            fout.write(sep)
            fout.write('// Puzzles Array\n')
            fout.write(sep)
            fout.write('\n')
            
            # Puzzles Array
            fout.write('const Puzzle kPuzzles[%d] =\n' % num_puzzles)
            fout.write('{\n')
            for i_book, book in enumerate(j['books']):
                for i_puzzle, puzzle in enumerate(book['puzzles']):
                    id = '%d_%d' % (i_book, i_puzzle)
                    fout.write('    Puzzle(\n')
                    fout.write('        "%s",\n' % puzzle['title'].replace('\n', '\\n'))
                    fout.write('        "%s",\n' % puzzle['clue'].replace('\n', '\\n'))
                    fout.write('        kCutsceneBuddiesStart_%s, arraysize(kCutsceneBuddiesStart_%s),\n' % (id, id))
                    fout.write('        kCutsceneLinesStart_%s, arraysize(kCutsceneLinesStart_%s),\n' % (id, id))
                    fout.write('        kCutsceneBuddiesEnd_%s, arraysize(kCutsceneBuddiesEnd_%s),\n' % (id, id))
                    fout.write('        kCutsceneLinesEnd_%s, arraysize(kCutsceneLinesEnd_%s),\n' % (id, id))
                    fout.write('        %d,\n' % puzzle['cutscene_environment'])
                    fout.write('        kBuddies_%s, arraysize(kBuddies_%s),\n' % (id, id))
                    fout.write('        %d,\n' % puzzle['shuffles'])
                    fout.write('        kPiecesStart_%s, kPiecesEnd_%s),\n' % (id, id))
            fout.write('};\n')

####################################################################################################
####################################################################################################

if __name__ == "__main__":
    if len(sys.argv[1:]) != 2:
        print "Usage: python %s <json filename> <dest filename>" % __file__
        exit(1)
    else:
        if ValidatePuzzles.ValidatePuzzles(sys.argv[1]):
            ConvertPuzzles(sys.argv[1], sys.argv[2])
            exit(0)
        else:
            exit(1)
    