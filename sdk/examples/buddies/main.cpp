/* -*- mode: C; c-basic-offset: 4; intent-tabs-mode: nil -*-
 *
 * Copyright <c> 2012 Sifteo, Inc. All rights reserved.
 */

///////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

#include <sifteo/abi.h>
#include <sifteo/event.h>
#include <sifteo/asset.h> // TODO: This is only included to let metadata.h compile
#include <sifteo/macros.h> // TODO: This is only included to let metadata.h compile
#include <sifteo/metadata.h>
#include <sifteo/system.h>
#include <sifteo/time.h>
#include "App.h"
#include "Config.h"
#include "assets.gen.h"

///////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

namespace {

///////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

Buddies::App sApp;

///////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

void Init()
{
    Sifteo::AssetSlot MainSlot = Sifteo::AssetSlot::allocate().bootstrap(GameAssets);
    Sifteo::Metadata().title("CubeBuddies").cubeRange(Buddies::kNumCubes);
    
    sApp.Init();
    
    for (unsigned int i = 0; i < Buddies::kNumCubes; ++i)
    {
        if (sApp.GetCubeWrapper(i).IsEnabled())
        {
            sApp.GetCubeWrapper(i).DrawClear();
        }
    }
    Sifteo::System::paint();
}

///////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

void OnNeighborAdd(void *, unsigned int c0, unsigned int s0, unsigned int c1, unsigned int s1)
{
    if (sApp.GetCubeWrapper(c0).IsEnabled() && sApp.GetCubeWrapper(c1).IsEnabled())
    {
        sApp.OnNeighborAdd(c0, Sifteo::Side(s0), c1, Sifteo::Side(s1));
    }
}

///////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

void OnTilt(void *, unsigned cid)
{
    if (sApp.GetCubeWrapper(cid).IsEnabled())
    {
        sApp.OnTilt(cid);
    }
}

///////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

void OnShake(void *, unsigned cid)
{
    if (sApp.GetCubeWrapper(cid).IsEnabled())
    {
        sApp.OnShake(cid);
    }
}

///////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

void Setup()
{
    Sifteo::Events::cubeTilt.set(&OnTilt);
    Sifteo::Events::cubeShake.set(&OnShake);
    Sifteo::Events::neighborAdd.set(&OnNeighborAdd);
    
    sApp.Reset();
    sApp.Draw();
}

///////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

void MainLoop()
{
    Sifteo::SystemTime time = Sifteo::SystemTime::now();
    while (true)
    {
        Sifteo::TimeDelta dt = Sifteo::SystemTime::now() - time;
        time += dt;
        
        sApp.Update(dt);
        sApp.Draw();
    }
}

///////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

}

///////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

void main()
{
    Init();
    Setup();
    MainLoop();
}

///////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////
