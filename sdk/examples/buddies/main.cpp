/* -*- mode: C; c-basic-offset: 4; intent-tabs-mode: nil -*-
 *
 * Copyright <c> 2012 Sifteo, Inc. All rights reserved.
 */

///////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

#include <sifteo/abi.h>
#include <sifteo/system.h>
#include "App.h"
#include "Config.h"

///////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

namespace {

///////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

Buddies::App sApp;

///////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

void Init()
{
    sApp.Init();
    
    if (Buddies::kLoadAssets)
    {
        for (unsigned int i = 0; i < Buddies::kNumCubes; ++i)
        {
            if (sApp.GetCubeWrapper(i).IsEnabled())
            {
                sApp.GetCubeWrapper(i).LoadAssets();
            }
        }
        
        bool allLoaded = false;
        while (!allLoaded)
        {
            allLoaded = true;
            
            for (unsigned int i = 0; i < Buddies::kNumCubes; ++i)
            {
                if (sApp.GetCubeWrapper(i).IsEnabled())
                {
                    if (!sApp.GetCubeWrapper(i).IsLoadingAssets())
                    {
                        allLoaded = false;
                    }
                    sApp.GetCubeWrapper(i).DrawLoadingAssets();
                }
            }
            
            System::paint();
        }
    }
    
    for (unsigned int i = 0; i < Buddies::kNumCubes; ++i)
    {
        if (sApp.GetCubeWrapper(i).IsEnabled())
        {
            sApp.GetCubeWrapper(i).DrawClear();
        }
    }
    System::paintSync();
    System::paint();
}

///////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

void OnNeighborAdd(void *, _SYSCubeID c0, _SYSSideID s0, _SYSCubeID c1, _SYSSideID s1)
{
    if (sApp.GetCubeWrapper(c0).IsEnabled() && sApp.GetCubeWrapper(c1).IsEnabled())
    {
        sApp.OnNeighborAdd(c0, s0, c1, s1);
    }
}

///////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

void OnFound(void *, _SYSCubeID cid)
{
    if (!sApp.GetCubeWrapper(cid).IsEnabled())
    {
        sApp.GetCubeWrapper(cid).Enable(cid);
    }
}

///////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

void OnLost(void *, _SYSCubeID cid)
{
    if (sApp.GetCubeWrapper(cid).IsEnabled())
    {
        sApp.GetCubeWrapper(cid).Disable();
    }
}

///////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

void OnTilt(void *, _SYSCubeID cid)
{
    if (sApp.GetCubeWrapper(cid).IsEnabled())
    {
        sApp.OnTilt(cid);
    }
}

///////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

void OnShake(void *, _SYSCubeID cid)
{
    if (sApp.GetCubeWrapper(cid).IsEnabled())
    {
        sApp.OnShake(cid);
    }
}

///////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

void Setup()
{
    _SYS_setVector(_SYS_NEIGHBOR_ADD, (void *)OnNeighborAdd, NULL);
    //_SYS_setVector(_SYS_CUBE_FOUND, (void *)OnFound, NULL);
    //_SYS_setVector(_SYS_CUBE_LOST, (void *)OnLost, NULL);
    _SYS_setVector(_SYS_CUBE_TILT, (void *)OnTilt, NULL);
    _SYS_setVector(_SYS_CUBE_SHAKE, (void *)OnShake, NULL);
    
    sApp.Reset();
    sApp.Draw();
}

///////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

void MainLoop()
{
    float time = System::clock();
    while (true)
    {
        float dt = System::clock() - time;
        time += dt;
        
        sApp.Update(dt);
        sApp.Draw();
    }
}

///////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

}

///////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

void siftmain()
{
    Init();
    Setup();
    MainLoop();
}

///////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////
