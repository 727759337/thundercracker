/* -*- mode: C; c-basic-offset: 4; intent-tabs-mode: nil -*-
 *
 * Copyright <c> 2012 Sifteo, Inc. All rights reserved.
 */
 
////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////

#include "Puzzle.h"
#include <cstring>

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////

namespace Buddies {

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////

Puzzle::Puzzle(
    unsigned int numBuddies,
    const char *instructions,
    const Piece startState[kMaxBuddies][NUM_SIDES],
    const Piece endState[kMaxBuddies][NUM_SIDES])
    : mNumBuddies(numBuddies)
    , mInstructions()
    , mStartState()
    , mEndState()
{
    std::strncpy(mInstructions, instructions, sizeof(mInstructions));
    
    for (unsigned int i = 0; i < numBuddies; ++i)
    {
        for (unsigned int j = 0; j < NUM_SIDES; ++j)
        {
            mStartState[i][j] = startState[i][j];
            mEndState[i][j] = endState[i][j];
        }
    }
}    

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////

unsigned int Puzzle::GetNumBuddies() const
{
    return mNumBuddies;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////

const char *Puzzle::GetInstructions() const
{
    return mInstructions;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////

const Piece &Puzzle::GetStartState(unsigned int buddy, unsigned int side) const
{
    ASSERT(buddy < arraysize(mStartState));
    ASSERT(side < arraysize(mStartState[buddy]));
    return mStartState[buddy][side];
}

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////

const Piece &Puzzle::GetEndState(unsigned int buddy, unsigned int side) const
{
    ASSERT(buddy < arraysize(mEndState));
    ASSERT(side < arraysize(mEndState[buddy]));
    return mEndState[buddy][side];
}

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////

}

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////
