/* -*- mode: C; c-basic-offset: 4; intent-tabs-mode: nil -*-
 *
 * Copyright <c> 2012 Sifteo, Inc. All rights reserved.
 */
 
////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////

#include "Puzzle.h"
	
////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////

using namespace Sifteo;

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////

namespace Buddies {

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////

Puzzle::Puzzle()
    : mBook(0)
    , mTitle(NULL)
    , mClue(NULL)
    , mCutsceneTextStart()
    , mCutsceneTextEnd()
    , mBuddies()
    , mNumCutsceneTextStart(0)
    , mNumCutsceneTextEnd(0)
    , mNumShuffles(0)
    , mNumBuddies(0)
    , mPiecesStart()
    , mPiecesEnd()
{
    for (unsigned int i = 0; i < arraysize(mCutsceneTextStart); ++i)
    {
        mCutsceneTextStart[i] = NULL;
    }
    
    for (unsigned int i = 0; i < arraysize(mCutsceneTextEnd); ++i)
    {
        mCutsceneTextEnd[i] = NULL;
    }
    
    for (unsigned int i = 0; i < arraysize(mBuddies); ++i)
    {
        mBuddies[i] = 0;
    }
}   

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////

Puzzle::Puzzle(
    unsigned int book,
    const char *title,
    const char cutsceneTextStart[][32], unsigned int numCutsceneTextStart,
    const char cutsceneTextEnd[][32], unsigned int numCutsceneTextEnd,
    const char *clue,
    const BuddyId buddies[], unsigned int numBuddies,
    unsigned int numShuffles,
    const Piece piecesStart[kMaxBuddies][NUM_SIDES],
    const Piece piecesEnd[kMaxBuddies][NUM_SIDES])
    : mBook(book)
    , mTitle(title)
    , mClue(clue)
    , mCutsceneTextStart()
    , mCutsceneTextEnd()
    , mBuddies()
    , mNumCutsceneTextStart(numCutsceneTextStart)
    , mNumCutsceneTextEnd(numCutsceneTextEnd)
    , mNumShuffles(numShuffles)
    , mNumBuddies(numBuddies)
    , mPiecesStart()
    , mPiecesEnd()
{
    ASSERT(mNumCutsceneTextStart < arraysize(mCutsceneTextStart));
    for (unsigned int i = 0; i < mNumCutsceneTextStart; ++i)
    {
        mCutsceneTextStart[i] = cutsceneTextStart[i];
    }
    
    ASSERT(mNumCutsceneTextEnd < arraysize(mCutsceneTextEnd));
    for (unsigned int i = 0; i < mNumCutsceneTextEnd; ++i)
    {
        mCutsceneTextEnd[i] = cutsceneTextEnd[i];
    }
    
    ASSERT(mNumBuddies < arraysize(mBuddies));
    for (unsigned int i = 0; i < mNumBuddies; ++i)
    {
        mBuddies[i] = buddies[i];
    }
    
    for (unsigned int i = 0; i < kMaxBuddies; ++i)
    {
        for (unsigned int j = 0; j < NUM_SIDES; ++j)
        {
            mPiecesStart[i][j] = piecesStart[i][j];
            mPiecesEnd[i][j] = piecesEnd[i][j];
        }
    }
}   

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////

void Puzzle::Reset()
{
    mBook = 0;
    mTitle = NULL;
    
    for (unsigned int i = 0; i < arraysize(mCutsceneTextStart); ++i)
    {
        mCutsceneTextStart[i] = NULL;
    }
    mNumCutsceneTextStart = 0;
    
    for (unsigned int i = 0; i < arraysize(mCutsceneTextEnd); ++i)
    {
        mCutsceneTextEnd[i] = NULL;
    }
    mNumCutsceneTextEnd = 0;
    
    mClue = NULL;
    mNumShuffles = 0;
    
    for (unsigned int i = 0; i < arraysize(mBuddies); ++i)
    {
        mBuddies[i] = 0;
    }
    mNumBuddies = 0;
    
    for (unsigned int i = 0; i < kMaxBuddies; ++i)
    {
        for (unsigned int j = 0; j < NUM_SIDES; ++j)
        {
            mPiecesStart[i][j] = Piece();
            mPiecesEnd[i][j] = Piece();
        }
    }
}   

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////

unsigned int Puzzle::GetBook() const
{
    return mBook;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////

void Puzzle::SetBook(unsigned int book)
{
    mBook = book;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////

const char *Puzzle::GetTitle() const
{
    return mTitle;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////

void Puzzle::SetTitle(const char *title)
{
    mTitle = title;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////

const char *Puzzle::GetClue() const
{
    return mClue;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////

void Puzzle::SetClue(const char *clue)
{
    mClue = clue;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////

void Puzzle::AddCutsceneTextStart(const char *cutsceneTextStart)
{
    ASSERT(mNumCutsceneTextStart < arraysize(mCutsceneTextStart));
    mCutsceneTextStart[mNumCutsceneTextStart++] = cutsceneTextStart;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////

const char *Puzzle::GetCutsceneTextStart(unsigned int cutsceneIndex) const
{
    ASSERT(cutsceneIndex < arraysize(mCutsceneTextStart));
    return mCutsceneTextStart[cutsceneIndex];
}

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////

unsigned int Puzzle::GetNumCutsceneTextStart() const
{
    return mNumCutsceneTextStart;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////

void Puzzle::AddCutsceneTextEnd(const char *cutsceneTextEnd)
{
    ASSERT(mNumCutsceneTextEnd < arraysize(mCutsceneTextEnd));
    mCutsceneTextEnd[mNumCutsceneTextEnd++] = cutsceneTextEnd;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////

const char *Puzzle::GetCutsceneTextEnd(unsigned int cutsceneIndex) const
{
    ASSERT(cutsceneIndex < arraysize(mCutsceneTextEnd));
    return mCutsceneTextEnd[cutsceneIndex];
}

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////

unsigned int Puzzle::GetNumCutsceneTextEnd() const
{
    return mNumCutsceneTextEnd;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////

unsigned int Puzzle::GetNumShuffles() const
{
    return mNumShuffles;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////

void Puzzle::SetNumShuffles(unsigned int numShuffles)
{
    mNumShuffles = numShuffles;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////

void Puzzle::AddBuddy(BuddyId buddyId)
{
    ASSERT(mNumBuddies < arraysize(mBuddies));
    mBuddies[mNumBuddies++] = buddyId;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////

BuddyId Puzzle::GetBuddy(unsigned int buddyIndex) const
{
    ASSERT(buddyIndex < arraysize(mBuddies));
    return BuddyId(mBuddies[buddyIndex]);
}

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////

unsigned int Puzzle::GetNumBuddies() const
{
    return mNumBuddies;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////

const Piece &Puzzle::GetPieceStart(unsigned int buddy, Cube::Side side) const
{
    ASSERT(buddy < arraysize(mPiecesStart));
    ASSERT(side < int(arraysize(mPiecesStart[buddy])));
    return mPiecesStart[buddy][side];
}

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////

void Puzzle::SetPieceStart(unsigned int buddy, Cube::Side side, const Piece &piece)
{
    ASSERT(buddy < arraysize(mPiecesStart));
    ASSERT(side < int(arraysize(mPiecesStart[buddy])));
    mPiecesStart[buddy][side] = piece;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////

const Piece &Puzzle::GetPieceEnd(unsigned int buddy, Cube::Side side) const
{
    ASSERT(buddy < arraysize(mPiecesEnd));
    ASSERT(side < int(arraysize(mPiecesEnd[buddy])));
    return mPiecesEnd[buddy][side];
}

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////

void Puzzle::SetPieceEnd(unsigned int buddy, Cube::Side side, const Piece &piece)
{
    ASSERT(buddy < arraysize(mPiecesEnd));
    ASSERT(side < int(arraysize(mPiecesEnd[buddy])));
    mPiecesEnd[buddy][side] = piece;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////

}

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////
