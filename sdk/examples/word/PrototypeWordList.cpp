#include "PrototypeWordList.h"
#include <sifteo.h>
#include "WordGame.h"

/*
 * XXX: Only used for bsearch() currently. We should think about what kind of low-level VM
 *      primitives the search should be based on (with regard to ABI, as well as cache
 *      behavior) and design it with a proper syscall interface. But for now, we're leaking
 *      some libc code into the game :(
 */
#include <stdlib.h>

//#define DAWG_TEST 1
#ifdef DAWG_TEST
//static const int sDAWG[22000] = {};

static const char sList[][7] =
{
"aa",
"aah",
};

#else

// TODO a spell check representation that expands to higher number of letters
// while allowing for breaking into pieces to be loaded from flash
// (possibly pieces of a DAWG dictionary representation, up to 15 letters or so)
//
// 5 bits per letter, up to 6 letter words, plus flags
static const uint32_t sList[] =
{
    0x8002b041L,		// ABLE, length: 4)
    0x814abc41L,		// ABOUT, length: 5)
    0x1461,		// ACE, (bonus), length: 3)
    0x21461,		// ACED, (bonus), length: 4)
    0x99461,		// ACES, (bonus), length: 4)
    0x2b461,		// ACME, (bonus), length: 4)
    0x2c861,		// ACRE, (bonus), length: 4)
    0x80005061L,		// ACT, length: 3)
    0xa49098c1L,		// AFFAIR, length: 6)
    0x8122d0c1L,		// AFTER, length: 5)
    0x80409501L,		// AHEAD, length: 5)
    0x1581,		// ALE, (bonus), length: 3)
    0x80003181L,		// ALL, length: 3)
    0x8177b181L,		// ALLOW, length: 5)
    0xcb181,		// ALLY, (bonus), length: 4)
    0xa937b581L,		// ALMOST, length: 6)
    0x9b581,		// ALMS, (bonus), length: 4)
    0x80573d81L,		// ALONE, length: 5)
    0x122d181,		// ALTER, (bonus), length: 5)
    0x9d181,		// ALTS, (bonus), length: 4)
    0x725a1,		// AMIN, (bonus), length: 4)
    0x41a1,		// AMP, (bonus), length: 3)
    0x800011c1L,		// AND, length: 3)
    0x15c1,		// ANE, (bonus), length: 3)
    0x51c1,		// ANT, (bonus), length: 3)
    0x9d1c1,		// ANTS, (bonus), length: 4)
    0x1601,		// APE, (bonus), length: 3)
    0x21601,		// APED, (bonus), length: 4)
    0x91601,		// APER, (bonus), length: 4)
    0x40e41,		// ARCH, (bonus), length: 4)
    0x80001641L,		// ARE, length: 3)
    0x59a641,		// ARISE, (bonus), length: 5)
    0xa932ca41L,		// ARREST, length: 6)
    0x80005241L,		// ART, length: 3)
    0x9d241,		// ARTS, (bonus), length: 4)
    0x66641,		// ARYL, (bonus), length: 4)
    0x261,		// AS, (bonus), length: 2)
    0x1478e61,		// ASCOT, (bonus), length: 5)
    0x8b2ace61L,		// ASSURE, length: 6)
    0x281,		// AT, (bonus), length: 2)
    0x1681,		// ATE, (bonus), length: 3)
    0x2e1,		// AW, (bonus), length: 2)
    0x80ca9ae1L,		// AWFUL, length: 5)
    0x32e1,		// AWL, (bonus), length: 3)
    0x1701,		// AXE, (bonus), length: 3)
    0x2b022,		// BALE, (bonus), length: 4)
    0x5022,		// BAT, (bonus), length: 3)
    0x8ad08ca2L,		// BECAME, length: 6)
    0x8ad78ca2L,		// BECOME, length: 6)
    0x80001ca2L,		// BEG, length: 3)
    0x80ea9ca2L,		// BEGUN, length: 5)
    0x807724a2L,		// BEING, length: 5)
    0x8ee7b0a2L,		// BELONG, length: 6)
    0x8177b0a2L,		// BELOW, length: 5)
    0x38a2,		// BEN, (bonus), length: 3)
    0x8a44cca2L,		// BESIDE, length: 6)
    0xa0582,		// BLAT, (bonus), length: 4)
    0x5a0582,		// BLATE, (bonus), length: 5)
    0x800a05e2L,		// BOAT, length: 4)
    0x344b9e2,		// BONITA, (bonus), length: 6)
    0xd1e2,		// BOTA, (bonus), length: 4)
    0xbbe42,		// BROW, (bonus), length: 4)
    0x80ebbe42L,		// BROWN, length: 5)
    0x814626a2L,		// BUILT, length: 5)
    0x800052a2L,		// BUT, length: 3)
    0x29023,		// CADE, (bonus), length: 4)
    0x80063023L,		// CALL, length: 4)
    0x88563023L,		// CALLED, length: 6)
    0x8002b423L,		// CAME, length: 4)
    0x2c023,		// CAPE, (bonus), length: 4)
    0x8002c823L,		// CARE, length: 4)
    0xa452c823L,		// CAREER, length: 6)
    0x8002cc23L,		// CASE, length: 4)
    0x80005023L,		// CAT, length: 3)
    0x8059d423L,		// CAUSE, length: 5)
    0x800a38a3L,		// CENT, length: 4)
    0xa45a38a3L,		// CENTER, length: 6)
    0xb2a38a3,		// CENTRE, (bonus), length: 6)
    0x813a38a3L,		// CENTS, length: 5)
    0x2c8a3,		// CERE, (bonus), length: 4)
    0x90503,		// CHAR, (bonus), length: 4)
    0x81490503L,		// CHART, length: 5)
    0x814985e3L,		// COAST, length: 5)
    0x725e3,		// COIN, (bonus), length: 4)
    0x8127b1e3L,		// COLOR, length: 5)
    0x8002b5e3L,		// COME, length: 4)
    0x4b9e3,		// CONI, (bonus), length: 4)
    0x80063de3L,		// COOL, length: 4)
    0x800cc1e3L,		// COPY, length: 4)
    0x49e3,		// COR, (bonus), length: 3)
    0x2c9e3,		// CORE, (bonus), length: 4)
    0x800749e3L,		// CORN, length: 4)
    0xa45749e3L,		// CORNER, length: 6)
    0x51e3,		// COT, (bonus), length: 3)
    0x2024,		// DAH, (bonus), length: 3)
    0x9c024,		// DAPS, (bonus), length: 4)
    0x2c824,		// DARE, (bonus), length: 4)
    0x7d024,		// DATO, (bonus), length: 4)
    0x80006424L,		// DAY, length: 3)
    0x800604a4L,		// DEAL, length: 4)
    0x808a04a4L,		// DEATH, length: 5)
    0x914a4,		// DEER, (bonus), length: 4)
    0x498a4,		// DEFI, (bonus), length: 4)
    0x30a4,		// DEL, (bonus), length: 3)
    0x8190b0a4L,		// DELAY, length: 5)
    0x630a4,		// DELL, (bonus), length: 4)
    0x38a4,		// DEN, (bonus), length: 3)
    0x4b8a4,		// DENI, (bonus), length: 4)
    0x2c8a4,		// DERE, (bonus), length: 4)
    0x9c74cca4L,		// DESIGN, length: 6)
    0x8b24cca4L,		// DESIRE, length: 6)
    0x64a4,		// DEY, (bonus), length: 3)
    0x80021524L,		// DIED, length: 4)
    0x8a44d924L,		// DIVIDE, length: 6)
    0x1e4,		// DO, (bonus), length: 2)
    0xa4fa0de4L,		// DOCTOR, length: 6)
    0x80001de4L,		// DOG, length: 3)
    0x80093de4L,		// DOOR, length: 4)
    0x51e4,		// DOT, (bonus), length: 3)
    0x814155e4L,		// DOUBT, length: 5)
    0x800b8644L,		// DRAW, length: 4)
    0x80ebbe44L,		// DROWN, length: 5)
    0x3baa4,		// DUNG, (bonus), length: 4)
    0x8ee4caa4L,		// DURING, length: 6)
    0x4825,		// EAR, (bonus), length: 3)
    0x80005025L,		// EAT, length: 3)
    0x2085,		// EDH, (bonus), length: 3)
    0x9a085,		// EDHS, (bonus), length: 4)
    0x1185,		// ELD, (bonus), length: 3)
    0x81419585L,		// ELECT, length: 5)
    0x8002cd85L,		// ELSE, length: 4)
    0x8b24c1a5L,		// EMPIRE, length: 6)
    0x800011c5L,		// END, length: 3)
    0x2934b1c5,		// ENLIST, (bonus), length: 6)
    0x4dc5,		// ENS, (bonus), length: 3)
    0x8b24d1c5L,		// ENTIRE, length: 6)
    0x39e5,		// EON, (bonus), length: 3)
    0x645,		// ERA, (bonus), length: 3)
    0x98645,		// ERAS, (bonus), length: 4)
    0x1645,		// ERE, (bonus), length: 3)
    0x2ba45,		// ERNE, (bonus), length: 4)
    0xa4e45,		// ERST, (bonus), length: 4)
    0x8b008e65L,		// ESCAPE, length: 6)
    0x685,		// ETA, (bonus), length: 3)
    0x2285,		// ETH, (bonus), length: 3)
    0x122a285,		// ETHER, (bonus), length: 5)
    0x137a285,		// ETHOS, (bonus), length: 5)
    0x800716c5L,		// EVEN, length: 4)
    0x814716c5L,		// EVENT, length: 5)
    0x800916c5L,		// EVER, length: 4)
    0x819916c5L,		// EVERY, length: 5)
    0x80195305L,		// EXTRA, length: 5)
    0x80092426L,		// FAIR, length: 4)
    0x80004826L,		// FAR, length: 3)
    0x2d026,		// FATE, (bonus), length: 4)
    0x8127d826L,		// FAVOR, length: 5)
    0x48a6,		// FER, (bonus), length: 3)
    0x2c8a6,		// FERE, (bonus), length: 4)
    0x1126,		// FID, (bonus), length: 3)
    0x80461526L,		// FIELD, length: 5)
    0x81441d26L,		// FIGHT, length: 5)
    0x8b2a9d26L,		// FIGURE, length: 6)
    0x8002b126L,		// FILE, length: 4)
    0x42b126,		// FILED, (bonus), length: 5)
    0x80063126L,		// FILL, length: 4)
    0x88563126L,		// FILLED, length: 6)
    0x9134b926L,		// FINISH, length: 6)
    0x8002c926L,		// FIRE, length: 4)
    0x9c926,		// FIRS, (bonus), length: 4)
    0x8149c926L,		// FIRST, length: 5)
    0x80044d26L,		// FISH, length: 4)
    0x80005126L,		// FIT, length: 3)
    0x725e6,		// FOIN, (bonus), length: 4)
    0x39e6,		// FON, (bonus), length: 3)
    0x800049e6L,		// FOR, length: 3)
    0x2c9e6,		// FORE, (bonus), length: 4)
    0xa932c9e6L,		// FOREST, length: 6)
    0x8006c9e6L,		// FORM, length: 4)
    0xa49e6,		// FORT, (bonus), length: 4)
    0x819a49e6L,		// FORTY, length: 5)
    0x245a4de6,		// FOSTER, (bonus), length: 6)
    0x800955e6L,		// FOUR, length: 4)
    0x914955e6L,		// FOURTH, length: 6)
    0x65e6,		// FOY, (bonus), length: 3)
    0x81473e46L,		// FRONT, length: 5)
    0x9a507,		// GHIS, (bonus), length: 4)
    0x3927,		// GIN, (bonus), length: 3)
    0x55c7,		// GNU, (bonus), length: 3)
    0x1e7,		// GO, (bonus), length: 2)
    0x800011e7L,		// GOD, length: 3)
    0x65e7,		// GOY, (bonus), length: 3)
    0x70647,		// GRAN, (bonus), length: 4)
    0x80470647L,		// GRAND, length: 5)
    0x81409647L,		// GREAT, length: 5)
    0x814996a7L,		// GUEST, length: 5)
    0x80003aa7L,		// GUN, length: 3)
    0x52a7,		// GUT, (bonus), length: 3)
    0x80001028L,		// HAD, length: 3)
    0x80005028L,		// HAT, length: 3)
    0x42d028,		// HATED, (bonus), length: 5)
    0x800904a8L,		// HEAR, length: 4)
    0x804904a8L,		// HEARD, length: 5)
    0x814904a8L,		// HEART, length: 5)
    0x800048a8L,		// HER, length: 3)
    0x50a8,		// HET, (bonus), length: 3)
    0x1e8,		// HO, (bonus), length: 2)
    0x15e8,		// HOE, (bonus), length: 3)
    0x8127b9e8L,		// HONOR, length: 5)
    0x800051e8L,		// HOT, length: 3)
    0x800955e8L,		// HOUR, length: 4)
    0x813955e8L,		// HOURS, length: 5)
    0x8059d5e8L,		// HOUSE, length: 5)
    0x80005de8L,		// HOW, length: 3)
    0x80e0b6a8L,		// HUMAN, length: 5)
    0x3aa8,		// HUN, (bonus), length: 3)
    0x80001469L,		// ICE, length: 3)
    0x3189,		// ILL, (bonus), length: 3)
    0x8ad78dc9L,		// INCOME, length: 6)
    0x799c9,		// INFO, (bonus), length: 4)
    0x9b2799c9L,		// INFORM, length: 6)
    0x2dc9,		// INK, (bonus), length: 3)
    0x8a44cdc9L,		// INSIDE, length: 6)
    0x269,		// IS, (bonus), length: 2)
    0x88e0b269L,		// ISLAND, length: 6)
    0x2b269,		// ISLE, (bonus), length: 4)
    0x805ace69L,		// ISSUE, length: 5)
    0x289,		// IT, (bonus), length: 2)
    0x80004e89L,		// ITS, length: 3)
    0x392b,		// KIN, (bonus), length: 3)
    0x800bbdcbL,		// KNOW, length: 4)
    0x80ebbdcbL,		// KNOWN, length: 5)
    0x2902c,		// LADE, (bonus), length: 4)
    0x9b42c,		// LAMS, (bonus), length: 4)
    0x8002382cL,		// LAND, length: 4)
    0x482c,		// LAR, (bonus), length: 3)
    0x44c2c,		// LASH, (bonus), length: 4)
    0x800a4c2cL,		// LAST, length: 4)
    0x502c,		// LAT, (bonus), length: 3)
    0x8002d02cL,		// LATE, length: 4)
    0x8122d02cL,		// LATER, length: 5)
    0x9d02c,		// LATS, (bonus), length: 4)
    0x80005c2cL,		// LAW, length: 3)
    0x8000642cL,		// LAY, length: 3)
    0x904ac,		// LEAR, (bonus), length: 4)
    0x80e904acL,		// LEARN, length: 5)
    0x984ac,		// LEAS, (bonus), length: 4)
    0x814984acL,		// LEAST, length: 5)
    0x800010acL,		// LED, length: 3)
    0x994ac,		// LEES, (bonus), length: 4)
    0x9a4ac,		// LEIS, (bonus), length: 4)
    0x7b8ac,		// LENO, (bonus), length: 4)
    0x8009ccacL,		// LESS, length: 4)
    0x9cf9ccacL,		// LESSON, length: 6)
    0x800050acL,		// LET, length: 3)
    0x8000152cL,		// LIE, length: 3)
    0x3152c,		// LIEF, (bonus), length: 4)
    0x2453152c,		// LIEFER, (bonus), length: 6)
    0x7152c,		// LIEN, (bonus), length: 4)
    0x9152c,		// LIER, (bonus), length: 4)
    0x8002992cL,		// LIFE, length: 4)
    0x13a312c,		// LILTS, (bonus), length: 5)
    0x8002b92cL,		// LINE, length: 4)
    0x2c92c,		// LIRE, (bonus), length: 4)
    0x800a4d2cL,		// LIST, length: 4)
    0x9c5a4d2cL,		// LISTEN, length: 6)
    0x512c,		// LIT, (bonus), length: 3)
    0x9d12c,		// LITS, (bonus), length: 4)
    0x289ec,		// LOBE, (bonus), length: 4)
    0x78dec,		// LOCO, (bonus), length: 4)
    0x8003b9ecL,		// LONG, length: 4)
    0x800a4decL,		// LOST, length: 4)
    0x800051ecL,		// LOT, length: 3)
    0x9d1ec,		// LOTS, (bonus), length: 4)
    0x80005decL,		// LOW, length: 3)
    0x2cb2c,		// LYRE, (bonus), length: 4)
    0x8007242dL,		// MAIN, length: 4)
    0x8000382dL,		// MAN, length: 3)
    0x8000402dL,		// MAP, length: 3)
    0x2c82d,		// MARE, (bonus), length: 4)
    0xa4c2d,		// MAST, (bonus), length: 4)
    0x245a4c2d,		// MASTER, (bonus), length: 6)
    0x9d02d,		// MATS, (bonus), length: 4)
    0x800704adL,		// MEAN, length: 4)
    0x814704adL,		// MEANT, length: 5)
    0x800a04adL,		// MEAT, length: 4)
    0x30ad,		// MEL, (bonus), length: 3)
    0xa45134adL,		// MEMBER, length: 6)
    0x800038adL,		// MEN, length: 3)
    0xbbcad,		// MEOW, (bonus), length: 4)
    0x8002c8adL,		// MERE, length: 4)
    0x50ad,		// MET, (bonus), length: 3)
    0xd0ad,		// META, (bonus), length: 4)
    0x80c0d0adL,		// METAL, length: 5)
    0x8ac2112dL,		// MIDDLE, length: 6)
    0x8002b12dL,		// MILE, length: 4)
    0xb1ed,		// MOLA, (bonus), length: 4)
    0x7b9ed,		// MONO, (bonus), length: 4)
    0x80073dedL,		// MOON, length: 4)
    0x8002c9edL,		// MORE, length: 4)
    0x800a4dedL,		// MOST, length: 4)
    0x451ed,		// MOTH, (bonus), length: 4)
    0xa45451edL,		// MOTHER, length: 6)
    0x9cf4d1edL,		// MOTION, length: 6)
    0x9d1ed,		// MOTS, (bonus), length: 4)
    0x142e,		// NAE, (bonus), length: 3)
    0x342e,		// NAM, (bonus), length: 3)
    0x8002b42eL,		// NAME, length: 4)
    0x800904aeL,		// NEAR, length: 4)
    0xb2c904aeL,		// NEARLY, length: 6)
    0x8ae,		// NEB, (bonus), length: 3)
    0xa4cae,		// NEST, (bonus), length: 4)
    0x50ae,		// NET, (bonus), length: 3)
    0x9d0ae,		// NETS, (bonus), length: 4)
    0x2d8ae,		// NEVE, (bonus), length: 4)
    0x8122d8aeL,		// NEVER, length: 5)
    0x2912e,		// NIDE, (bonus), length: 4)
    0x4cd2e,		// NISI, (bonus), length: 4)
    0x1ee,		// NO, (bonus), length: 2)
    0x615ee,		// NOEL, (bonus), length: 4)
    0x800049eeL,		// NOR, length: 3)
    0x800051eeL,		// NOT, length: 3)
    0x8a34d1eeL,		// NOTICE, length: 6)
    0x80005deeL,		// NOW, length: 3)
    0x292ae,		// NUDE, (bonus), length: 4)
    0x12292ae,		// NUDER, (bonus), length: 5)
    0x9c90d04fL,		// OBTAIN, length: 6)
    0x9846f,		// OCAS, (bonus), length: 4)
    0xb30a8c6fL,		// OCCUPY, length: 6)
    0x8f,		// OD, (bonus), length: 2)
    0x93c8f,		// ODOR, (bonus), length: 4)
    0x812298cfL,		// OFFER, length: 5)
    0x80e2d0cfL,		// OFTEN, length: 5)
    0x10f,		// OH, (bonus), length: 2)
    0x4d0f,		// OHS, (bonus), length: 3)
    0x158f,		// OLE, (bonus), length: 3)
    0xb18f,		// OLLA, (bonus), length: 4)
    0x915af,		// OMER, (bonus), length: 4)
    0x800a25afL,		// OMIT, length: 4)
    0x1cf,		// ON, (bonus), length: 2)
    0x80028dcfL,		// ONCE, length: 4)
    0x800015cfL,		// ONE, length: 3)
    0x8122924fL,		// ORDER, length: 5)
    0x7924f,		// ORDO, (bonus), length: 4)
    0x166f,		// OSE, (bonus), length: 3)
    0x8122a28fL,		// OTHER, length: 5)
    0x81441eafL,		// OUGHT, length: 5)
    0x800052afL,		// OUT, length: 3)
    0x2ef,		// OW, (bonus), length: 2)
    0x80003aefL,		// OWN, length: 3)
    0x80092430L,		// PAIR, length: 4)
    0x3430,		// PAM, (bonus), length: 3)
    0x8122c030L,		// PAPER, length: 5)
    0x4830,		// PAR, (bonus), length: 3)
    0x2c830,		// PARE, (bonus), length: 4)
    0x800a4830L,		// PART, length: 4)
    0x819a4830L,		// PARTY, length: 5)
    0x44c30,		// PASH, (bonus), length: 4)
    0x8009cc30L,		// PASS, length: 4)
    0x8859cc30L,		// PASSED, length: 6)
    0x80006430L,		// PAY, length: 3)
    0x265184b0,		// PEACES, (bonus), length: 6)
    0x614b0,		// PEEL, (bonus), length: 4)
    0x994b0,		// PEES, (bonus), length: 4)
    0x2b0b0,		// PELE, (bonus), length: 4)
    0x8ac83cb0L,		// PEOPLE, length: 6)
    0x7c0b0,		// PEPO, (bonus), length: 4)
    0x800048b0L,		// PER, length: 3)
    0x91530,		// PIER, (bonus), length: 4)
    0x80070590L,		// PLAN, length: 4)
    0x80570590L,		// PLANE, length: 5)
    0x81470590L,		// PLANT, length: 5)
    0x8002b1f0L,		// POLE, length: 4)
    0x2c1f0,		// POPE, (bonus), length: 4)
    0x8051a650L,		// PRICE, length: 5)
    0x80044eb0L,		// PUSH, length: 4)
    0x88544eb0L,		// PUSHED, length: 6)
    0x1032,		// RAD, (bonus), length: 3)
    0x8059a432L,		// RAISE, length: 5)
    0x2b032,		// RALE, (bonus), length: 4)
    0x80003832L,		// RAN, length: 3)
    0x4032,		// RAP, (bonus), length: 3)
    0x2c832,		// RARE, (bonus), length: 4)
    0x2932c832,		// RAREST, (bonus), length: 6)
    0x245a4c32,		// RASTER, (bonus), length: 6)
    0x5032,		// RAT, (bonus), length: 3)
    0x9d032,		// RATS, (bonus), length: 4)
    0x5c32,		// RAW, (bonus), length: 3)
    0x808184b2L,		// REACH, length: 5)
    0x800204b2L,		// READ, length: 4)
    0x819204b2L,		// READY, length: 5)
    0x800604b2L,		// REAL, length: 4)
    0xb2c604b2L,		// REALLY, length: 6)
    0x684b2,		// REAM, (bonus), length: 4)
    0x804b2,		// REAP, (bonus), length: 4)
    0x904b2,		// REAR, (bonus), length: 4)
    0xa8e28cb2L,		// RECENT, length: 6)
    0x800010b2L,		// RED, length: 3)
    0x290b2,		// REDE, (bonus), length: 4)
    0x14b2,		// REE, (bonus), length: 3)
    0x214b2,		// REED, (bonus), length: 4)
    0x314b2,		// REEF, (bonus), length: 4)
    0x18b2,		// REF, (bonus), length: 3)
    0x324b2,		// REIF, (bonus), length: 4)
    0x724b2,		// REIN, (bonus), length: 4)
    0x9a4b2,		// REIS, (bonus), length: 4)
    0x8c54b0b2L,		// RELIEF, length: 6)
    0xcb0b2,		// RELY, (bonus), length: 4)
    0x9c90b4b2L,		// REMAIN, length: 6)
    0xa38b2,		// RENT, (bonus), length: 4)
    0x40b2,		// REP, (bonus), length: 3)
    0xa490c0b2L,		// REPAIR, length: 6)
    0x9c0b2,		// REPS, (bonus), length: 4)
    0xa44ccb2,		// RESIDE, (bonus), length: 6)
    0x2934ccb2,		// RESIST, (bonus), length: 6)
    0x800a4cb2L,		// REST, length: 4)
    0xa8caccb2L,		// RESULT, length: 6)
    0x50b2,		// RET, (bonus), length: 3)
    0x2d0b2,		// RETE, (bonus), length: 4)
    0x2932d0b2,		// RETEST, (bonus), length: 6)
    0xae4d0b2,		// RETINE, (bonus), length: 6)
    0x8b24d0b2L,		// RETIRE, length: 6)
    0x9d0b2,		// RETS, (bonus), length: 4)
    0x9d2ad0b2L,		// RETURN, length: 6)
    0x58b2,		// REV, (bonus), length: 3)
    0x3d12,		// RHO, (bonus), length: 3)
    0x8003b932L,		// RING, length: 4)
    0x9c132,		// RIPS, (bonus), length: 4)
    0xdf2,		// ROC, (bonus), length: 3)
    0x291f2,		// RODE, (bonus), length: 4)
    0x23df2,		// ROOD, (bonus), length: 4)
    0x51f2,		// ROT, (bonus), length: 3)
    0x80c0e5f2L,		// ROYAL, length: 5)
    0x80003ab2L,		// RUN, length: 3)
    0x452b2,		// RUTH, (bonus), length: 4)
    0x2b033,		// SALE, (bonus), length: 4)
    0x80005033L,		// SAT, length: 3)
    0x80005c33L,		// SAW, length: 3)
    0x1471473,		// SCENT, (bonus), length: 5)
    0xcb3,		// SEC, (bonus), length: 3)
    0x88e78cb3L,		// SECOND, length: 6)
    0xa0cb3,		// SECT, (bonus), length: 4)
    0x800014b3L,		// SEE, length: 3)
    0x614b3,		// SEEL, (bonus), length: 4)
    0x814b3,		// SEEP, (bonus), length: 4)
    0xa832b0b3L,		// SELECT, length: 6)
    0x800238b3L,		// SEND, length: 4)
    0x8059b8b3L,		// SENSE, length: 5)
    0x805b48b3L,		// SERVE, length: 5)
    0x800050b3L,		// SET, length: 3)
    0x80c60513L,		// SHALL, length: 5)
    0x80580513L,		// SHAPE, length: 5)
    0x80001513L,		// SHE, length: 3)
    0x80021513L,		// SHED, length: 4)
    0x72513,		// SHIN, (bonus), length: 4)
    0x800bbd13L,		// SHOW, length: 4)
    0x80ebbd13L,		// SHOWN, length: 5)
    0x133,		// SI, (bonus), length: 2)
    0x60533,		// SIAL, (bonus), length: 4)
    0x80029133L,		// SIDE, length: 4)
    0x41d33,		// SIGH, (bonus), length: 4)
    0x81441d33L,		// SIGHT, length: 5)
    0x80071d33L,		// SIGN, length: 4)
    0x8571d33,		// SIGNED, (bonus), length: 6)
    0x8003b933L,		// SING, length: 4)
    0x853b933,		// SINGED, (bonus), length: 6)
    0x8ac3b933L,		// SINGLE, length: 6)
    0x2c933,		// SIRE, (bonus), length: 4)
    0xa45a4d33L,		// SISTER, length: 6)
    0x80005133L,		// SIT, length: 3)
    0x9d133,		// SITS, (bonus), length: 4)
    0x80c605b3L,		// SMALL, length: 5)
    0x451f3,		// SOTH, (bonus), length: 4)
    0x5df3,		// SOW, (bonus), length: 3)
    0x24520613,		// SPADER, (bonus), length: 6)
    0x80471613L,		// SPEND, length: 5)
    0x81471613L,		// SPENT, length: 5)
    0x8812ca13L,		// SPREAD, length: 6)
    0x8ee4ca13L,		// SPRING, length: 6)
    0x81068693L,		// STAMP, length: 5)
    0x80470693L,		// STAND, length: 5)
    0x90693,		// STAR, (bonus), length: 4)
    0x24590693,		// STARER, (bonus), length: 6)
    0x81490693L,		// START, length: 5)
    0xa0693,		// STAT, (bonus), length: 4)
    0x805a0693L,		// STATE, length: 5)
    0xa1693,		// STET, (bonus), length: 4)
    0x80c62693L,		// STILL, length: 5)
    0x92693,		// STIR, (bonus), length: 4)
    0x80563e93L,		// STOLE, length: 5)
    0x1816be93,		// STOMAL, (bonus), length: 6)
    0x80573e93L,		// STONE, length: 5)
    0x9a12ca93L,		// STREAM, length: 6)
    0xa852ca93L,		// STREET, length: 6)
    0x8ee4ca93L,		// STRING, length: 6)
    0x16b3,		// SUE, (bonus), length: 3)
    0x916b3,		// SUER, (bonus), length: 4)
    0xa4531ab3L,		// SUFFER, length: 6)
    0xa456b6b3L,		// SUMMER, length: 6)
    0x8002cab3L,		// SURE, length: 4)
    0x245652b3,		// SUTLER, (bonus), length: 6)
    0x493ef3,		// SWORD, (bonus), length: 5)
    0x34,		// TA, (bonus), length: 2)
    0x834,		// TAB, (bonus), length: 3)
    0x80560834L,		// TABLE, length: 5)
    0x1434,		// TAE, (bonus), length: 3)
    0x72434,		// TAIN, (bonus), length: 4)
    0x2b434,		// TAME, (bonus), length: 4)
    0x3834,		// TAN, (bonus), length: 3)
    0x4834,		// TAR, (bonus), length: 3)
    0x13a4834,		// TARTS, (bonus), length: 5)
    0x4c34,		// TAS, (bonus), length: 3)
    0x5a4c34,		// TASTE, (bonus), length: 5)
    0x9d034,		// TATS, (bonus), length: 4)
    0x4b4,		// TEA, (bonus), length: 3)
    0x604b4,		// TEAL, (bonus), length: 4)
    0x30b4,		// TEL, (bonus), length: 3)
    0xb0b4,		// TELA, (bonus), length: 4)
    0x800038b4L,		// TEN, length: 3)
    0x8006c8b4L,		// TERM, length: 4)
    0x8136c8b4L,		// TERMS, length: 5)
    0x800a4cb4L,		// TEST, length: 4)
    0x245a4cb4,		// TESTER, (bonus), length: 6)
    0x9d0b4,		// TETS, (bonus), length: 4)
    0x80070514L,		// THAN, length: 4)
    0x80b70514L,		// THANK, length: 5)
    0x80001514L,		// THE, length: 3)
    0x80591514L,		// THERE, length: 5)
    0x80599514L,		// THESE, length: 5)
    0x80072514L,		// THIN, length: 4)
    0x80772514L,		// THING, length: 5)
    0x80b72514L,		// THINK, length: 5)
    0x8059bd14L,		// THOSE, length: 5)
    0x8052c914L,		// THREE, length: 5)
    0xac914,		// THRU, (bonus), length: 4)
    0x134,		// TI, (bonus), length: 2)
    0x91534,		// TIER, (bonus), length: 4)
    0x3134,		// TIL, (bonus), length: 3)
    0x2b934,		// TINE, (bonus), length: 4)
    0x8002c934L,		// TIRE, length: 4)
    0x4d34,		// TIS, (bonus), length: 3)
    0x205f4,		// TOAD, (bonus), length: 4)
    0x19205f4,		// TOADY, (bonus), length: 5)
    0x11f4,		// TOD, (bonus), length: 3)
    0x819091f4L,		// TODAY, length: 5)
    0x39f4,		// TON, (bonus), length: 3)
    0x49f4,		// TOR, (bonus), length: 3)
    0x80c0d1f4L,		// TOTAL, length: 5)
    0x8081d5f4L,		// TOUCH, length: 5)
    0x83d5f4,		// TOUGH, (bonus), length: 5)
    0x8920ddf4L,		// TOWARD, length: 6)
    0x65f4,		// TOY, (bonus), length: 3)
    0x80654,		// TRAP, (bonus), length: 4)
    0xbbe54,		// TROW, (bonus), length: 4)
    0x81965654L,		// TRULY, length: 5)
    0x80006654L,		// TRY, length: 3)
    0x90674,		// TSAR, (bonus), length: 4)
    0xab4,		// TUB, (bonus), length: 3)
    0x1eb4,		// TUG, (bonus), length: 3)
    0x80074ab4L,		// TURN, length: 4)
    0x88574ab4L,		// TURNED, length: 6)
    0x24574ab4,		// TURNER, (bonus), length: 6)
    0x8ac105d5L,		// UNABLE, length: 6)
    0x291d5,		// UNDE, (bonus), length: 4)
    0x812291d5L,		// UNDER, length: 5)
    0x800a25d5L,		// UNIT, length: 4)
    0xa732b1d5L,		// UNLESS, length: 6)
    0x80c4d1d5L,		// UNTIL, length: 5)
    0x80001675L,		// USE, length: 3)
    0x91675,		// USER, (bonus), length: 4)
    0x914b6,		// VEER, (bonus), length: 4)
    0x19914b6,		// VEERY, (bonus), length: 5)
    0x9859ccb6L,		// VESSEL, length: 6)
    0x50b6,		// VET, (bonus), length: 3)
    0x29136,		// VIDE, (bonus), length: 4)
    0x21536,		// VIED, (bonus), length: 4)
    0x8144cd36L,		// VISIT, length: 5)
    0x15f6,		// VOE, (bonus), length: 3)
    0x8051a5f6L,		// VOICE, length: 5)
    0x80004837L,		// WAR, length: 3)
    0x24837,		// WARD, (bonus), length: 4)
    0x80004c37L,		// WAS, length: 3)
    0x8122d037L,		// WATER, length: 5)
    0x2d837,		// WAVE, (bonus), length: 4)
    0x8132d837L,		// WAVES, length: 5)
    0x8b7,		// WEB, (bonus), length: 3)
    0x80562517L,		// WHILE, length: 5)
    0x80003d17L,		// WHO, length: 3)
    0x80023937L,		// WIND, length: 4)
    0xaef23937L,		// WINDOW, length: 6)
    0xa45a3937L,		// WINTER, length: 6)
    0x8002c937L,		// WIRE, length: 4)
    0x80045137L,		// WITH, length: 4)
    0x9c945137L,		// WITHIN, length: 6)
    0x1f7,		// WO, (bonus), length: 2)
    0x80e0b5f7L,		// WOMAN, length: 5)
    0x80e2b5f7L,		// WOMEN, length: 5)
    0x39f7,		// WON, (bonus), length: 3)
    0x5b9f7,		// WONK, (bonus), length: 4)
    0x800249f7L,		// WORD, length: 4)
    0x813249f7L,		// WORDS, length: 5)
    0xa49f7,		// WORT, (bonus), length: 4)
    0x808a49f7L,		// WORTH, length: 5)
    0x4df7,		// WOS, (bonus), length: 3)
    0x4039,		// YAP, (bonus), length: 3)
    0x807755f9L,		// YOUNG, length: 5)


};
#endif

PrototypeWordList::PrototypeWordList()
{
}


bool PrototypeWordList::pickWord(char* buffer)
{
    unsigned numWords = arraysize(sList);
    unsigned startIndex = WordGame::random.randrange(numWords);
    unsigned i = startIndex;
    do
    {
        // if the 3 seed word bits are set to this num cubes
        if (((sList[i] >> 31)))
        {
            char word[MAX_LETTERS_PER_WORD + 1];
            if (!bitsToString(sList[i], word))
            {
                ASSERT(0);
                return false;
            }

            if (_SYS_strnlen(word, MAX_LETTERS_PER_WORD + 1) ==
                    GameStateMachine::getCurrentMaxLettersPerWord())
            {
                 _SYS_strlcpy(buffer, word, GameStateMachine::getCurrentMaxLettersPerWord() + 1);
                return true;
            }
        }
        i = (i + 1) % numWords;
    } while (i != startIndex);

    ASSERT(0);
    return false;
}

static int bsearch_strcmp(const void*a, const void*b)
{
    // a is pKey in previous call, char**
    //STATIC_ASSERT(sizeof(uint32_t) == sizeof(unsigned));
    uint32_t* pb = (uint32_t*)b;
#if DEBUG
    const char** pa = (const char**)a;
    //printf("a %s, b %s\n", *(const char **)a, (const char *)b);
#endif

    // FIXME, if using a bsearch with compressed string in the future, don't
    // reconstruct strings, just make the hash and compare the smaller rep (assuming cheaper)
    char word[MAX_LETTERS_PER_WORD + 1];
    if (PrototypeWordList::bitsToString(*pb, word))
    {
        return _SYS_strncmp(*(const char **)a, word, GameStateMachine::getCurrentMaxLettersPerWord() + 1);
    }
    ASSERT(0);
    return 0;
}

bool PrototypeWordList::isWord(const char* string, bool& isBonus)
{
#ifndef DAWG_TEST
    //STATIC_ASSERT(arraysize(sList) == 28839);
#endif
    const char** pKey = &string;
    const uint32_t* array = (uint32_t*)sList;
    //const char** pArray = &array;
    const uint32_t* pItem =
            (const uint32_t*) bsearch(
                pKey,
                array,
                arraysize(sList),
                sizeof(sList[0]),
                (int(*)(const void*,const void*)) bsearch_strcmp);

    if (pItem != NULL)
    {
        isBonus = !((*pItem) & (1 << 31));
        return true;
    }
    return false;
}

bool PrototypeWordList::bitsToString(uint32_t bits, char* buffer)
{
    char word[MAX_LETTERS_PER_WORD + 1];
    _SYS_memset8((uint8_t*)word, 0, sizeof(word));
    const unsigned LTR_MASK = 0x1f; // 5 bits per letter
    const unsigned BITS_PER_LETTER = 5;
    // TODO store dictionary differently to allow for longer than 6 letter words
    for (unsigned j = 0; j < MAX_LETTERS_PER_WORD && j < 32/BITS_PER_LETTER; ++j)
    {
        char letter = 'A' - 1 + ((bits >> (j * BITS_PER_LETTER)) & LTR_MASK);
        if (letter < 'A' || letter > 'Z')
        {
            break;
        }
        word[j] = letter;
    }
    _SYS_strlcpy(buffer, word, arraysize(word));
    return buffer[0] != '\0';
}
