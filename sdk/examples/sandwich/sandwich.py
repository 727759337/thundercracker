#!/usr/bin/python
# implementation of sandwich kingdom content specification
import lxml.etree, os, posixpath, re, traceback, sys, zlib, tmx, misc
from sandwich_map import *
from sandwich_dialog import *
from sandwich_item import *
from sandwich_quest import *

def load():
	try:
		return World("Content")
	except:
		log_error()

def export():
	try:
		World("Content").export()
		content_hash = crc([ "content.gen.lua", "content.gen.cpp" ])
		print "CONTENT CRC = " + content_hash
		with open("content_crc.txt", "w") as f: 
			f.write(content_hash)
	except:
		log_error()
		sys.exit(-1)

def log_error():
	typ,val,bt = sys.exc_info()
	print "\n\nUnexpected error:", val
	print "-----------"
	traceback.print_tb(bt)

def crc(fileNames):
    prev = 0
    for fileName in fileNames:
    	for eachLine in open(fileName,"rb"):
        	prev = zlib.crc32(eachLine, prev)
    return "%X"%(prev & 0xFFFFFFFF)

class World:
	def __init__(self, dir):
		self.dir = dir
		self.quests = QuestDatabase(self, posixpath.join(dir, "quest-database.xml"))
		self.dialogs = DialogDatabase(self, posixpath.join(dir, "dialog-database.xml"))
		self.items = ItemDatabase(self, posixpath.join(dir,"item-database.xml"))
		self.maps = MapDatabase(self, posixpath.join(dir, "map-database.xml"))

		self.bg_tilesets = list(set((m.background_id for m in self.maps.maps)))
		self.overlay_tilesets = list(set((m.overlay_id for m in self.maps.maps if m.overlay is not None)))
		

		# validate quests
		if len(self.quests.unlockables) > 32:
			raise Exception("More than 32 unlockable flags (implicit and explicit) in game script")
		for quest in self.quests.quests:
			assert quest.map in self.maps.map_dict, "unknown map in gamte sript: " + quest.map
			assert 0 <= quest.x and 0 <= quest.y and quest.x < self.maps.map_dict[quest.map].width and quest.y < self.maps.map_dict[quest.map].height, "invalid map starting position"
			assert len(quest.flags) <= 32, "More than 32 flags (implicit and explicit) in quest: " + quest.id
			# validate triggers
			for m in self.maps.maps:
				for r in m.rooms:
					assert len([t for t in r.triggers if t.is_active_for(quest)]) < 2, "Too many triggers in room in map: " + m.id

	def export(self):
		with open("content.gen.lua", "w") as lua:
			lua.write("--GENERATED BY SANDWICH.PY, DO NOT EDIT BY HAND\n")
			lua.write("\n-- MAP IMAGES\n")

			for filename in self.bg_tilesets:
				lua.write("TileSet_%s = image{ \"%s\", width=16, height=16 }\n" % (
					posixpath.splitext(filename)[0],
					posixpath.join(self.dir, filename)
				))
			for filename in self.overlay_tilesets:
				lua.write("Overlay_%s = image{ \"%s\", width=16, height=16 }\n" % (
					posixpath.splitext(filename)[0],
					posixpath.join(self.dir, filename)
				))

			#for filename in (posixpath.basename(path) for path in os.listdir(self.dir) if path.endswith(".tmx")):
			#	name = filename[:-4]
			#	lua.write("TileSet_%s = image{ \"%s.png\", width=16, height=16 }\n" % (name,name))
			#	if posixpath.exists(name + "_overlay.png"):
			#		lua.write("Overlay_%s = image{ \"%s_overlay.png\", width=16, height=16 }\n" % (name,name))
			lua.write("\n-- DIALOG IMAGES\n")
			for name in self.dialogs.list_npc_image_names():
				lua.write("NPC_%s = image{ \"%s.png\", width=32, height=32 }\n" % (name,posixpath.join(self.dir, name)))
			for name in self.dialogs.list_detail_image_names():
				lua.write("NPC_Detail_%s = image{ \"%s.png\" }\n" % (name,posixpath.join(self.dir, name)))
		
		with open("content.gen.cpp", "w") as src:
			src.write("// GENERATED BY SANDWICH.PY, NO NOT EDIT BY HAND\n")
			src.write("#include \"Content.h\"\n#include \"assets.gen.h\"\n\n")
			src.write("const unsigned gMapCount = %d;\n" % len(self.maps.maps))
			src.write("const unsigned gQuestCount = %d;\n" % len(self.quests.quests))
			src.write("const unsigned gDialogCount = %d;\n\n" % len(self.dialogs.dialogs))
			for map in self.maps.maps:
				map.write_source_to(src)
			src.write("\nconst MapData gMapData[] = {\n")
			for map in self.maps.maps:
				map.write_decl_to(src)
			src.write("};\n\n")

			src.write("const QuestData gQuestData[] = {\n")
			for q in self.quests.quests:
				m = self.maps.map_dict[q.map]
				src.write("    { 0x%x, 0x%x },\n" % (m.index, m.roomat(q.x, q.y).lid))
			src.write("};\n\n")
			
			for d in self.dialogs.dialogs:
				src.write("static const DialogTextData %s_lines[] = {\n" % d.id)
				for l in d.lines:
					src.write("    { &NPC_Detail_%s, \"%s\" },\n" % (l.image, l.text))
				src.write("};\n")
			src.write("\nconst DialogData gDialogData[] = {\n")
			for d in self.dialogs.dialogs:
				src.write("    { &NPC_%s, %d, %s_lines },\n" % (d.npc, len(d.lines), d.id))

			src.write("};\n\n")
			self.items.write(src)

		#with open(posixpath.join(self.dir, "content.gen.h"), "w") as src:
		#	src.write("// GENERATED BY SANDWICH.PY, NO NOT EDIT BY HAND\n")
		#	src.write("\n\n")


if __name__ == "__main__": 
	export()
