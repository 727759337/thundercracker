/* Copyright <c> 2011 Sifteo, Inc. All rights reserved. */

#include <stdlib.h>
#include <sifteo.h>

#include "game.h"

static const uint8_t fb_pixels[] = {
     0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
     0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
     0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
     0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xef, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff,
     0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xac, 0x45, 0xa5, 0xeb, 0xff, 0xff, 0xff, 0xff,
     0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xbe, 0x22, 0x32, 0x54, 0x87, 0xfc, 0xff, 0xff, 0xff,
     0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x2a, 0x11, 0x21, 0x43, 0x76, 0xc9, 0xff, 0xff, 0xff,
     0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xcf, 0x12, 0x00, 0x20, 0x42, 0x76, 0x98, 0xfe, 0xff, 0xff,
     0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x5f, 0x12, 0x00, 0x10, 0x42, 0x75, 0x98, 0xfb, 0xff, 0xff,
     0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xae, 0x12, 0x00, 0x20, 0x42, 0x76, 0x99, 0xfb, 0xff, 0xff,
     0xff, 0xff, 0xff, 0xef, 0xbc, 0xbb, 0xec, 0x5c, 0x11, 0x22, 0x53, 0x76, 0x99, 0xea, 0xff, 0xff,
     0xff, 0xff, 0xff, 0x4c, 0x33, 0x54, 0x86, 0xec, 0x2a, 0x33, 0x64, 0x87, 0x99, 0xeb, 0xff, 0xff,
     0xff, 0xff, 0xaf, 0x22, 0x22, 0x43, 0x75, 0xb8, 0x8e, 0x54, 0x76, 0x98, 0xa9, 0xfb, 0xff, 0xff,
     0xff, 0xff, 0x2c, 0x01, 0x10, 0x32, 0x65, 0x97, 0xdc, 0xca, 0xed, 0xde, 0xbc, 0xfc, 0xff, 0xff,
     0xff, 0xdf, 0x23, 0x00, 0x00, 0x32, 0x64, 0x97, 0xea, 0xbe, 0x5a, 0xba, 0xec, 0xfe, 0xff, 0xff,
     0xff, 0xcf, 0x23, 0x00, 0x00, 0x32, 0x64, 0xa7, 0xce, 0x25, 0x32, 0x64, 0xa7, 0xfd, 0xff, 0xff,
     0xff, 0xbf, 0x23, 0x11, 0x11, 0x32, 0x65, 0xd8, 0x2b, 0x11, 0x22, 0x53, 0x76, 0xd9, 0xff, 0xff,
     0xff, 0xaf, 0x34, 0x22, 0x22, 0x43, 0x76, 0xdb, 0x12, 0x00, 0x20, 0x42, 0x76, 0xa8, 0xfe, 0xff,
     0xff, 0xbf, 0x45, 0x34, 0x43, 0x64, 0x87, 0xae, 0x12, 0x00, 0x10, 0x42, 0x75, 0x98, 0xfb, 0xff,
     0xff, 0xcf, 0x67, 0x55, 0x55, 0x76, 0xa8, 0x3e, 0x12, 0x00, 0x10, 0x42, 0x76, 0x98, 0xfa, 0xff,
     0xff, 0xdf, 0x78, 0x77, 0x77, 0x87, 0xb9, 0x4d, 0x23, 0x11, 0x21, 0x43, 0x76, 0x99, 0xea, 0xff,
     0xff, 0xff, 0x9b, 0x88, 0x88, 0x99, 0xc9, 0x5c, 0x34, 0x22, 0x32, 0x54, 0x87, 0x99, 0xdb, 0xff,
     0xff, 0xff, 0xae, 0x99, 0x99, 0x99, 0xca, 0x6d, 0x45, 0x44, 0x54, 0x65, 0x97, 0xa9, 0xfb, 0xff,
     0xff, 0xff, 0xef, 0xab, 0xaa, 0xba, 0xcb, 0x7e, 0x66, 0x55, 0x66, 0x77, 0x99, 0xb9, 0xfc, 0xff,
     0xff, 0xff, 0xff, 0xdf, 0xcc, 0xcc, 0xdc, 0xbf, 0x78, 0x77, 0x77, 0x98, 0x99, 0xba, 0xfd, 0xff,
     0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xef, 0x99, 0x89, 0x99, 0x99, 0xaa, 0xcb, 0xff, 0xff,
     0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x9c, 0x99, 0x99, 0xaa, 0xbb, 0xec, 0xff, 0xff,
     0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xdf, 0xab, 0xba, 0xbb, 0xcc, 0xfe, 0xff, 0xff,
     0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xdf, 0xcc, 0xdc, 0xfd, 0xff, 0xff, 0xff,
     0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
     0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
     0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
};

static const uint8_t fb_palette[] = {
     0x7f,0xa6, 0x3f,0x65, 0x1f,0x5d, 0xff,0x5c, 0xdf,0x54, 0xdf,0x54, 0xbf,0x4c, 0xbf,0x44,
     0x9f,0x44, 0x7f,0x3c, 0xfb,0x33, 0xd4,0x22, 0x0e,0x1a, 0x28,0x11, 0x62,0x08, 0x00,0x00,
};


void Game::loadAssets()
{
    for (unsigned i = 0; i < NUM_CUBES; i++) {
        Cube &cube = getGameCube(i).cube;
        cube.enable();
        cube.loadAssets(GameAssets);
        
        _SYS_vbuf_write(&cube.vbuf.sys, 0, (uint16_t*)fb_pixels, (sizeof fb_pixels)/2);
        _SYS_vbuf_write(&cube.vbuf.sys, _SYS_VA_COLORMAP/2, (uint16_t*)fb_palette, (sizeof fb_palette)/2);
        _SYS_vbuf_pokeb(&cube.vbuf.sys, offsetof(_SYSVideoRAM, mode), _SYS_VM_FB32);
    }

    for (;;) {
        bool done = true;

        for (unsigned i = 0; i < NUM_CUBES; i++) {
            Cube &cube = getGameCube(i).cube;
            unsigned progress = cube.assetProgress(GameAssets, 32);

            for (unsigned j = 0; j < progress; j++) {
                unsigned addr = j/2 +  31*16;
                unsigned shift = (j & 1) * 4;
                uint8_t mask = ~(0xF << shift);

                cube.vbuf.pokeb(addr, cube.vbuf.peekb(addr) & mask);
            }

            if (!cube.assetDone(GameAssets))
                done = false;
        }

        System::paint();

        if (done)
            break;
    }
}
