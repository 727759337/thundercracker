# We expect SDK_DIR to point to the directory containing this file.

###########################

# Tool definitions
STIR := $(SDK_DIR)/bin/stir
LD := $(SDK_DIR)/bin/slinky
CC := $(SDK_DIR)/bin/arm-clang

BIN := $(APP).elf
ASSETS = assets

GENERATED_FILES = $(ASSETS).gen.h $(ASSETS).gen.cpp $(ASSETS).html
CDEPS += $(STIR)
CFLAGS += -I$(SDK_DIR)/include

# Compile for a minimal environment, generate LLVM object files
CFLAGS += -emit-llvm -ffreestanding -nostdinc -msoft-float

# Disable unwanted warnings, but be generally pretty pedantic
CFLAGS += -Wall -Werror -Wno-unused -Wno-gnu -Wno-c++11-extensions

# Disable unwanted features
CCFLAGS += -fno-exceptions -fno-threadsafe-statics -fno-rtti -fno-stack-protector

# generate dependency files
CFLAGS += -MD -MP

# We can always let the C compiler generate debug symbols; slinky
# will filter those out or not depending on its command line options.
CFLAGS += -g

# By default, generate a binary with lightweight debug info and symbols.
# If the "RELEASE" var is set, we instead generate a fully stripped
# release binary by omitting "-g" in our slinky invocation.

ifeq ($(RELEASE),)
    LDFLAGS += -g
endif

ifneq ($(DISABLE_INLINING),)
    LDFLAGS += -disable-inlining
endif

ifneq ($(NO_LOG),)
    CFLAGS += -DNO_LOG
endif

ifneq ($(NO_ASSERT),)
    CFLAGS += -DNO_ASSERT
endif

ifneq ($(DISABLE_OPT),)
    CFLAGS += -O0
    LDFLAGS += -O0
endif

# C++ inherits CFLAGS too
CCFLAGS += $(CFLAGS)
