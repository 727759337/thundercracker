CC = arm-none-eabi-gcc
GDB = arm-none-eabi-gdb
RANLIB = arm-none-eabi-ranlib
AR = arm-none-eabi-ar

SDK_DIR = $(TC_DIR)/sdk
MASTER_DIR = $(TC_DIR)/firmware/master

# Only disable this in debugging emergencies!
#
# Optimization is important, we use a lot of C++ code that's written
# assuming it will be inlined. The inlined code should end up being
# smaller due to constant folding. Without optimization, a lot of our
# code ends up too large and/or slow to run on real hardware!
CCFLAGS += -Os

# Math
CCFLAGS += -ffast-math
LDFLAGS += -lm

# Always build with debug symbols (It can't hurt)
CCFLAGS += -g3

# NOTE: putting DEPFLAGS here separately, since $(@F) didn't want to expand
# properly when included as part of CCFLAGS
DEPFLAGS = -MD -MP -MF .dep/$(@F).d

# Heavy debug options, only enabled by an explicit environment variable.
# This can prevent the firmware from operating normally, so only enable it
# if you know what you're doing! The main effect it has right now is to make
# JTAG debugging possible, at the expense of flash memory access.
ifneq ($(DEBUG),)
    CCFLAGS += -DDEBUG
endif

# Configurable radio channel
ifneq ($(MASTER_RF_CHAN),)
    CCFLAGS += -DMASTER_RF_CHAN=$(MASTER_RF_CHAN)
endif

# Environment defs
# NOTE: specify these relative to MASTER_DIR so both normal and testjig builds can share
CCFLAGS += \
	-I$(MASTER_DIR)/common \
	-I$(MASTER_DIR)/stm32 \
	-I$(MASTER_DIR)/../include \
	-I$(SDK_DIR)/include \
	-DNOT_USERSPACE \
	-D__STDC_FORMAT_MACROS

# Disable unwanted warnings, but be generally pretty pedantic
CCFLAGS += -Wall -Werror -Wno-unused -Wno-strict-aliasing

# GCC's lame excuse for link-time optimization... saves only a little space
CCFLAGS += -ffunction-sections -fdata-sections
LDFLAGS += -Wl,--gc-sections

# Disable unwanted C++ features
CCFLAGS += -fno-exceptions -fno-threadsafe-statics -fno-rtti

# When dtors are defined for static objects, gcc wants to create special handling
# for them - disable this since those dtors will never be called
CCFLAGS += -fno-use-cxa-atexit

# default linker script handling
ifeq ($(LDSCRIPT), )

# generate our linker script with the appropriate flash offset.
# Required since we can't specify this as an option to the linker, and we don't
# want 2 separate linker scripts
	ifeq ($(BOOTLOADABLE), )
		CCFLAGS += -DBOOTLOADABLE
		LDSCRIPT_GEN := python $(MASTER_DIR)/tools/ldscript-gen.py
	else
		LDSCRIPT_GEN := python $(MASTER_DIR)/tools/ldscript-gen.py --bootloadable
	endif

LDSCRIPT := $(MASTER_DIR)/stm32/target.ld
endif

# Build architecture
ARCH := -mthumb -mcpu=cortex-m3 -mfix-cortex-m3-ldrd \
    -msoft-float -mno-thumb-interwork

CCFLAGS += $(ARCH)
LDFLAGS += $(ARCH) \
              -Wl,-Map=master-stm32.map,--cref,--gc-sections,-u,IVT \
              -T $(LDSCRIPT) -nostartfiles

# Select JTAG device for programming - default to Olimex
ifeq ($(JTAGKEY),)
    PROG_CONFIG := olimex.cfg
else 
    PROG_CONFIG := jtagkey2.cfg
endif
