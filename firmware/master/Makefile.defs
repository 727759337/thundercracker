CC_SIM = gcc
RANLIB_SIM = ranlib

CC_STM32 = arm-none-eabi-gcc
GDB_STM32 = arm-none-eabi-gdb
RANLIB_STM32 = arm-none-eabi-ranlib

UNAME := $(shell uname)

ifeq ($(findstring MINGW32_NT,$(UNAME)),MINGW32_NT)  
      UNAME := windows32
endif

ifeq ($(UNAME), windows32)
        BIN_EXT = .exe
else
        BIN_EXT = 
endif

SDK_DIR = $(TC_DIR)/sdk
MASTER_DIR = $(TC_DIR)/firmware/master
STIR = $(TC_DIR)/stir/stir$(BIN_EXT)

ASSETS = assets
BINS += $(BIN_SIM) $(BIN_STM32)
CDEPS += $(SDK_DIR)/include/sifteo/*.h $(STIR)

# Only disable this for debugging! The -O2 flag is important, we use
# a lot of C++ code that's written assuming it will be inlined. The
# inlined code should end up being smaller due to constant folding.
CCFLAGS += -O2

# Also important: No C++ exception handling support!
CCFLAGS += -fno-exceptions

CCFLAGS += -g -Wall -Werror -I$(SDK_DIR)/include \
           -ffunction-sections -fdata-sections \
           -ffast-math
LDFLAGS += -lm

LIBS_SIM := $(MASTER_DIR)/master-sim.a
CCFLAGS_SIM := $(CCFLAGS) -DSIFTEO_SIMULATOR
LDFLAGS_SIM := $(LDFLAGS)

ifeq ($(UNAME), windows32)
    LDFLAGS_SIM += -lws2_32
endif

LIBS_STM32 := $(MASTER_DIR)/master-stm32.a
LDSCRIPT_STM32 := $(MASTER_DIR)/stm32/target.ld

ARCH_STM32 := -mthumb -march=armv7-m \
              -mtune=cortex-m3 -mfix-cortex-m3-ldrd \
              -msoft-float -mno-thumb-interwork

CCFLAGS_STM32 := $(CCFLAGS) $(ARCH_STM32)
LDFLAGS_STM32 := $(LDFLAGS) $(ARCH_STM32) \
              -Wl,--gc-sections,-u,IVT \
              -T $(LDSCRIPT_STM32) -nostartfiles

