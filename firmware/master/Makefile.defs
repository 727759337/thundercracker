CC = arm-none-eabi-gcc
GDB = arm-none-eabi-gdb
RANLIB = arm-none-eabi-ranlib
AR = arm-none-eabi-ar

SDK_DIR = $(TC_DIR)/sdk
MASTER_DIR = $(TC_DIR)/firmware/master



# CFLAGS gets added to the platform specific CFLAGS within Makefile.defs
CFLAGS := -Icommon -Istm32 -I../include -DNOT_USERSPACE

ifneq ($(MASTER_RF_CHAN),)
    CFLAGS += -DMASTER_RF_CHAN=$(MASTER_RF_CHAN)
endif


BINS = $(BIN_SIM)
ifneq ($(BUILD_STM32),)
	BINS += $(BIN_STM32)
endif

# Only disable this in debugging emergencies!
#
# The -O2 flag is important, we use a lot of C++ code that's written
# assuming it will be inlined. The inlined code should end up being
# smaller due to constant folding.
#
# Without optimization, a lot of our code ends up too large and/or slow
# to run on real hardware!
CFLAGS += -O3

# Always build with debug symbols (It can't hurt)
CFLAGS += -g3

# NOTE: putting DEPFLAGS here separately, since $(@F) didn't want to expand
# properly when included as part of CFLAGS/CCFLAGS
DEPFLAGS = -MD -MP -MF .dep/$(@F).d

# Heavy debug options, only enabled by an explicit environment variable.
# This can prevent the firmware from operating normally, so only enable it
# if you know what you're doing! The main effect it has right now is to make
# JTAG debugging possible, at the expense of flash memory access.
ifneq ($(DEBUG),)
    CFLAGS += -DDEBUG
endif

# Disable unwanted warnings, but be generally pretty pedantic
# XXX - no-strict-aliasing is needed in syscall.cpp, perhaps only apply to that file
CFLAGS += -Wall -Werror -Wno-unused -Wno-strict-aliasing

CFLAGS += -g -I$(SDK_DIR)/include \
          -ffunction-sections -fdata-sections \
          -ffast-math
LDFLAGS += -lm

# CC is C++, CPP is the C Preprocessor. C++ code inherits CFLAGS,
# but it may have additional C++-specific flags set as well.

# Disable unwanted C++ features
CCFLAGS += -fno-exceptions -fno-threadsafe-statics -fno-rtti
# when dtors are defined for static objects, gcc wants to create special handling
# for them - disable this since those dtors will never be called
CCFLAGS += -fno-use-cxa-atexit

include $(TC_DIR)/Makefile.platform

LDFLAGS_SIM +=  -L$(DEPS_DIR)/portaudio/lib

ifeq ($(BUILD_PLATFORM), Darwin)
    # these are all required by portaudio, believe it or not
    LDFLAGS_SIM += -framework CoreAudio -framework AudioToolbox \
                    -framework AudioUnit -framework CoreServices
endif

ifeq ($(BUILD_PLATFORM), windows32)
    # note : portaudio had to come *before* winmm on my machine
    LDFLAGS_SIM +=  -lws2_32 -lole32 -lportaudio -lwinmm
else
	LDFLAGS_SIM += -lportaudio
endif

CFLAGS_SIM += $(CFLAGS) -DSIFTEO_SIMULATOR

# 32-bit mingw needs this for the __sync_fetch_* family of routines
ifeq ($(BUILD_PLATFORM), windows32)
    CFLAGS_SIM += -march=native
endif

CCFLAGS_SIM += $(CFLAGS_SIM) $(CCFLAGS) # inherit all SIM CFLAGS plus CCFLAGS
LDFLAGS_SIM += $(LDFLAGS)

LDSCRIPT_STM32 := $(MASTER_DIR)/stm32/target.ld

ARCH_STM32 := -mthumb -mcpu=cortex-m3 -mfix-cortex-m3-ldrd \
              -msoft-float -mno-thumb-interwork

CFLAGS_STM32 += $(CFLAGS) $(ARCH_STM32)
CCFLAGS_STM32 := $(CFLAGS_STM32) $(CCFLAGS) # inherit all STM32 CFLAGS plus CCFLAGS
LDFLAGS_STM32 := $(LDFLAGS) $(ARCH_STM32) \
              -Wl,-Map=master-stm32.map,--cref,--gc-sections,-u,IVT \
              -T $(LDSCRIPT_STM32) -nostartfiles

# We use the C++ standard library only for simulator builds
LDFLAGS_SIM += $(LIB_STDCPP)

#Determines whether the jtagkey2 or the olimex cfg files should be used for programming
ifneq ($(OLIMEX),)
	PROG_CONFIG := olimex.cfg
else 
	PROG_CONFIG := jtagkey2.cfg
endif
