CC = arm-none-eabi-gcc
GDB = arm-none-eabi-gdb
RANLIB = arm-none-eabi-ranlib
AR = arm-none-eabi-ar

SDK_DIR = $(TC_DIR)/sdk
MASTER_DIR = $(TC_DIR)/firmware/master
STIR = $(abspath $(SDK_DIR)/bin/stir)

# Only disable this in debugging emergencies!
#
# Optimization is important, we use a lot of C++ code that's written
# assuming it will be inlined. The inlined code should end up being
# smaller due to constant folding. Without optimization, a lot of our
# code ends up too large and/or slow to run on real hardware!
FLAGS += -Os

# No standard libraries, no math libraries.
# Use our own patched libraries. We do, however, use the default libgcc.
FLAGS += -ffast-math -D_IEEE_LIBM
LDFLAGS += -nostdlib -lgcc

# Versioning
VERSION := $(shell git describe --tags)
FLAGS += -DSDK_VERSION=$(VERSION)

# Always build with debug symbols (It can't hurt)
FLAGS += -g3

# NOTE: putting DEPFLAGS here separately, since $(@F) didn't want to expand
# properly when included as part of FLAGS
DEPFLAGS = -MD -MP -MF .dep/$(@F).d

# Heavy debug options, only enabled by an explicit environment variable.
# This can prevent the firmware from operating normally, so only enable it
# if you know what you're doing! The main effect it has right now is to make
# JTAG debugging possible, at the expense of flash memory access.
ifneq ($(DEBUG),)
    FLAGS += -DDEBUG
endif

# Environment defs
# NOTE: specify these relative to MASTER_DIR so both normal and testjig builds can share
FLAGS += \
	-I$(MASTER_DIR)/stm32/newlib/libm/common \
	-I$(MASTER_DIR)/stm32/newlib/libc/include \
	-I$(MASTER_DIR)/stm32/newlib/libm/include \
	-I$(MASTER_DIR)/assets \
	-I$(MASTER_DIR)/common \
	-I$(MASTER_DIR)/stm32 \
	-I$(MASTER_DIR)/../include \
	-I$(SDK_DIR)/include \
	-DNOT_USERSPACE \
	-D__STDC_FORMAT_MACROS

# Disable unwanted warnings, but be generally pretty pedantic
FLAGS += -Wall -Werror -Wno-unused -Wno-strict-aliasing

# Link-time garbage collection
FLAGS += -ffunction-sections -fdata-sections
LDFLAGS += -Wl,--gc-sections

# Disable unwanted C++ features
CCFLAGS += -fno-exceptions -fno-threadsafe-statics -fno-rtti

# When dtors are defined for static objects, gcc wants to create special handling
# for them - disable this since those dtors will never be called
CCFLAGS += -fno-use-cxa-atexit

# generate our linker script with the appropriate flash offset.
# Required since we can't specify this as an option to the linker, and we don't
# want 2 separate linker scripts
ifeq ($(BOOTLOADABLE), )
    LDSCRIPT_GEN := python $(MASTER_DIR)/tools/ldscript-gen.py
else
    FLAGS += -DBOOTLOADABLE
    LDSCRIPT_GEN := python $(MASTER_DIR)/tools/ldscript-gen.py --bootloadable
endif

#adding a flag for the test jig
#mostly used for compiling the bootloader for the testjig
ifneq ($(TEST_JIG),)
	FLAGS += -DBOARD=BOARD_TEST_JIG
endif

# Optional hardware features
ifneq ($(HAVE_NRF8001),)
    FLAGS += -DHAVE_NRF8001
endif

# default linker script handling
ifeq ($(LDSCRIPT), )
LDSCRIPT := $(MASTER_DIR)/stm32/target.ld
endif

# Build architecture
ARCH := -mthumb -mcpu=cortex-m3 -mfix-cortex-m3-ldrd \
    -msoft-float -mno-thumb-interwork

FLAGS += $(ARCH)
LDFLAGS += $(ARCH) \
              -Wl,-Map=$(BIN).map,--cref,--gc-sections,-u,IVT \
              -T $(LDSCRIPT) -nostartfiles

# Select JTAG device for programming - default to Olimex
ifeq ($(JTAGKEY),)
    PROG_CONFIG := olimex.cfg
else 
    PROG_CONFIG := jtagkey2.cfg
endif

# gold master disables timeouts
ifneq ($(RFTEST_GOLD_MASTER),)
    FLAGS += -DDISABLE_IDLETIMEOUT -DDISABLE_WATCHDOG
    FLAGS += -DRFTEST_GOLD_MASTER 
endif
