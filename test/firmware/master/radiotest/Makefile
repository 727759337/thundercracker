# A sample Makefile for building Google Test and using it in user
# tests.  Please tweak it to suit your environment and project.  You
# may want to move it to your project's root directory.
#
# SYNOPSIS:
#
#   make [all]  - makes everything.
#   make TARGET - makes the given target.
#   make clean  - removes all files generated by make.

# All tests produced by this Makefile.  Remember to add new tests you
# created to the list.
TESTS = radiotest

# House-keeping build targets.

all : $(TESTS)

clean :
	rm -f $(TESTS) gtest.a gtest_main.a *.o

# Please tweak the following variable definitions as needed by your
# project, except GTEST_HEADERS, which you can use in your own targets
# but shouldn't modify.

# Points to the root of Google Test, relative to where this file is.
# Remember to tweak this if you move this file.
GTEST_DIR = /Users/jaredhanson/Projects/vendor/gtest-1.6.0

# All Google Test headers.  Usually you shouldn't change this
# definition.
GTEST_HEADERS = $(GTEST_DIR)/include/gtest/*.h \
                $(GTEST_DIR)/include/gtest/internal/*.h

# Where to find user code.
USER_DIR = .

# Thundercracker definitions.
TC_DIR = ../../../..
SIFTEO_FIRMWARE_DIR = $(TC_DIR)/firmware/master

DEPS_DIR = $(TC_DIR)/deps/osx
SIM_STATIC_LIBS = $(DEPS_DIR)/speex/lib/libspeex.a \
                  $(DEPS_DIR)/portaudio/lib/libportaudio.a

include $(SIFTEO_FIRMWARE_DIR)/Makefile.objs

# CFLAGS gets added to the platform specific CFLAGS within Makefile.defs
CFLAGS := -I$(SIFTEO_FIRMWARE_DIR)/common -I$(SIFTEO_FIRMWARE_DIR)/../include
CFLAGS_SIM = -I$(DEPS_DIR)/portaudio/include \
             -I$(DEPS_DIR)/speex/include

include $(SIFTEO_FIRMWARE_DIR)/Makefile.defs


# Flags passed to the preprocessor.
#CPPFLAGS += -I$(GTEST_DIR)/include -I$(SIFTEO_SDK_DIR)/include -I$(SIFTEO_MASTER_FIRMWARE_COMMON_DIR) -I$(SIFTEO_SHARED_FIRMWARE_DIR)/include -DBUILD_UNIT_TEST
#CPPFLAGS += -I$(GTEST_DIR)/include -I$(SIFTEO_SDK_DIR)/include -I$(SIFTEO_FIRMWARE_DIR)/common -I$(SIFTEO_FIRMWARE_DIR)/../include

#CPPFLAGS += -I$(GTEST_DIR)/include $(CFLAGS) -DBUILD_UNIT_TEST -DUNIT_TEST_RADIO
CPPFLAGS += -I$(GTEST_DIR)/include $(CFLAGS) -DBUILD_UNIT_TEST -DUNIT_TEST_RADIO

# Flags passed to the C++ compiler.
#CXXFLAGS += -g -Wall -Wextra
CXXFLAGS += -g -Wextra


# Builds gtest.a and gtest_main.a.

# Usually you shouldn't tweak such internal variables, indicated by a
# trailing _.
GTEST_SRCS_ = $(GTEST_DIR)/src/*.cc $(GTEST_DIR)/src/*.h $(GTEST_HEADERS)

# For simplicity and to avoid depending on Google Test's
# implementation details, the dependencies specified below are
# conservative and not optimized.  This is fine as Google Test
# compiles fast and for ordinary users its source rarely changes.
gtest-all.o : $(GTEST_SRCS_)
	$(CXX) $(CPPFLAGS) -I$(GTEST_DIR) $(CXXFLAGS) -c \
            $(GTEST_DIR)/src/gtest-all.cc

gtest_main.o : $(GTEST_SRCS_)
	$(CXX) $(CPPFLAGS) -I$(GTEST_DIR) $(CXXFLAGS) -c \
            $(GTEST_DIR)/src/gtest_main.cc

gtest.a : gtest-all.o
	$(AR) $(ARFLAGS) $@ $^

gtest_main.a : gtest-all.o gtest_main.o
	$(AR) $(ARFLAGS) $@ $^


BIN_SIM = master-sim.a

$(BIN_SIM): $(OBJS_SIM)
	rm -f $@
	$(LIBTOOL_SIM) -static -o $@ $(^F) $(SIM_STATIC_LIBS)

%.sim.o: %.cpp $(CDEPS)
	$(CC_SIM) -c -o $(@F) $< $(CCFLAGS_SIM)


# Builds a sample test.  A test should link with either gtest.a or
# gtest_main.a, depending on whether it defines its own main()
# function.

main.o : $(USER_DIR)/main.cpp $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/main.cpp

radio_test.o : $(USER_DIR)/radio_test.cpp $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/radio_test.cpp

radiotest : radio_test.o main.o gtest_main.a $(BIN_SIM)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -lpthread $^ -o $@
