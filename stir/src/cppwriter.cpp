/* -*- mode: C; c-basic-offset: 4; intent-tabs-mode: nil -*-
 *
 * STIR -- Sifteo Tiled Image Reducer
 * M. Elizabeth Scott <beth@sifteo.com>
 *
 * Copyright <c> 2011 Sifteo, Inc. All rights reserved.
 */

#include "cppwriter.h"

namespace Stir {

const char *CPPWriter::indent = "    ";

CPPWriter::CPPWriter(Logger &log, const char *filename)
    : mLog(log)
{
    if (filename) {
	mStream.open(filename);
	if (!mStream.is_open())
	    log.error("Error opening output file '%s'", filename);
    }
    
    if (mStream.is_open())
	head();
}

void CPPWriter::head()
{
    mStream <<
	"/*\n"
	" * Generated by STIR. Do not edit by hand.\n"
	" */\n"
	"\n"
	"#include <sifteo/asset.h>\n";
}

void CPPWriter::foot()
{}
 
void CPPWriter::close()
{
    if (mStream.is_open()) {
	foot();
	mStream.close();
    }
}

void CPPWriter::writeArray(const std::vector<uint8_t> &array)
{
    char buf[8];

    mStream << indent;

    for (unsigned i = 0; i < array.size(); i++) {
	if (i && !(i % 16))
	    mStream << "\n" << indent;

	sprintf(buf, "0x%02x,", array[i]);
	mStream << buf;
    }

    mStream << "\n";
}


CPPSourceWriter::CPPSourceWriter(Logger &log, const char *filename)
    : CPPWriter(log, filename)
    {}

void CPPSourceWriter::writeGroup(const Group &group)
{
    char buf[32];

    sprintf(buf, "0x%016llx", (long long unsigned int) group.getSignature());

    mStream <<
	"\n"
	"static const struct {\n" <<
	indent << "struct _SYSAssetGroupHeader hdr;\n" <<
	indent << "uint8_t data[" << group.getLoadstream().size() << "];\n"
	"} " << group.getName() << "_data = {{\n" <<
	indent << "/* hdrSize   */ sizeof(struct _SYSAssetGroupHeader),\n" <<
	indent << "/* reserved  */ 0,\n" <<
	indent << "/* numTiles  */ " << group.getPool().size() << ",\n" <<
	indent << "/* dataSize  */ " << group.getLoadstream().size() << ",\n" <<
	indent << "/* signature */ " << buf << ",\n"
	"}, {\n";

    writeArray(group.getLoadstream());

    mStream <<
	"}};\n\n"
	"Sifteo::AssetGroup " << group.getName() <<
	" = {{ &" << group.getName() << "_data.hdr, " << group.getName() << ".cubes }};\n";
}


CPPHeaderWriter::CPPHeaderWriter(Logger &log, const char *filename)
    : CPPWriter(log, filename)
{
    if (filename)
	createGuardName(filename);

    if (mStream.is_open())
	head();
}

void CPPHeaderWriter::createGuardName(const char *filename)
{
    /*
     * Make a name for the include guard, based on the filename
     */

    char c;
    char prev = '_';
    guardName = prev;

    while ((c = *filename)) {
	c = toupper(c);

	if (isalpha(c)) {
	    prev = c;
	    guardName += prev;
	} else if (prev != '_') {
	    prev = '_';
	    guardName += prev;
	}

	filename++;
    }
}

void CPPHeaderWriter::head()
{
    mStream <<
	"\n"
	"#ifndef " << guardName << "\n"
	"#define " << guardName << "\n";
}

void CPPHeaderWriter::foot()
{
    mStream <<
	"\n"
	"#endif  // " << guardName << "\n";

    CPPWriter::foot();
}

void CPPHeaderWriter::writeGroup(const Group &group)
{
    mStream << 
	"\n"
	"extern Sifteo::AssetGroup " << group.getName() << ";\n";
}


};  // namespace Stir
