#!/usr/bin/env python
#
# Quick script to convert binary files to C arrays, so we can portably
# include them in our data segment. The emulator only needs a few external
# resources, and including them in the binary like this makes it easy to
# keep the simulator self-contained.
#
# M. Elizabeth Scott <beth@sifteo.com>
# 
# Copyright (c) 2011 Sifteo, Inc.
#

INPUTS = [
    ('rb', "../launcher/launcher.elf"),
    ('rb', "resources/img_cube_face.png"),
    ('rb', "resources/img_cube_face_hilight.png"),
    ('rb', "resources/img_cube_face_hilight_mask.png"),
    ('rb', "resources/img_wood.png"),
    ('rb', "resources/img_bg_light.png"),
    ('r',  "resources/cube_face_fp.glsl"),
    ('r',  "resources/cube_face_vp.glsl"),
    ('r',  "resources/cube_side_fp.glsl"),
    ('r',  "resources/cube_side_vp.glsl"),
    ('r',  "resources/background_fp.glsl"),
    ('r',  "resources/background_vp.glsl"),
    ('rb', "resources/ui_font_data.fnt"),
    ('rb', "resources/ui_font_data_0.png"),
    ]

OUTPUT = "resources/data.cpp"

###############

import os.path

HEADER = """
/* -*- mode: C; c-basic-offset: 4; intent-tabs-mode: nil -*-
 *
 * Data for the Thundercracker emulator.
 * This file is AUTOMATICALLY GENERATED.
 *
 * Copyright <c> 2011 Sifteo, Inc. All rights reserved.
 */

#include <stdint.h>
""".lstrip()


def saveCodeArrays(filename, arrays):
    f = open(filename, 'w')
    f.write(HEADER)
    for name, data in arrays:
        writeArray(f, name, data)

def writeArray(f, name, data):
    f.write("\nextern const uint8_t %s[] = {\n%s};\n"
            % (name, cByteArray(data)))

def cByteArray(bytes, width=16, indent="    "):
    # Format a list of byte values as a C array

    parts = []
    for i, b in enumerate(bytes):
        if (i % width) == 0:
            parts.append(indent)
        parts.append("0x%02x," % b)
        if (i % width) == width - 1 or i == len(bytes) - 1:
            parts.append("\n")
    return ''.join(parts)


if __name__ == "__main__":
    arrays = []

    for mode, filename in INPUTS:
        name = os.path.splitext(os.path.split(filename)[-1])[0]
        data = map(ord, open(filename, mode).read())

        # NUL-terminate strings. (Harmless on images)
        data.append(0)

        arrays.append((name, data)) 

    saveCodeArrays(OUTPUT, arrays)
