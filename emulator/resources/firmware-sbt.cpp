/* -*- mode: C; c-basic-offset: 4; intent-tabs-mode: nil -*-
 *
 * Data for the Thundercracker emulator.
 * This file is AUTOMATICALLY GENERATED.
 *
 * Copyright <c> 2011 Sifteo, Inc. All rights reserved.
 */

#include <stdint.h>
#include <cube_cpu_opcodes.h>

namespace Cube {
namespace CPU {

static int FASTCALL sbt_exception(em8051 *aCPU) {
	except(aCPU, EXCEPTION_SBT);
	return 1;
}

static int FASTCALL sbt_block_0000(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0000;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x81,0xd6);
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x00,0xb7);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0003(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0003;
	clk += Opcodes::reti                (aCPU, pc, 0x32,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_000b(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x000b;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x14,0xbc);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0013(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0013;
	clk += Opcodes::reti                (aCPU, pc, 0x32,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_001b(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x001b;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x15,0x44);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0023(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0023;
	clk += Opcodes::reti                (aCPU, pc, 0x32,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_002b(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x002b;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x15,0x53);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0033(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0033;
	clk += Opcodes::reti                (aCPU, pc, 0x32,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_003b(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x003b;
	clk += Opcodes::reti                (aCPU, pc, 0x32,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0043(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0043;
	clk += Opcodes::reti                (aCPU, pc, 0x32,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_004b(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x004b;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x11,0x10);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0053(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0053;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x14,0x28);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0056(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0056;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x00,0xb7);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0059(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0059;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0xfe,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_00b4(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x00b4;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x00,0x56);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_00b7(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x00b7;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x0e,0xd0);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_00ba(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x00ba;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x13,0xfd);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_00bd(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x00bd;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x18,0x54);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_00c0(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x00c0;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x16,0x60);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_00c3(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x00c3;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x1c,0x6b);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_00c6(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x00c6;
	clk += Opcodes::setb_bitaddr        (aCPU, pc, 0xd2,0xaf,0x00);
	clk += Opcodes::setb_bitaddr        (aCPU, pc, 0xd2,0xe8,0x00);
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x1d,0x96);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_00cd(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x00cd;
	clk += Opcodes::clr_bitaddr         (aCPU, pc, 0xc2,0x00,0x00);
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x00,0xe9);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_00d2(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x00d2;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x18,0x6f);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_00d5(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x00d5;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x59,0x00);
	clk += Opcodes::clr_c               (aCPU, pc, 0xc3,0x00,0x00);
	clk += Opcodes::subb_a_mem          (aCPU, pc, 0x95,0x18,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfa,0x00,0x00);
	clk += Opcodes::cjne_rx_imm_offset  (aCPU, pc, 0xba,0x26,0x03);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_00de(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x00de;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x0f,0x0f);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_00e1(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x00e1;
	clk += Opcodes::jb_bitaddr_offset   (aCPU, pc, 0x20,0x00,0xe9);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_00e4(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x00e4;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x16,0xe0);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_00e7(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x00e7;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0xe4,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_00e9(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x00e9;
	clk += Opcodes::mov_dptr_imm        (aCPU, pc, 0x90,0x03,0xff);
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::jb_bitaddr_offset   (aCPU, pc, 0x20,0xe3,0x06);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_00f0(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x00f0;
	clk += Opcodes::rr_a                (aCPU, pc, 0x03,0x00,0x00);
	clk += Opcodes::xrl_a_mem           (aCPU, pc, 0x65,0x48,0x00);
	clk += Opcodes::rrc_a               (aCPU, pc, 0x13,0x00,0x00);
	clk += Opcodes::jnc_offset          (aCPU, pc, 0x50,0x4b,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_00f6(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x00f6;
	clk += Opcodes::setb_bitaddr        (aCPU, pc, 0xd2,0x00,0x00);
	clk += Opcodes::mov_dptr_imm        (aCPU, pc, 0x90,0x03,0xfe);
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0x3c,0x00);
	clk += Opcodes::mov_dptr_imm        (aCPU, pc, 0x90,0x01,0x02);
	clk += Opcodes::jmp_indir_a_dptr    (aCPU, pc, 0x73,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0102(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0102;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x0f,0xcb);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0105(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0105;
	clk += Opcodes::nop                 (aCPU, pc, 0x00,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0106(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0106;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x2d,0xea);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0109(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0109;
	clk += Opcodes::nop                 (aCPU, pc, 0x00,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_010a(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x010a;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x0e,0x9d);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_010d(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x010d;
	clk += Opcodes::nop                 (aCPU, pc, 0x00,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_010e(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x010e;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x0c,0xd9);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0111(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0111;
	clk += Opcodes::nop                 (aCPU, pc, 0x00,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0112(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0112;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x0d,0xb9);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0115(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0115;
	clk += Opcodes::nop                 (aCPU, pc, 0x00,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0116(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0116;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x0e,0x53);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0119(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0119;
	clk += Opcodes::nop                 (aCPU, pc, 0x00,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_011a(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x011a;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x02,0x92);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_011d(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x011d;
	clk += Opcodes::nop                 (aCPU, pc, 0x00,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_011e(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x011e;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x02,0xb0);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0121(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0121;
	clk += Opcodes::nop                 (aCPU, pc, 0x00,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0122(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0122;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x04,0x4f);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0125(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0125;
	clk += Opcodes::nop                 (aCPU, pc, 0x00,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0126(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0126;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x0a,0xb9);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0129(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0129;
	clk += Opcodes::nop                 (aCPU, pc, 0x00,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_012a(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x012a;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x0f,0xcb);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_012d(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x012d;
	clk += Opcodes::nop                 (aCPU, pc, 0x00,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_012e(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x012e;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x0f,0xcb);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0131(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0131;
	clk += Opcodes::nop                 (aCPU, pc, 0x00,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0132(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0132;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x0f,0xcb);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0135(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0135;
	clk += Opcodes::nop                 (aCPU, pc, 0x00,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0136(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0136;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x0f,0xcb);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0139(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0139;
	clk += Opcodes::nop                 (aCPU, pc, 0x00,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_013a(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x013a;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x0f,0xcb);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_013d(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x013d;
	clk += Opcodes::nop                 (aCPU, pc, 0x00,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_013e(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x013e;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x0f,0xcb);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0141(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0141;
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0142(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0142;
	clk += Opcodes::push_mem            (aCPU, pc, 0xc0,0x92,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x92,0x00);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x82,0x00);
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0xdc,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x82,0x00);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x83,0x00);
	clk += Opcodes::addc_a_imm          (aCPU, pc, 0x34,0xff,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x83,0x00);
	clk += Opcodes::pop_mem             (aCPU, pc, 0xd0,0x92,0x00);
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0156(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0156;
	clk += Opcodes::mov_rx_mem          (aCPU, pc, 0xaa,0x26,0x00);
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0x28,0x82);
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0x29,0x83);
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x80,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x3b);
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x80,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x3d);
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xda,0x0c,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_016e(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x016e;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x82,0x00);
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0xdc,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x82,0x00);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x83,0x00);
	clk += Opcodes::addc_a_imm          (aCPU, pc, 0x34,0xff,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x83,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_017a(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x017a;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x25,0x00);
	clk += Opcodes::add_a_mem           (aCPU, pc, 0x25,0x27,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x80,0x00);
	clk += Opcodes::mov_rx_mem          (aCPU, pc, 0xab,0x23,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0182(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0182;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xdb,0xf6,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_018c(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x018c;
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7b,0x0f,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8a,0x04,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0190(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0190;
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x80,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x3b);
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x80,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x3d);
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xdc,0x0c,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_01a0(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x01a0;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x82,0x00);
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0xdc,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x82,0x00);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x83,0x00);
	clk += Opcodes::addc_a_imm          (aCPU, pc, 0x34,0xff,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x83,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_01ac(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x01ac;
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0x27,0x80);
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x20,0xc4);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_01b2(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x01b2;
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xdb,0xdc,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_01b4(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x01b4;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x24,0x00);
	clk += Opcodes::jz_offset           (aCPU, pc, 0x60,0x2e,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_01b8(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x01b8;
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x80,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x3b);
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x80,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x3d);
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xec,0x00,0x00);
	clk += Opcodes::dec_a               (aCPU, pc, 0x14,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfa,0x00,0x00);
	clk += Opcodes::jnz_offset          (aCPU, pc, 0x70,0x0c,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_01cb(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x01cb;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x82,0x00);
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0xdc,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x82,0x00);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x83,0x00);
	clk += Opcodes::addc_a_imm          (aCPU, pc, 0x34,0xff,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x83,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_01d7(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x01d7;
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0x27,0x80);
	clk += Opcodes::mov_rx_mem          (aCPU, pc, 0xaa,0x24,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_01dc(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x01dc;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xda,0xf6,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_01e6(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x01e6;
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_01e7(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x01e7;
	clk += Opcodes::clr_bitaddr         (aCPU, pc, 0xc2,0xb9,0x00);
	clk += Opcodes::mov_dptr_imm        (aCPU, pc, 0x90,0x03,0xfa);
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfa,0x00,0x00);
	clk += Opcodes::mov_dptr_imm        (aCPU, pc, 0x90,0x03,0xfb);
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfb,0x00,0x00);
	clk += Opcodes::setb_bitaddr        (aCPU, pc, 0xd2,0xb9,0x00);
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xea,0x00,0x00);
	clk += Opcodes::swap_a              (aCPU, pc, 0xc4,0x00,0x00);
	clk += Opcodes::rl_a                (aCPU, pc, 0x23,0x00,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0x1f,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfc,0x00,0x00);
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xeb,0x00,0x00);
	clk += Opcodes::swap_a              (aCPU, pc, 0xc4,0x00,0x00);
	clk += Opcodes::rl_a                (aCPU, pc, 0x23,0x00,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0x1f,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfd,0x00,0x00);
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xeb,0x00,0x00);
	clk += Opcodes::swap_a              (aCPU, pc, 0xc4,0x00,0x00);
	clk += Opcodes::rl_a                (aCPU, pc, 0x23,0x00,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0xe0,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x27,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7b,0x00,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8d,0x28,0x00);
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xeb,0x00,0x00);
	clk += Opcodes::xch_a_mem           (aCPU, pc, 0xc5,0x28,0x00);
	clk += Opcodes::add_a_mem           (aCPU, pc, 0x25,0xe0,0x00);
	clk += Opcodes::xch_a_mem           (aCPU, pc, 0xc5,0x28,0x00);
	clk += Opcodes::rlc_a               (aCPU, pc, 0x33,0x00,0x00);
	clk += Opcodes::xch_a_mem           (aCPU, pc, 0xc5,0x28,0x00);
	clk += Opcodes::add_a_mem           (aCPU, pc, 0x25,0xe0,0x00);
	clk += Opcodes::xch_a_mem           (aCPU, pc, 0xc5,0x28,0x00);
	clk += Opcodes::rlc_a               (aCPU, pc, 0x33,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x29,0x00);
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xeb,0x00,0x00);
	clk += Opcodes::swap_a              (aCPU, pc, 0xc4,0x00,0x00);
	clk += Opcodes::rl_a                (aCPU, pc, 0x23,0x00,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0xe0,0x00);
	clk += Opcodes::xch_a_rx            (aCPU, pc, 0xcd,0x00,0x00);
	clk += Opcodes::swap_a              (aCPU, pc, 0xc4,0x00,0x00);
	clk += Opcodes::rl_a                (aCPU, pc, 0x23,0x00,0x00);
	clk += Opcodes::xch_a_rx            (aCPU, pc, 0xcd,0x00,0x00);
	clk += Opcodes::xrl_a_rx            (aCPU, pc, 0x6d,0x00,0x00);
	clk += Opcodes::xch_a_rx            (aCPU, pc, 0xcd,0x00,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0xe0,0x00);
	clk += Opcodes::xch_a_rx            (aCPU, pc, 0xcd,0x00,0x00);
	clk += Opcodes::xrl_a_rx            (aCPU, pc, 0x6d,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfb,0x00,0x00);
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xed,0x00,0x00);
	clk += Opcodes::add_a_mem           (aCPU, pc, 0x25,0x28,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x28,0x00);
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xeb,0x00,0x00);
	clk += Opcodes::addc_a_mem          (aCPU, pc, 0x35,0x29,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x29,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8c,0x03,0x00);
	clk += Opcodes::clr_a               (aCPU, pc, 0xe4,0x00,0x00);
	clk += Opcodes::xch_a_rx            (aCPU, pc, 0xcb,0x00,0x00);
	clk += Opcodes::add_a_mem           (aCPU, pc, 0x25,0xe0,0x00);
	clk += Opcodes::xch_a_rx            (aCPU, pc, 0xcb,0x00,0x00);
	clk += Opcodes::rlc_a               (aCPU, pc, 0x33,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfd,0x00,0x00);
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xeb,0x00,0x00);
	clk += Opcodes::add_a_mem           (aCPU, pc, 0x25,0x28,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x28,0x00);
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xed,0x00,0x00);
	clk += Opcodes::addc_a_mem          (aCPU, pc, 0x35,0x29,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x29,0x00);
	clk += Opcodes::mov_a_imm           (aCPU, pc, 0x74,0x07,0x00);
	clk += Opcodes::anl_a_rx            (aCPU, pc, 0x5a,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x24,0x00);
	clk += Opcodes::mov_a_imm           (aCPU, pc, 0x74,0x08,0x00);
	clk += Opcodes::clr_c               (aCPU, pc, 0xc3,0x00,0x00);
	clk += Opcodes::subb_a_mem          (aCPU, pc, 0x95,0x24,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x23,0x00);
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xea,0x00,0x00);
	clk += Opcodes::add_a_rx            (aCPU, pc, 0x2a,0x00,0x00);
	clk += Opcodes::add_a_mem           (aCPU, pc, 0x25,0xe0,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfa,0x00,0x00);
	clk += Opcodes::mov_a_imm           (aCPU, pc, 0x74,0x1c,0x00);
	clk += Opcodes::anl_a_rx            (aCPU, pc, 0x5a,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x25,0x00);
	clk += Opcodes::mov_a_imm           (aCPU, pc, 0x74,0x12,0x00);
	clk += Opcodes::clr_c               (aCPU, pc, 0xc3,0x00,0x00);
	clk += Opcodes::subb_a_rx           (aCPU, pc, 0x9c,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x26,0x00);
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0267(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0267;
	clk += Opcodes::mov_a_imm           (aCPU, pc, 0x74,0x20,0x00);
	clk += Opcodes::add_a_mem           (aCPU, pc, 0x25,0x27,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x27,0x00);
	clk += Opcodes::jnz_offset          (aCPU, pc, 0x70,0x22,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_026f(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x026f;
	clk += Opcodes::mov_a_imm           (aCPU, pc, 0x74,0x24,0x00);
	clk += Opcodes::add_a_mem           (aCPU, pc, 0x25,0x28,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x28,0x00);
	clk += Opcodes::clr_a               (aCPU, pc, 0xe4,0x00,0x00);
	clk += Opcodes::addc_a_mem          (aCPU, pc, 0x35,0x29,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x29,0x00);
	clk += Opcodes::clr_c               (aCPU, pc, 0xc3,0x00,0x00);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x28,0x00);
	clk += Opcodes::subb_a_imm          (aCPU, pc, 0x94,0x88,0x00);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x29,0x00);
	clk += Opcodes::subb_a_imm          (aCPU, pc, 0x94,0x02,0x00);
	clk += Opcodes::jc_offset           (aCPU, pc, 0x40,0x0c,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0285(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0285;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x28,0x00);
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0x78,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x28,0x00);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x29,0x00);
	clk += Opcodes::addc_a_imm          (aCPU, pc, 0x34,0xfd,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x29,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0291(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0291;
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0292(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0292;
	clk += Opcodes::mov_dptr_imm        (aCPU, pc, 0x90,0x03,0xfd);
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfa,0x00,0x00);
	clk += Opcodes::push_mem            (aCPU, pc, 0xc0,0x02,0x00);
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x0f,0xd9);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_029c(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x029c;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x01,0xe7);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_029f(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x029f;
	clk += Opcodes::pop_mem             (aCPU, pc, 0xd0,0x02,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_02a1(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x02a1;
	clk += Opcodes::push_mem            (aCPU, pc, 0xc0,0x02,0x00);
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x01,0x56);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_02a6(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x02a6;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x02,0x67);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_02a9(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x02a9;
	clk += Opcodes::pop_mem             (aCPU, pc, 0xd0,0x02,0x00);
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xda,0xf4,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_02ad(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x02ad;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x10,0x67);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_02b0(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x02b0;
	clk += Opcodes::mov_dptr_imm        (aCPU, pc, 0x90,0x03,0xfd);
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfa,0x00,0x00);
	clk += Opcodes::push_mem            (aCPU, pc, 0xc0,0x02,0x00);
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x0f,0xd9);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_02ba(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x02ba;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x01,0xe7);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_02bd(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x02bd;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x03,0x78);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_02c0(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x02c0;
	clk += Opcodes::pop_mem             (aCPU, pc, 0xd0,0x02,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_02c2(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x02c2;
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0x06,0x09);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_02c5(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x02c5;
	clk += Opcodes::push_mem            (aCPU, pc, 0xc0,0x02,0x00);
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x01,0x56);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_02ca(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x02ca;
	clk += Opcodes::pop_mem             (aCPU, pc, 0xd0,0x02,0x00);
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x07,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_02ce(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x02ce;
	clk += Opcodes::push_mem            (aCPU, pc, 0xc0,0x02,0x00);
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x2b,0x28);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_02d3(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x02d3;
	clk += Opcodes::pop_mem             (aCPU, pc, 0xd0,0x02,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_02d5(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x02d5;
	clk += Opcodes::push_mem            (aCPU, pc, 0xc0,0x02,0x00);
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x02,0x67);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_02da(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x02da;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x04,0x22);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_02dd(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x02dd;
	clk += Opcodes::pop_mem             (aCPU, pc, 0xd0,0x02,0x00);
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xda,0xe1,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_02e1(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x02e1;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x10,0x67);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_02e4(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x02e4;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x33,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0xf0,0x00);
	clk += Opcodes::jnz_offset          (aCPU, pc, 0x70,0x5c,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_02ea(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x02ea;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x33,0x00);
	clk += Opcodes::rl_a                (aCPU, pc, 0x23,0x00,0x00);
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0xa8,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x82,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x83,0x03);
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0xe9,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::jnz_offset          (aCPU, pc, 0x70,0x03,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_02fa(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x02fa;
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::jz_offset           (aCPU, pc, 0x60,0x49,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_02fd(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x02fd;
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0xea,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xeb,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xec,0x00);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0x01,0x1f);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0309(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0309;
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0x2d,0x84);
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0x2e,0x85);
	clk += Opcodes::mov_rx_mem          (aCPU, pc, 0xa8,0x2f,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x92,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0313(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0313;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0xe9,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0xe9,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xef,0x21);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xe0,0x02);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_031d(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x031d;
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_031f(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x031f;
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xd8,0xf2,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0321(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0321;
	clk += Opcodes::dec_mem             (aCPU, pc, 0x15,0x92,0x00);
	clk += Opcodes::anl_mem_imm         (aCPU, pc, 0x53,0x85,0x03);
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x0e,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0328(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0328;
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0x02,0x05);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_032b(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x032b;
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0x2f,0xef);
	clk += Opcodes::nop                 (aCPU, pc, 0x00,0x00,0x00);
	clk += Opcodes::nop                 (aCPU, pc, 0x00,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0330(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0330;
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0x2d,0x84);
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0x2e,0x85);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0336(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0336;
	clk += Opcodes::clr_bitaddr         (aCPU, pc, 0xc2,0x06,0x00);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0xe9,0x00);
	clk += Opcodes::jnz_offset          (aCPU, pc, 0x70,0x0c,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_033c(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x033c;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0xea,0x00);
	clk += Opcodes::jnz_offset          (aCPU, pc, 0x70,0x08,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0340(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0340;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0xeb,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0x01,0x00);
	clk += Opcodes::jnz_offset          (aCPU, pc, 0x70,0x02,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0346(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0346;
	clk += Opcodes::setb_bitaddr        (aCPU, pc, 0xd2,0x06,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0348(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0348;
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0349(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0349;
	clk += Opcodes::push_mem            (aCPU, pc, 0xc0,0x00,0x00);
	clk += Opcodes::push_mem            (aCPU, pc, 0xc0,0x01,0x00);
	clk += Opcodes::push_mem            (aCPU, pc, 0xc0,0x02,0x00);
	clk += Opcodes::mov_rx_mem          (aCPU, pc, 0xa8,0x82,0x00);
	clk += Opcodes::mov_rx_mem          (aCPU, pc, 0xa9,0x83,0x00);
	clk += Opcodes::mov_dptr_imm        (aCPU, pc, 0x90,0x1e,0x08);
	clk += Opcodes::mov_a_imm           (aCPU, pc, 0x74,0x0f,0x00);
	clk += Opcodes::anl_a_rx            (aCPU, pc, 0x58,0x00,0x00);
	clk += Opcodes::movc_a_indir_a_dptr (aCPU, pc, 0x93,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfa,0x00,0x00);
	clk += Opcodes::mov_a_imm           (aCPU, pc, 0x74,0xf0,0x00);
	clk += Opcodes::anl_a_rx            (aCPU, pc, 0x58,0x00,0x00);
	clk += Opcodes::swap_a              (aCPU, pc, 0xc4,0x00,0x00);
	clk += Opcodes::movc_a_indir_a_dptr (aCPU, pc, 0x93,0x00,0x00);
	clk += Opcodes::add_a_rx            (aCPU, pc, 0x2a,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfa,0x00,0x00);
	clk += Opcodes::mov_a_imm           (aCPU, pc, 0x74,0x0f,0x00);
	clk += Opcodes::anl_a_rx            (aCPU, pc, 0x59,0x00,0x00);
	clk += Opcodes::movc_a_indir_a_dptr (aCPU, pc, 0x93,0x00,0x00);
	clk += Opcodes::add_a_rx            (aCPU, pc, 0x2a,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfa,0x00,0x00);
	clk += Opcodes::mov_a_imm           (aCPU, pc, 0x74,0xf0,0x00);
	clk += Opcodes::anl_a_rx            (aCPU, pc, 0x59,0x00,0x00);
	clk += Opcodes::swap_a              (aCPU, pc, 0xc4,0x00,0x00);
	clk += Opcodes::movc_a_indir_a_dptr (aCPU, pc, 0x93,0x00,0x00);
	clk += Opcodes::add_a_rx            (aCPU, pc, 0x2a,0x00,0x00);
	clk += Opcodes::rl_a                (aCPU, pc, 0x23,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x82,0x00);
	clk += Opcodes::pop_mem             (aCPU, pc, 0xd0,0x02,0x00);
	clk += Opcodes::pop_mem             (aCPU, pc, 0xd0,0x01,0x00);
	clk += Opcodes::pop_mem             (aCPU, pc, 0xd0,0x00,0x00);
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0378(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0378;
	clk += Opcodes::clr_bitaddr         (aCPU, pc, 0xc2,0xb9,0x00);
	clk += Opcodes::mov_dptr_imm        (aCPU, pc, 0x90,0x03,0xf8);
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfa,0x00,0x00);
	clk += Opcodes::mov_dptr_imm        (aCPU, pc, 0x90,0x03,0xf9);
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfb,0x00,0x00);
	clk += Opcodes::setb_bitaddr        (aCPU, pc, 0xd2,0xb9,0x00);
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xea,0x00,0x00);
	clk += Opcodes::swap_a              (aCPU, pc, 0xc4,0x00,0x00);
	clk += Opcodes::rl_a                (aCPU, pc, 0x23,0x00,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0x1f,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfc,0x00,0x00);
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xeb,0x00,0x00);
	clk += Opcodes::swap_a              (aCPU, pc, 0xc4,0x00,0x00);
	clk += Opcodes::rl_a                (aCPU, pc, 0x23,0x00,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0x1f,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x33,0x00);
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xeb,0x00,0x00);
	clk += Opcodes::swap_a              (aCPU, pc, 0xc4,0x00,0x00);
	clk += Opcodes::rl_a                (aCPU, pc, 0x23,0x00,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0xe0,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x32,0x00);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x24,0x00);
	clk += Opcodes::clr_c               (aCPU, pc, 0xc3,0x00,0x00);
	clk += Opcodes::subb_a_rx           (aCPU, pc, 0x9a,0x00,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0x07,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfb,0x00,0x00);
	clk += Opcodes::rrc_a               (aCPU, pc, 0x13,0x00,0x00);
	clk += Opcodes::mov_bitaddr_c       (aCPU, pc, 0x92,0x03,0x00);
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xeb,0x00,0x00);
	clk += Opcodes::mov_c_bitaddr       (aCPU, pc, 0xa2,0xe1,0x00);
	clk += Opcodes::mov_bitaddr_c       (aCPU, pc, 0x92,0x04,0x00);
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xeb,0x00,0x00);
	clk += Opcodes::mov_c_bitaddr       (aCPU, pc, 0xa2,0xe2,0x00);
	clk += Opcodes::mov_bitaddr_c       (aCPU, pc, 0x92,0x05,0x00);
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xea,0x00,0x00);
	clk += Opcodes::add_a_rx            (aCPU, pc, 0x2a,0x00,0x00);
	clk += Opcodes::add_a_mem           (aCPU, pc, 0x25,0xe0,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfa,0x00,0x00);
	clk += Opcodes::mov_a_imm           (aCPU, pc, 0x74,0x1c,0x00);
	clk += Opcodes::anl_a_rx            (aCPU, pc, 0x5a,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x30,0x00);
	clk += Opcodes::mov_a_imm           (aCPU, pc, 0x74,0x08,0x00);
	clk += Opcodes::clr_c               (aCPU, pc, 0xc3,0x00,0x00);
	clk += Opcodes::subb_a_rx           (aCPU, pc, 0x9b,0x00,0x00);
	clk += Opcodes::add_a_mem           (aCPU, pc, 0x25,0xe0,0x00);
	clk += Opcodes::add_a_mem           (aCPU, pc, 0x25,0xe0,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfb,0x00,0x00);
	clk += Opcodes::mov_a_imm           (aCPU, pc, 0x74,0x1c,0x00);
	clk += Opcodes::anl_a_rx            (aCPU, pc, 0x5b,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x31,0x00);
	clk += Opcodes::clr_bitaddr         (aCPU, pc, 0xc2,0x02,0x00);
	clk += Opcodes::clr_bitaddr         (aCPU, pc, 0xc2,0x01,0x00);
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xec,0x00,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0xf0,0x00);
	clk += Opcodes::jz_offset           (aCPU, pc, 0x60,0x0a,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_03cf(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x03cf;
	clk += Opcodes::mov_a_imm           (aCPU, pc, 0x74,0x20,0x00);
	clk += Opcodes::clr_c               (aCPU, pc, 0xc3,0x00,0x00);
	clk += Opcodes::subb_a_rx           (aCPU, pc, 0x9c,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x2f,0x00);
	clk += Opcodes::setb_bitaddr        (aCPU, pc, 0xd2,0x02,0x00);
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x07,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_03d9(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x03d9;
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xec,0x00,0x00);
	clk += Opcodes::jz_offset           (aCPU, pc, 0x60,0x04,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_03dc(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x03dc;
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8c,0x2f,0x00);
	clk += Opcodes::setb_bitaddr        (aCPU, pc, 0xd2,0x01,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_03e0(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x03e0;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x2d,0x88);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x2e,0x02);
	clk += Opcodes::mov_a_imm           (aCPU, pc, 0x74,0xf0,0x00);
	clk += Opcodes::add_a_mem           (aCPU, pc, 0x25,0x33,0x00);
	clk += Opcodes::jc_offset           (aCPU, pc, 0x40,0x33,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_03ec(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x03ec;
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7a,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_03ee(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x03ee;
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xea,0x00,0x00);
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0x33,0x02);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_03f2(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x03f2;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x28,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_03f4(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x03f4;
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xea,0x00,0x00);
	clk += Opcodes::add_a_rx            (aCPU, pc, 0x2a,0x00,0x00);
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0xa8,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x82,0x00);
	clk += Opcodes::clr_a               (aCPU, pc, 0xe4,0x00,0x00);
	clk += Opcodes::addc_a_imm          (aCPU, pc, 0x34,0x03,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x83,0x00);
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfb,0x00,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfc,0x00,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8b,0x82,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8c,0x83,0x00);
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x03,0x49);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_040b(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x040b;
	clk += Opcodes::mov_rx_mem          (aCPU, pc, 0xab,0x82,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7c,0x00,0x00);
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xeb,0x00,0x00);
	clk += Opcodes::add_a_mem           (aCPU, pc, 0x25,0x2d,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x2d,0x00);
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xec,0x00,0x00);
	clk += Opcodes::addc_a_mem          (aCPU, pc, 0x35,0x2e,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x2e,0x00);
	clk += Opcodes::inc_rx              (aCPU, pc, 0x0a,0x00,0x00);
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0xd2,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_041c(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x041c;
	clk += Opcodes::anl_mem_imm         (aCPU, pc, 0x53,0x2e,0x03);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_041f(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x041f;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x02,0xe4);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0422(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0422;
	clk += Opcodes::mov_a_imm           (aCPU, pc, 0x74,0x20,0x00);
	clk += Opcodes::add_a_mem           (aCPU, pc, 0x25,0x32,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x32,0x00);
	clk += Opcodes::jz_offset           (aCPU, pc, 0x60,0x03,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_042a(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x042a;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x04,0x4c);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_042d(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x042d;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x33,0x00);
	clk += Opcodes::inc_a               (aCPU, pc, 0x04,0x00,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0x1f,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x33,0x00);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0x06,0x03);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0437(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0437;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x04,0x4c);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_043a(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x043a;
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0xe9,0x82);
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0xea,0x83);
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x03,0x49);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0443(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0443;
	clk += Opcodes::add_a_mem           (aCPU, pc, 0x25,0x84,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x2d,0x00);
	clk += Opcodes::clr_a               (aCPU, pc, 0xe4,0x00,0x00);
	clk += Opcodes::addc_a_mem          (aCPU, pc, 0x35,0x85,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x2e,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_044c(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x044c;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x02,0xe4);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_044f(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x044f;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x0f,0xd9);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0452(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0452;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x01,0xe7);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0455(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0455;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x03,0x78);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0458(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0458;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x04,0x88);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_045b(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x045b;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x2c,0x00);
	clk += Opcodes::jz_offset           (aCPU, pc, 0x60,0x0d,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_045f(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x045f;
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0x06,0x05);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0462(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0462;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x0a,0x7c);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0465(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0465;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x10,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0467(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0467;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x0a,0x9d);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_046a(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x046a;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x0b,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_046c(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x046c;
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0x06,0x05);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_046f(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x046f;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x01,0x56);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0472(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0472;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x03,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0474(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0474;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x2b,0x28);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0477(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0477;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x02,0x67);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_047a(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x047a;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x04,0x22);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_047d(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x047d;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x04,0x94);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0480(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0480;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x2b,0x00);
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0x2a,0xd6);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0485(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0485;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x10,0x67);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0488(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0488;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x2a,0xff);
	clk += Opcodes::mov_dptr_imm        (aCPU, pc, 0x90,0x03,0xfd);
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x2b,0x00);
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x04,0x94);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0494(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0494;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x2a,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x2c,0x00);
	clk += Opcodes::mov_dptr_imm        (aCPU, pc, 0x90,0x03,0xc8);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x78,0x34,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7a,0x08,0x00);
	clk += Opcodes::mov_rx_mem          (aCPU, pc, 0xab,0x2a,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_04a2(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x04a2;
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::jz_offset           (aCPU, pc, 0x60,0x6d,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_04a5(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x04a5;
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfc,0x00,0x00);
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfd,0x00,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::add_a_rx            (aCPU, pc, 0x2b,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfe,0x00,0x00);
	clk += Opcodes::anl_a_rx            (aCPU, pc, 0x5c,0x00,0x00);
	clk += Opcodes::jnz_offset          (aCPU, pc, 0x70,0x6a,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_04b0(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x04b0;
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xff,0x00,0x00);
	clk += Opcodes::anl_a_rx            (aCPU, pc, 0x5d,0x00,0x00);
	clk += Opcodes::jz_offset           (aCPU, pc, 0x60,0x05,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_04b6(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x04b6;
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xef,0x00,0x00);
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0x7f,0x00);
	clk += Opcodes::jnc_offset          (aCPU, pc, 0x50,0x67,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_04bb(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x04bb;
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xed,0x00,0x00);
	clk += Opcodes::mov_indir_rx_a      (aCPU, pc, 0xf6,0x00,0x00);
	clk += Opcodes::inc_rx              (aCPU, pc, 0x08,0x00,0x00);
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xef,0x00,0x00);
	clk += Opcodes::mov_indir_rx_a      (aCPU, pc, 0xf6,0x00,0x00);
	clk += Opcodes::inc_rx              (aCPU, pc, 0x08,0x00,0x00);
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xee,0x00,0x00);
	clk += Opcodes::swap_a              (aCPU, pc, 0xc4,0x00,0x00);
	clk += Opcodes::rl_a                (aCPU, pc, 0x23,0x00,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0x1f,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8d,0xf0,0x00);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xf6,0x0b);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_04cc(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x04cc;
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xf5,0x09);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_04cf(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x04cf;
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xf4,0x07);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_04d2(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x04d2;
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xf3,0x05);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_04d5(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x04d5;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x04,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_04d7(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x04d7;
	clk += Opcodes::rl_a                (aCPU, pc, 0x23,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_04d8(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x04d8;
	clk += Opcodes::rl_a                (aCPU, pc, 0x23,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_04d9(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x04d9;
	clk += Opcodes::rl_a                (aCPU, pc, 0x23,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_04da(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x04da;
	clk += Opcodes::rl_a                (aCPU, pc, 0x23,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_04db(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x04db;
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xf9,0x00,0x00);
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xef,0x00,0x00);
	clk += Opcodes::anl_a_rx            (aCPU, pc, 0x5d,0x00,0x00);
	clk += Opcodes::jnz_offset          (aCPU, pc, 0x70,0x07,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_04e0(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x04e0;
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xef,0x00,0x00);
	clk += Opcodes::swap_a              (aCPU, pc, 0xc4,0x00,0x00);
	clk += Opcodes::rl_a                (aCPU, pc, 0x23,0x00,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0x1f,0x00);
	clk += Opcodes::add_a_rx            (aCPU, pc, 0x29,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xf9,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_04e7(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x04e7;
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::add_a_rx            (aCPU, pc, 0x29,0x00,0x00);
	clk += Opcodes::mov_bitaddr_c       (aCPU, pc, 0x92,0xf0,0x00);
	clk += Opcodes::add_a_rx            (aCPU, pc, 0x29,0x00,0x00);
	clk += Opcodes::mov_bitaddr_c       (aCPU, pc, 0x92,0xf1,0x00);
	clk += Opcodes::mov_indir_rx_a      (aCPU, pc, 0xf6,0x00,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::inc_rx              (aCPU, pc, 0x08,0x00,0x00);
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xf0,0x02);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_04f5(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x04f5;
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0x02,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_04f7(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x04f7;
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xf1,0x02);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_04fa(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x04fa;
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0x02,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_04fc(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x04fc;
	clk += Opcodes::mov_indir_rx_a      (aCPU, pc, 0xf6,0x00,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::inc_rx              (aCPU, pc, 0x08,0x00,0x00);
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xee,0x00,0x00);
	clk += Opcodes::swap_a              (aCPU, pc, 0xc4,0x00,0x00);
	clk += Opcodes::rl_a                (aCPU, pc, 0x23,0x00,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0xe0,0x00);
	clk += Opcodes::mov_indir_rx_a      (aCPU, pc, 0xf6,0x00,0x00);
	clk += Opcodes::inc_rx              (aCPU, pc, 0x08,0x00,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x2c,0x00);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x2c,0x00);
	clk += Opcodes::xrl_a_imm           (aCPU, pc, 0x64,0x04,0x00);
	clk += Opcodes::jz_offset           (aCPU, pc, 0x60,0x1c,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_050e(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x050e;
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xda,0x92,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0510(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0510;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x18,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0512(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0512;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x82,0x00);
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0x06,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x82,0x00);
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0xf4,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_051a(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x051a;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x82,0x00);
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0x04,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x82,0x00);
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0xec,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0522(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0522;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x82,0x00);
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0x03,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x82,0x00);
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0xe4,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_052a(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x052a;
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_052b(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x052b;
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0x36,0x80);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x3b);
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0x37,0x80);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x3d);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x35,0x00);
	clk += Opcodes::dec_a               (aCPU, pc, 0x14,0x00,0x00);
	clk += Opcodes::rl_a                (aCPU, pc, 0x23,0x00,0x00);
	clk += Opcodes::rl_a                (aCPU, pc, 0x23,0x00,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0x1c,0x00);
	clk += Opcodes::cjne_a_imm_offset   (aCPU, pc, 0xb4,0x1c,0x13);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0541(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0541;
	clk += Opcodes::add_a_mem           (aCPU, pc, 0x25,0x38,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x80,0x00);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x36,0x00);
	clk += Opcodes::inc_a               (aCPU, pc, 0x04,0x00,0x00);
	clk += Opcodes::inc_a               (aCPU, pc, 0x04,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x36,0x00);
	clk += Opcodes::jnz_offset          (aCPU, pc, 0x70,0x04,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_054d(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x054d;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x37,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x37,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0551(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0551;
	clk += Opcodes::mov_a_imm           (aCPU, pc, 0x74,0x4f,0x00);
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0554(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0554;
	clk += Opcodes::add_a_mem           (aCPU, pc, 0x25,0x38,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x80,0x00);
	clk += Opcodes::mov_a_imm           (aCPU, pc, 0x74,0x4f,0x00);
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_055b(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x055b;
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0x3b,0x80);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x3b);
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0x3c,0x80);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x3d);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x3a,0x00);
	clk += Opcodes::dec_a               (aCPU, pc, 0x14,0x00,0x00);
	clk += Opcodes::rl_a                (aCPU, pc, 0x23,0x00,0x00);
	clk += Opcodes::rl_a                (aCPU, pc, 0x23,0x00,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0x1c,0x00);
	clk += Opcodes::cjne_a_imm_offset   (aCPU, pc, 0xb4,0x1c,0x13);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0571(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0571;
	clk += Opcodes::add_a_mem           (aCPU, pc, 0x25,0x3d,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x80,0x00);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x3b,0x00);
	clk += Opcodes::inc_a               (aCPU, pc, 0x04,0x00,0x00);
	clk += Opcodes::inc_a               (aCPU, pc, 0x04,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x3b,0x00);
	clk += Opcodes::jnz_offset          (aCPU, pc, 0x70,0x04,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_057d(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x057d;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x3c,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x3c,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0581(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0581;
	clk += Opcodes::mov_a_imm           (aCPU, pc, 0x74,0x4f,0x00);
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0584(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0584;
	clk += Opcodes::add_a_mem           (aCPU, pc, 0x25,0x3d,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x80,0x00);
	clk += Opcodes::mov_a_imm           (aCPU, pc, 0x74,0x4f,0x00);
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_058b(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x058b;
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0x40,0x80);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x3b);
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0x41,0x80);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x3d);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x3f,0x00);
	clk += Opcodes::dec_a               (aCPU, pc, 0x14,0x00,0x00);
	clk += Opcodes::rl_a                (aCPU, pc, 0x23,0x00,0x00);
	clk += Opcodes::rl_a                (aCPU, pc, 0x23,0x00,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0x1c,0x00);
	clk += Opcodes::cjne_a_imm_offset   (aCPU, pc, 0xb4,0x1c,0x13);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_05a1(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x05a1;
	clk += Opcodes::add_a_mem           (aCPU, pc, 0x25,0x42,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x80,0x00);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x40,0x00);
	clk += Opcodes::inc_a               (aCPU, pc, 0x04,0x00,0x00);
	clk += Opcodes::inc_a               (aCPU, pc, 0x04,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x40,0x00);
	clk += Opcodes::jnz_offset          (aCPU, pc, 0x70,0x04,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_05ad(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x05ad;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x41,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x41,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_05b1(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x05b1;
	clk += Opcodes::mov_a_imm           (aCPU, pc, 0x74,0x4f,0x00);
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_05b4(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x05b4;
	clk += Opcodes::add_a_mem           (aCPU, pc, 0x25,0x42,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x80,0x00);
	clk += Opcodes::mov_a_imm           (aCPU, pc, 0x74,0x4f,0x00);
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_05bb(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x05bb;
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0x45,0x80);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x3b);
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0x46,0x80);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x3d);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x44,0x00);
	clk += Opcodes::dec_a               (aCPU, pc, 0x14,0x00,0x00);
	clk += Opcodes::rl_a                (aCPU, pc, 0x23,0x00,0x00);
	clk += Opcodes::rl_a                (aCPU, pc, 0x23,0x00,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0x1c,0x00);
	clk += Opcodes::cjne_a_imm_offset   (aCPU, pc, 0xb4,0x1c,0x13);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_05d1(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x05d1;
	clk += Opcodes::add_a_mem           (aCPU, pc, 0x25,0x47,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x80,0x00);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x45,0x00);
	clk += Opcodes::inc_a               (aCPU, pc, 0x04,0x00,0x00);
	clk += Opcodes::inc_a               (aCPU, pc, 0x04,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x45,0x00);
	clk += Opcodes::jnz_offset          (aCPU, pc, 0x70,0x04,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_05dd(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x05dd;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x46,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x46,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_05e1(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x05e1;
	clk += Opcodes::mov_a_imm           (aCPU, pc, 0x74,0x4f,0x00);
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_05e4(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x05e4;
	clk += Opcodes::add_a_mem           (aCPU, pc, 0x25,0x47,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x80,0x00);
	clk += Opcodes::mov_a_imm           (aCPU, pc, 0x74,0x4f,0x00);
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_05eb(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x05eb;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x34,0x00);
	clk += Opcodes::anl_a_mem           (aCPU, pc, 0x55,0x35,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x35,0x00);
	clk += Opcodes::jz_offset           (aCPU, pc, 0x60,0x01,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_05f3(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x05f3;
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_05f4(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x05f4;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x35,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0x07,0x00);
	clk += Opcodes::jnz_offset          (aCPU, pc, 0x70,0xf9,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_05fa(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x05fa;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x36,0x00);
	clk += Opcodes::inc_a               (aCPU, pc, 0x04,0x00,0x00);
	clk += Opcodes::inc_a               (aCPU, pc, 0x04,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x36,0x00);
	clk += Opcodes::jnz_offset          (aCPU, pc, 0x70,0xf1,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0602(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0602;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x37,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x37,0x00);
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0607(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0607;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x39,0x00);
	clk += Opcodes::anl_a_mem           (aCPU, pc, 0x55,0x3a,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x3a,0x00);
	clk += Opcodes::jz_offset           (aCPU, pc, 0x60,0x01,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_060f(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x060f;
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0610(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0610;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x3a,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0x07,0x00);
	clk += Opcodes::jnz_offset          (aCPU, pc, 0x70,0xf9,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0616(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0616;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x3b,0x00);
	clk += Opcodes::inc_a               (aCPU, pc, 0x04,0x00,0x00);
	clk += Opcodes::inc_a               (aCPU, pc, 0x04,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x3b,0x00);
	clk += Opcodes::jnz_offset          (aCPU, pc, 0x70,0xf1,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_061e(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x061e;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x3c,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x3c,0x00);
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0623(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0623;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x3e,0x00);
	clk += Opcodes::anl_a_mem           (aCPU, pc, 0x55,0x3f,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x3f,0x00);
	clk += Opcodes::jz_offset           (aCPU, pc, 0x60,0x01,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_062b(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x062b;
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_062c(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x062c;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x3f,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0x07,0x00);
	clk += Opcodes::jnz_offset          (aCPU, pc, 0x70,0xf9,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0632(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0632;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x40,0x00);
	clk += Opcodes::inc_a               (aCPU, pc, 0x04,0x00,0x00);
	clk += Opcodes::inc_a               (aCPU, pc, 0x04,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x40,0x00);
	clk += Opcodes::jnz_offset          (aCPU, pc, 0x70,0xf1,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_063a(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x063a;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x41,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x41,0x00);
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_063f(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x063f;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x43,0x00);
	clk += Opcodes::anl_a_mem           (aCPU, pc, 0x55,0x44,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x44,0x00);
	clk += Opcodes::jz_offset           (aCPU, pc, 0x60,0x01,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0647(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0647;
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0648(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0648;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x44,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0x07,0x00);
	clk += Opcodes::jnz_offset          (aCPU, pc, 0x70,0xf9,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_064e(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x064e;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x45,0x00);
	clk += Opcodes::inc_a               (aCPU, pc, 0x04,0x00,0x00);
	clk += Opcodes::inc_a               (aCPU, pc, 0x04,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x45,0x00);
	clk += Opcodes::jnz_offset          (aCPU, pc, 0x70,0xf1,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0656(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0656;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x46,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x46,0x00);
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_065b(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x065b;
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xeb,0x00,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0x1f,0x00);
	clk += Opcodes::jnz_offset          (aCPU, pc, 0x70,0x03,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0660(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0660;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x07,0x11);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0663(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0663;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x34,0x00);
	clk += Opcodes::anl_a_mem           (aCPU, pc, 0x55,0x35,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x35,0x00);
	clk += Opcodes::jz_offset           (aCPU, pc, 0x60,0x2c,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_066b(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x066b;
	clk += Opcodes::cjne_rx_imm_offset  (aCPU, pc, 0xbe,0x01,0x03);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_066e(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x066e;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x06,0xe4);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0671(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0671;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x39,0x00);
	clk += Opcodes::anl_a_mem           (aCPU, pc, 0x55,0x3a,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x3a,0x00);
	clk += Opcodes::jz_offset           (aCPU, pc, 0x60,0x2a,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0679(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0679;
	clk += Opcodes::cjne_rx_imm_offset  (aCPU, pc, 0xbe,0x02,0x03);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_067c(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x067c;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x06,0xe4);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_067f(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x067f;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x3e,0x00);
	clk += Opcodes::anl_a_mem           (aCPU, pc, 0x55,0x3f,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x3f,0x00);
	clk += Opcodes::jz_offset           (aCPU, pc, 0x60,0x28,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0687(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0687;
	clk += Opcodes::cjne_rx_imm_offset  (aCPU, pc, 0xbe,0x03,0x03);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_068a(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x068a;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x06,0xe4);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_068d(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x068d;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x43,0x00);
	clk += Opcodes::anl_a_mem           (aCPU, pc, 0x55,0x44,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x44,0x00);
	clk += Opcodes::jz_offset           (aCPU, pc, 0x60,0x26,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0695(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0695;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x4d,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0697(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0697;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x05,0x2b);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_069a(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x069a;
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0xa0,0x03);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_069d(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x069d;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x06,0x6b);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_06a0(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x06a0;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x06,0xc7);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_06a3(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x06a3;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x05,0x5b);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_06a6(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x06a6;
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0xa0,0x03);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_06a9(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x06a9;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x06,0x79);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_06ac(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x06ac;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x06,0xd0);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_06af(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x06af;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x05,0x8b);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_06b2(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x06b2;
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0xa0,0x03);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_06b5(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x06b5;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x06,0x87);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_06b8(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x06b8;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x06,0xd9);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_06bb(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x06bb;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x05,0xbb);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_06be(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x06be;
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0xa0,0x03);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_06c1(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x06c1;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x06,0xe4);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_06c4(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x06c4;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x06,0xf5);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_06c7(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x06c7;
	clk += Opcodes::cjne_rx_imm_offset  (aCPU, pc, 0xbe,0x01,0x03);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_06ca(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x06ca;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x06,0xf5);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_06cd(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x06cd;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x06,0x07);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_06d0(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x06d0;
	clk += Opcodes::cjne_rx_imm_offset  (aCPU, pc, 0xbe,0x02,0x03);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_06d3(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x06d3;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x06,0xf5);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_06d6(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x06d6;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x06,0x23);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_06d9(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x06d9;
	clk += Opcodes::cjne_rx_imm_offset  (aCPU, pc, 0xbe,0x03,0x03);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_06dc(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x06dc;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x06,0xf5);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_06df(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x06df;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x06,0x3f);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_06e2(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x06e2;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x11,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_06e4(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x06e4;
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x80,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x3b);
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x80,0x00);
	clk += Opcodes::dec_mem             (aCPU, pc, 0x15,0x82,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x3d);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8b,0x80,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_06f5(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x06f5;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::dec_rx              (aCPU, pc, 0x1d,0x00,0x00);
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xeb,0x00,0x00);
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0x04,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfb,0x00,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0x1f,0x00);
	clk += Opcodes::jnz_offset          (aCPU, pc, 0x70,0x52,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0706(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0706;
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xeb,0x00,0x00);
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0xe0,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfb,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_070a(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x070a;
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xd9,0x03,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_070e(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x070e;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x01,0x42);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0711(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0711;
	clk += Opcodes::mov_rx_mem          (aCPU, pc, 0xa8,0x35,0x00);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x34,0x00);
	clk += Opcodes::anl_a_rx            (aCPU, pc, 0x58,0x00,0x00);
	clk += Opcodes::jz_offset           (aCPU, pc, 0x60,0x40,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0718(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0718;
	clk += Opcodes::mov_a_imm           (aCPU, pc, 0x74,0x08,0x00);
	clk += Opcodes::add_a_rx            (aCPU, pc, 0x28,0x00,0x00);
	clk += Opcodes::jc_offset           (aCPU, pc, 0x40,0x3b,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_071d(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x071d;
	clk += Opcodes::cjne_rx_imm_offset  (aCPU, pc, 0xbe,0x01,0x03);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0720(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0720;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x07,0x53);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0723(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0723;
	clk += Opcodes::mov_rx_mem          (aCPU, pc, 0xa8,0x3a,0x00);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x39,0x00);
	clk += Opcodes::anl_a_rx            (aCPU, pc, 0x58,0x00,0x00);
	clk += Opcodes::jz_offset           (aCPU, pc, 0x60,0x2e,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_072a(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x072a;
	clk += Opcodes::mov_a_imm           (aCPU, pc, 0x74,0x08,0x00);
	clk += Opcodes::add_a_rx            (aCPU, pc, 0x28,0x00,0x00);
	clk += Opcodes::jc_offset           (aCPU, pc, 0x40,0x29,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_072f(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x072f;
	clk += Opcodes::cjne_rx_imm_offset  (aCPU, pc, 0xbe,0x02,0x03);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0732(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0732;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x07,0x53);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0735(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0735;
	clk += Opcodes::mov_rx_mem          (aCPU, pc, 0xa8,0x3f,0x00);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x3e,0x00);
	clk += Opcodes::anl_a_rx            (aCPU, pc, 0x58,0x00,0x00);
	clk += Opcodes::jz_offset           (aCPU, pc, 0x60,0x1c,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_073c(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x073c;
	clk += Opcodes::mov_a_imm           (aCPU, pc, 0x74,0x08,0x00);
	clk += Opcodes::add_a_rx            (aCPU, pc, 0x28,0x00,0x00);
	clk += Opcodes::jc_offset           (aCPU, pc, 0x40,0x17,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0741(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0741;
	clk += Opcodes::cjne_rx_imm_offset  (aCPU, pc, 0xbe,0x03,0x03);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0744(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0744;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x07,0x53);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0747(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0747;
	clk += Opcodes::mov_rx_mem          (aCPU, pc, 0xa8,0x44,0x00);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x43,0x00);
	clk += Opcodes::anl_a_rx            (aCPU, pc, 0x58,0x00,0x00);
	clk += Opcodes::jz_offset           (aCPU, pc, 0x60,0x0a,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_074e(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x074e;
	clk += Opcodes::mov_a_imm           (aCPU, pc, 0x74,0x08,0x00);
	clk += Opcodes::add_a_rx            (aCPU, pc, 0x28,0x00,0x00);
	clk += Opcodes::jc_offset           (aCPU, pc, 0x40,0x05,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0753(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0753;
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xed,0x00,0x00);
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0xf8,0x00);
	clk += Opcodes::jc_offset           (aCPU, pc, 0x40,0x07,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0758(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0758;
	clk += Opcodes::cjne_rx_imm_offset  (aCPU, pc, 0xbd,0x00,0x01);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_075b(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x075b;
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_075c(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x075c;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x06,0x63);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_075f(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x075f;
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfd,0x00,0x00);
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x80,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x3b);
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x80,0x00);
	clk += Opcodes::dec_mem             (aCPU, pc, 0x15,0x82,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x3d);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8b,0x80,0x00);
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x20,0xc4);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0774(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0774;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x35,0x00);
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0x08,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x35,0x00);
	clk += Opcodes::cjne_rx_imm_offset  (aCPU, pc, 0xbe,0x01,0x03);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_077d(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x077d;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x07,0x9e);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0780(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0780;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x3a,0x00);
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0x08,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x3a,0x00);
	clk += Opcodes::cjne_rx_imm_offset  (aCPU, pc, 0xbe,0x02,0x03);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0789(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0789;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x07,0x9e);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_078c(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x078c;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x3f,0x00);
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0x08,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x3f,0x00);
	clk += Opcodes::cjne_rx_imm_offset  (aCPU, pc, 0xbe,0x03,0x03);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0795(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0795;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x07,0x9e);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0798(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0798;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x44,0x00);
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0x08,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x44,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_079e(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x079e;
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xed,0x00,0x00);
	clk += Opcodes::jz_offset           (aCPU, pc, 0x60,0xba,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_07a1(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x07a1;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x07,0x0a);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_07a4(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x07a4;
	clk += Opcodes::mov_rx_mem          (aCPU, pc, 0xaf,0x35,0x00);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x34,0x00);
	clk += Opcodes::anl_a_rx            (aCPU, pc, 0x5f,0x00,0x00);
	clk += Opcodes::jnz_offset          (aCPU, pc, 0x70,0x12,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_07ab(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x07ab;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x34,0x00);
	clk += Opcodes::add_a_rx            (aCPU, pc, 0x2f,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xf8,0x00,0x00);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x35,0x00);
	clk += Opcodes::rl_a                (aCPU, pc, 0x23,0x00,0x00);
	clk += Opcodes::rl_a                (aCPU, pc, 0x23,0x00,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0x1c,0x00);
	clk += Opcodes::add_a_mem           (aCPU, pc, 0x25,0x38,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfc,0x00,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7f,0x80,0x00);
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x08,0x32);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_07bd(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x07bd;
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xef,0x00,0x00);
	clk += Opcodes::cpl_a               (aCPU, pc, 0xf4,0x00,0x00);
	clk += Opcodes::inc_a               (aCPU, pc, 0x04,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xf8,0x00,0x00);
	clk += Opcodes::mov_a_imm           (aCPU, pc, 0x74,0x80,0x00);
	clk += Opcodes::clr_c               (aCPU, pc, 0xc3,0x00,0x00);
	clk += Opcodes::subb_a_rx           (aCPU, pc, 0x98,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xff,0x00,0x00);
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x80,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x3b);
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x80,0x00);
	clk += Opcodes::dec_mem             (aCPU, pc, 0x15,0x82,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x3d);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8b,0x80,0x00);
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xe8,0x00,0x00);
	clk += Opcodes::clr_c               (aCPU, pc, 0xc3,0x00,0x00);
	clk += Opcodes::subb_a_mem          (aCPU, pc, 0x95,0x23,0x00);
	clk += Opcodes::jnc_offset          (aCPU, pc, 0x50,0x0c,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_07dd(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x07dd;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xd8,0xf6,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_07e7(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x07e7;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x40,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_07e9(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x07e9;
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xf8,0x00,0x00);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x23,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_07ec(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x07ec;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::djnz_mem_offset     (aCPU, pc, 0xd5,0xe0,0xf5);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_07f7(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x07f7;
	clk += Opcodes::mov_rx_mem          (aCPU, pc, 0xab,0x27,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_07f9(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x07f9;
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xd9,0x03,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_07fd(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x07fd;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x01,0x42);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0800(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0800;
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x80,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x3b);
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x80,0x00);
	clk += Opcodes::dec_mem             (aCPU, pc, 0x15,0x82,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x3d);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8b,0x80,0x00);
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xe8,0x00,0x00);
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0xf8,0x00);
	clk += Opcodes::jnc_offset          (aCPU, pc, 0x50,0x06,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0816(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0816;
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xf8,0x00,0x00);
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x20,0xc4);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_081a(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x081a;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0xdd,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_081c(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x081c;
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xe8,0x00,0x00);
	clk += Opcodes::jz_offset           (aCPU, pc, 0x60,0x0a,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_081f(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x081f;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xd8,0xf6,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0829(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0829;
	clk += Opcodes::mov_rx_mem          (aCPU, pc, 0xab,0x80,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x35,0x00);
	clk += Opcodes::mov_rx_mem          (aCPU, pc, 0xa8,0x34,0x00);
	clk += Opcodes::mov_rx_mem          (aCPU, pc, 0xac,0x38,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0832(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0832;
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0x36,0x80);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x3b);
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0x37,0x80);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x3d);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8c,0x80,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0840(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0840;
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8c,0x80,0x00);
	clk += Opcodes::mov_a_imm           (aCPU, pc, 0x74,0x4f,0x00);
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0xa0,0x2a);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0847(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0847;
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x80,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x3b);
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x80,0x00);
	clk += Opcodes::dec_mem             (aCPU, pc, 0x15,0x82,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x3d);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8b,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0x36,0x80);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x3b);
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0x37,0x80);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x3d);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8c,0x80,0x00);
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xdf,0x0c,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0870(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0870;
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0871(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0871;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xdf,0x01,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_087b(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x087b;
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_087c(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x087c;
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xeb,0x00,0x00);
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0x04,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfb,0x00,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0x1f,0x00);
	clk += Opcodes::jnz_offset          (aCPU, pc, 0x70,0x0b,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0884(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0884;
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xeb,0x00,0x00);
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0xe0,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfb,0x00,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xd9,0x03,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_088c(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x088c;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x01,0x42);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_088f(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x088f;
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xec,0x00,0x00);
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0x04,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfc,0x00,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0x1f,0x00);
	clk += Opcodes::jnz_offset          (aCPU, pc, 0x70,0x1c,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0897(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0897;
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xec,0x00,0x00);
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0xe0,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfc,0x00,0x00);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x36,0x00);
	clk += Opcodes::inc_a               (aCPU, pc, 0x04,0x00,0x00);
	clk += Opcodes::inc_a               (aCPU, pc, 0x04,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x36,0x00);
	clk += Opcodes::jnz_offset          (aCPU, pc, 0x70,0x04,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_08a3(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x08a3;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x37,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x37,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_08a7(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x08a7;
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0x36,0x80);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x3b);
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0x37,0x80);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x3d);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_08b3(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x08b3;
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xe8,0x00,0x00);
	clk += Opcodes::inc_a               (aCPU, pc, 0x04,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xf8,0x00,0x00);
	clk += Opcodes::jnz_offset          (aCPU, pc, 0x70,0x88,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_08b8(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x08b8;
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xeb,0x00,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0x1f,0x00);
	clk += Opcodes::jz_offset           (aCPU, pc, 0x60,0x29,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_08bd(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x08bd;
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x80,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x3b);
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x80,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x3d);
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xd9,0x03,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_08cd(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x08cd;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x01,0x42);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_08d0(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x08d0;
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8b,0x80,0x00);
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xeb,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_08d3(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x08d3;
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0x1f,0x00);
	clk += Opcodes::jz_offset           (aCPU, pc, 0x60,0x0f,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_08d7(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x08d7;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xdf,0x01,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_08e1(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x08e1;
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_08e2(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x08e2;
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0x04,0x00);
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0xed,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_08e6(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x08e6;
	clk += Opcodes::mov_rx_mem          (aCPU, pc, 0xab,0x27,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_08e8(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x08e8;
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x80,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x3b);
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x80,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x3d);
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xd9,0x03,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_08f8(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x08f8;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x01,0x42);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_08fb(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x08fb;
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8b,0x80,0x00);
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xef,0x00,0x00);
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0xf8,0x00);
	clk += Opcodes::jnc_offset          (aCPU, pc, 0x50,0x06,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0902(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0902;
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xff,0x00,0x00);
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x20,0xc4);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0906(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0906;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0xe0,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0908(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0908;
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xef,0x00,0x00);
	clk += Opcodes::jz_offset           (aCPU, pc, 0x60,0x0a,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_090b(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x090b;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xdf,0xf6,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0915(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0915;
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0916(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0916;
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xeb,0x00,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0x1f,0x00);
	clk += Opcodes::jnz_offset          (aCPU, pc, 0x70,0x03,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_091b(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x091b;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x09,0xee);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_091e(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x091e;
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xf0,0x06);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0921(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0921;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x20,0x14);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0924(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0924;
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0xa0,0x65);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0927(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0927;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x34,0x00);
	clk += Opcodes::anl_a_mem           (aCPU, pc, 0x55,0x35,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x35,0x00);
	clk += Opcodes::jz_offset           (aCPU, pc, 0x60,0x2d,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_092f(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x092f;
	clk += Opcodes::cjne_rx_imm_offset  (aCPU, pc, 0xbe,0x01,0x03);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0932(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0932;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x09,0xac);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0935(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0935;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x39,0x00);
	clk += Opcodes::anl_a_mem           (aCPU, pc, 0x55,0x3a,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x3a,0x00);
	clk += Opcodes::jz_offset           (aCPU, pc, 0x60,0x2b,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_093d(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x093d;
	clk += Opcodes::cjne_rx_imm_offset  (aCPU, pc, 0xbe,0x02,0x03);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0940(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0940;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x09,0xac);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0943(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0943;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x3e,0x00);
	clk += Opcodes::anl_a_mem           (aCPU, pc, 0x55,0x3f,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x3f,0x00);
	clk += Opcodes::jz_offset           (aCPU, pc, 0x60,0x29,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_094b(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x094b;
	clk += Opcodes::cjne_rx_imm_offset  (aCPU, pc, 0xbe,0x03,0x03);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_094e(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x094e;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x09,0xac);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0951(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0951;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x43,0x00);
	clk += Opcodes::anl_a_mem           (aCPU, pc, 0x55,0x44,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x44,0x00);
	clk += Opcodes::jz_offset           (aCPU, pc, 0x60,0x27,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0959(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0959;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x09,0xac);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_095c(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x095c;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x05,0x2b);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_095f(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x095f;
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0xa0,0x03);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0962(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0962;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x09,0x2f);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0965(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0965;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x09,0x8f);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0968(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0968;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x05,0x5b);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_096b(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x096b;
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0xa0,0x03);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_096e(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x096e;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x09,0x3d);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0971(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0971;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x09,0x98);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0974(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0974;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x05,0x8b);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0977(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0977;
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0xa0,0x03);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_097a(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x097a;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x09,0x4b);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_097d(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x097d;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x09,0xa1);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0980(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0980;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x05,0xbb);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0983(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0983;
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0xa0,0x03);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0986(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0986;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x09,0xac);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0989(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0989;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x09,0xaf);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_098c(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x098c;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x05,0xeb);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_098f(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x098f;
	clk += Opcodes::cjne_rx_imm_offset  (aCPU, pc, 0xbe,0x01,0x03);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0992(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0992;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x09,0xaf);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0995(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0995;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x06,0x07);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0998(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0998;
	clk += Opcodes::cjne_rx_imm_offset  (aCPU, pc, 0xbe,0x02,0x03);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_099b(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x099b;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x09,0xaf);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_099e(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x099e;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x06,0x23);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_09a1(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x09a1;
	clk += Opcodes::cjne_rx_imm_offset  (aCPU, pc, 0xbe,0x03,0x03);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_09a4(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x09a4;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x09,0xaf);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_09a7(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x09a7;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x06,0x3f);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_09aa(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x09aa;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x03,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_09ac(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x09ac;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x20,0x7e);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_09af(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x09af;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::dec_rx              (aCPU, pc, 0x1d,0x00,0x00);
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xec,0x00,0x00);
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0x04,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfc,0x00,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0x1f,0x00);
	clk += Opcodes::jnz_offset          (aCPU, pc, 0x70,0x18,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_09c0(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x09c0;
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0xf0,0xe9);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xef,0x21);
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xec,0x00,0x00);
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0xe0,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfc,0x00,0x00);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xf0,0x08);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_09cd(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x09cd;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x92,0x01);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::anl_mem_imm         (aCPU, pc, 0x53,0x85,0x03);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_09d5(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x09d5;
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0xe9,0xf0);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_09d8(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x09d8;
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xeb,0x00,0x00);
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0x04,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfb,0x00,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0x1f,0x00);
	clk += Opcodes::jnz_offset          (aCPU, pc, 0x70,0x55,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_09e0(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x09e0;
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xeb,0x00,0x00);
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0xe0,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfb,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_09e4(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x09e4;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x92,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xd9,0x03,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_09eb(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x09eb;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x01,0x42);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_09ee(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x09ee;
	clk += Opcodes::mov_rx_mem          (aCPU, pc, 0xa8,0x35,0x00);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x34,0x00);
	clk += Opcodes::anl_a_rx            (aCPU, pc, 0x58,0x00,0x00);
	clk += Opcodes::jz_offset           (aCPU, pc, 0x60,0x40,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_09f5(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x09f5;
	clk += Opcodes::mov_a_imm           (aCPU, pc, 0x74,0x08,0x00);
	clk += Opcodes::add_a_rx            (aCPU, pc, 0x28,0x00,0x00);
	clk += Opcodes::jc_offset           (aCPU, pc, 0x40,0x3b,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_09fa(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x09fa;
	clk += Opcodes::cjne_rx_imm_offset  (aCPU, pc, 0xbe,0x01,0x03);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_09fd(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x09fd;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x0a,0x30);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0a00(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0a00;
	clk += Opcodes::mov_rx_mem          (aCPU, pc, 0xa8,0x3a,0x00);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x39,0x00);
	clk += Opcodes::anl_a_rx            (aCPU, pc, 0x58,0x00,0x00);
	clk += Opcodes::jz_offset           (aCPU, pc, 0x60,0x2e,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0a07(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0a07;
	clk += Opcodes::mov_a_imm           (aCPU, pc, 0x74,0x08,0x00);
	clk += Opcodes::add_a_rx            (aCPU, pc, 0x28,0x00,0x00);
	clk += Opcodes::jc_offset           (aCPU, pc, 0x40,0x29,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0a0c(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0a0c;
	clk += Opcodes::cjne_rx_imm_offset  (aCPU, pc, 0xbe,0x02,0x03);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0a0f(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0a0f;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x0a,0x30);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0a12(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0a12;
	clk += Opcodes::mov_rx_mem          (aCPU, pc, 0xa8,0x3f,0x00);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x3e,0x00);
	clk += Opcodes::anl_a_rx            (aCPU, pc, 0x58,0x00,0x00);
	clk += Opcodes::jz_offset           (aCPU, pc, 0x60,0x1c,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0a19(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0a19;
	clk += Opcodes::mov_a_imm           (aCPU, pc, 0x74,0x08,0x00);
	clk += Opcodes::add_a_rx            (aCPU, pc, 0x28,0x00,0x00);
	clk += Opcodes::jc_offset           (aCPU, pc, 0x40,0x17,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0a1e(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0a1e;
	clk += Opcodes::cjne_rx_imm_offset  (aCPU, pc, 0xbe,0x03,0x03);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0a21(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0a21;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x0a,0x30);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0a24(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0a24;
	clk += Opcodes::mov_rx_mem          (aCPU, pc, 0xa8,0x44,0x00);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x43,0x00);
	clk += Opcodes::anl_a_rx            (aCPU, pc, 0x58,0x00,0x00);
	clk += Opcodes::jz_offset           (aCPU, pc, 0x60,0x0a,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0a2b(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0a2b;
	clk += Opcodes::mov_a_imm           (aCPU, pc, 0x74,0x08,0x00);
	clk += Opcodes::add_a_rx            (aCPU, pc, 0x28,0x00,0x00);
	clk += Opcodes::jc_offset           (aCPU, pc, 0x40,0x05,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0a30(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0a30;
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xed,0x00,0x00);
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0xf8,0x00);
	clk += Opcodes::jc_offset           (aCPU, pc, 0x40,0x0a,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0a35(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0a35;
	clk += Opcodes::cjne_rx_imm_offset  (aCPU, pc, 0xbd,0x00,0x04);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0a38(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0a38;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x92,0x00);
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0a3c(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0a3c;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x09,0x1e);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0a3f(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0a3f;
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xf8,0x00,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7d,0x01,0x00);
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x2a,0xa9);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0a45(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0a45;
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xe8,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfd,0x00,0x00);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x32,0x00);
	clk += Opcodes::add_a_mem           (aCPU, pc, 0x25,0x31,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfc,0x00,0x00);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x35,0x00);
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0x08,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x35,0x00);
	clk += Opcodes::cjne_rx_imm_offset  (aCPU, pc, 0xbe,0x01,0x03);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0a55(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0a55;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x0a,0x76);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0a58(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0a58;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x3a,0x00);
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0x08,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x3a,0x00);
	clk += Opcodes::cjne_rx_imm_offset  (aCPU, pc, 0xbe,0x02,0x03);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0a61(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0a61;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x0a,0x76);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0a64(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0a64;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x3f,0x00);
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0x08,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x3f,0x00);
	clk += Opcodes::cjne_rx_imm_offset  (aCPU, pc, 0xbe,0x03,0x03);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0a6d(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0a6d;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x0a,0x76);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0a70(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0a70;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x44,0x00);
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0x08,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x44,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0a76(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0a76;
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xed,0x00,0x00);
	clk += Opcodes::jz_offset           (aCPU, pc, 0x60,0xbf,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0a79(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0a79;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x09,0xee);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0a7c(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0a7c;
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0x28,0x82);
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0x29,0x83);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x25,0x00);
	clk += Opcodes::add_a_mem           (aCPU, pc, 0x25,0x27,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfb,0x00,0x00);
	clk += Opcodes::mov_rx_mem          (aCPU, pc, 0xa9,0x26,0x00);
	clk += Opcodes::mov_a_imm           (aCPU, pc, 0x74,0x01,0x00);
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0x2c,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0a8e(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0a8e;
	clk += Opcodes::jc_offset           (aCPU, pc, 0x40,0x03,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0a90(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0a90;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x0a,0x9a);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0a93(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0a93;
	clk += Opcodes::mov_rx_mem          (aCPU, pc, 0xae,0x2c,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7d,0x80,0x00);
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x06,0x5b);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0a9a(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0a9a;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x07,0xa4);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0a9d(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0a9d;
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0x28,0x82);
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0x29,0x83);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x27,0x00);
	clk += Opcodes::add_a_mem           (aCPU, pc, 0x25,0x25,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfb,0x00,0x00);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x32,0x00);
	clk += Opcodes::add_a_mem           (aCPU, pc, 0x25,0x30,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfc,0x00,0x00);
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0xe9,0xf0);
	clk += Opcodes::mov_rx_mem          (aCPU, pc, 0xa9,0x26,0x00);
	clk += Opcodes::mov_rx_mem          (aCPU, pc, 0xae,0x2c,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7d,0x80,0x00);
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x09,0x16);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0ab9(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0ab9;
	clk += Opcodes::clr_bitaddr         (aCPU, pc, 0xc2,0xb9,0x00);
	clk += Opcodes::mov_dptr_imm        (aCPU, pc, 0x90,0x02,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x78,0x34,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x79,0x0e,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0ac2(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0ac2;
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_indir_rx_a      (aCPU, pc, 0xf6,0x00,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::inc_rx              (aCPU, pc, 0x08,0x00,0x00);
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xd9,0xfa,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0ac8(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0ac8;
	clk += Opcodes::setb_bitaddr        (aCPU, pc, 0xd2,0xb9,0x00);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x34,0x00);
	clk += Opcodes::clr_c               (aCPU, pc, 0xc3,0x00,0x00);
	clk += Opcodes::subb_a_mem          (aCPU, pc, 0x95,0x38,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfa,0x00,0x00);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x35,0x00);
	clk += Opcodes::subb_a_mem          (aCPU, pc, 0x95,0x39,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfb,0x00,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8a,0x34,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8b,0x35,0x00);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x36,0x00);
	clk += Opcodes::clr_c               (aCPU, pc, 0xc3,0x00,0x00);
	clk += Opcodes::subb_a_mem          (aCPU, pc, 0x95,0x3a,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfa,0x00,0x00);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x37,0x00);
	clk += Opcodes::subb_a_mem          (aCPU, pc, 0x95,0x3b,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfb,0x00,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8a,0x36,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8b,0x37,0x00);
	clk += Opcodes::mov_dptr_imm        (aCPU, pc, 0x90,0x03,0xfd);
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfa,0x00,0x00);
	clk += Opcodes::push_mem            (aCPU, pc, 0xc0,0x02,0x00);
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x0f,0xd9);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0af2(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0af2;
	clk += Opcodes::pop_mem             (aCPU, pc, 0xd0,0x02,0x00);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x16,0x00);
	clk += Opcodes::clr_c               (aCPU, pc, 0xc3,0x00,0x00);
	clk += Opcodes::rlc_a               (aCPU, pc, 0x33,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x82,0x00);
	clk += Opcodes::clr_a               (aCPU, pc, 0xe4,0x00,0x00);
	clk += Opcodes::rlc_a               (aCPU, pc, 0x33,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x83,0x00);
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x80,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x3b);
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x80,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x3d);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0b0b(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0b0b;
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0x34,0x10);
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0x35,0x11);
	clk += Opcodes::mov_rx_mem          (aCPU, pc, 0xab,0x36,0x00);
	clk += Opcodes::mov_rx_mem          (aCPU, pc, 0xac,0x37,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8b,0x12,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8c,0x13,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x17,0x80);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xd0,0x10);
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xe8,0x00,0x00);
	clk += Opcodes::add_a_mem           (aCPU, pc, 0x25,0x38,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xf8,0x00,0x00);
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xe9,0x00,0x00);
	clk += Opcodes::addc_a_mem          (aCPU, pc, 0x35,0x39,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xf9,0x00,0x00);
	clk += Opcodes::rlc_a               (aCPU, pc, 0x33,0x00,0x00);
	clk += Opcodes::jc_offset           (aCPU, pc, 0x40,0x48,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0b2a(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0b2a;
	clk += Opcodes::swap_a              (aCPU, pc, 0xc4,0x00,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0x0f,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfc,0x00,0x00);
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xea,0x00,0x00);
	clk += Opcodes::add_a_mem           (aCPU, pc, 0x25,0x3a,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfa,0x00,0x00);
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xeb,0x00,0x00);
	clk += Opcodes::addc_a_mem          (aCPU, pc, 0x35,0x3b,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfb,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0b36(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0b36;
	clk += Opcodes::rlc_a               (aCPU, pc, 0x33,0x00,0x00);
	clk += Opcodes::jc_offset           (aCPU, pc, 0x40,0x3c,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0b39(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0b39;
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0xf0,0x00);
	clk += Opcodes::orl_a_rx            (aCPU, pc, 0x4c,0x00,0x00);
	clk += Opcodes::xrl_a_rx            (aCPU, pc, 0x6e,0x00,0x00);
	clk += Opcodes::jz_offset           (aCPU, pc, 0x60,0x17,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0b3f(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0b3f;
	clk += Opcodes::xrl_a_rx            (aCPU, pc, 0x6e,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfe,0x00,0x00);
	clk += Opcodes::clr_c               (aCPU, pc, 0xc3,0x00,0x00);
	clk += Opcodes::rlc_a               (aCPU, pc, 0x33,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x82,0x00);
	clk += Opcodes::clr_a               (aCPU, pc, 0xe4,0x00,0x00);
	clk += Opcodes::rlc_a               (aCPU, pc, 0x33,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x83,0x00);
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x80,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x3b);
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x80,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x3d);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0b56(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0b56;
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xeb,0x00,0x00);
	clk += Opcodes::swap_a              (aCPU, pc, 0xc4,0x00,0x00);
	clk += Opcodes::rl_a                (aCPU, pc, 0x23,0x00,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0xe0,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfd,0x00,0x00);
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xe9,0x00,0x00);
	clk += Opcodes::rl_a                (aCPU, pc, 0x23,0x00,0x00);
	clk += Opcodes::rl_a                (aCPU, pc, 0x23,0x00,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0x1c,0x00);
	clk += Opcodes::orl_a_rx            (aCPU, pc, 0x4d,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfd,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xdf,0x09,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0b6f(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0b6f;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x0c,0x2a);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0b72(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0b72;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x0b,0xe4);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0b75(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0b75;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x0b,0xec);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0b78(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0b78;
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xe8,0x00,0x00);
	clk += Opcodes::add_a_mem           (aCPU, pc, 0x25,0x38,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xf8,0x00,0x00);
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xe9,0x00,0x00);
	clk += Opcodes::addc_a_mem          (aCPU, pc, 0x35,0x39,0x00);
	clk += Opcodes::xrl_a_rx            (aCPU, pc, 0x69,0x00,0x00);
	clk += Opcodes::jz_offset           (aCPU, pc, 0x60,0x4c,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0b82(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0b82;
	clk += Opcodes::xrl_a_rx            (aCPU, pc, 0x69,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xf9,0x00,0x00);
	clk += Opcodes::rlc_a               (aCPU, pc, 0x33,0x00,0x00);
	clk += Opcodes::jc_offset           (aCPU, pc, 0x40,0x5d,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0b87(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0b87;
	clk += Opcodes::swap_a              (aCPU, pc, 0xc4,0x00,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0x0f,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfc,0x00,0x00);
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xea,0x00,0x00);
	clk += Opcodes::add_a_mem           (aCPU, pc, 0x25,0x3a,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfa,0x00,0x00);
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xeb,0x00,0x00);
	clk += Opcodes::addc_a_mem          (aCPU, pc, 0x35,0x3b,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfb,0x00,0x00);
	clk += Opcodes::rlc_a               (aCPU, pc, 0x33,0x00,0x00);
	clk += Opcodes::jc_offset           (aCPU, pc, 0x40,0x56,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0b96(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0b96;
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0xf0,0x00);
	clk += Opcodes::orl_a_rx            (aCPU, pc, 0x4c,0x00,0x00);
	clk += Opcodes::xrl_a_rx            (aCPU, pc, 0x6e,0x00,0x00);
	clk += Opcodes::jz_offset           (aCPU, pc, 0x60,0x17,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0b9c(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0b9c;
	clk += Opcodes::xrl_a_rx            (aCPU, pc, 0x6e,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfe,0x00,0x00);
	clk += Opcodes::clr_c               (aCPU, pc, 0xc3,0x00,0x00);
	clk += Opcodes::rlc_a               (aCPU, pc, 0x33,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x82,0x00);
	clk += Opcodes::clr_a               (aCPU, pc, 0xe4,0x00,0x00);
	clk += Opcodes::rlc_a               (aCPU, pc, 0x33,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x83,0x00);
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x80,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x3b);
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x80,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x3d);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0bb3(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0bb3;
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xeb,0x00,0x00);
	clk += Opcodes::swap_a              (aCPU, pc, 0xc4,0x00,0x00);
	clk += Opcodes::rl_a                (aCPU, pc, 0x23,0x00,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0xe0,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfd,0x00,0x00);
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xe9,0x00,0x00);
	clk += Opcodes::rl_a                (aCPU, pc, 0x23,0x00,0x00);
	clk += Opcodes::rl_a                (aCPU, pc, 0x23,0x00,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0x1c,0x00);
	clk += Opcodes::orl_a_rx            (aCPU, pc, 0x4d,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfd,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xdf,0xac,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0bcc(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0bcc;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x5c,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0bce(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0bce;
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xea,0x00,0x00);
	clk += Opcodes::add_a_mem           (aCPU, pc, 0x25,0x3a,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfa,0x00,0x00);
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xeb,0x00,0x00);
	clk += Opcodes::addc_a_mem          (aCPU, pc, 0x35,0x3b,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfb,0x00,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8d,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xdf,0x96,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0be2(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0be2;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x46,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0be4(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0be4;
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xea,0x00,0x00);
	clk += Opcodes::add_a_mem           (aCPU, pc, 0x25,0x3a,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfa,0x00,0x00);
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xeb,0x00,0x00);
	clk += Opcodes::addc_a_mem          (aCPU, pc, 0x35,0x3b,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfb,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0bec(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0bec;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x79);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x95,0x00);
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x24,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0bf4(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0bf4;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x95,0xff);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x39);
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xe9,0x00,0x00);
	clk += Opcodes::rlc_a               (aCPU, pc, 0x33,0x00,0x00);
	clk += Opcodes::swap_a              (aCPU, pc, 0xc4,0x00,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0x0f,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfc,0x00,0x00);
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xeb,0x00,0x00);
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x0b,0x36);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0c04(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0c04;
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xe8,0x00,0x00);
	clk += Opcodes::add_a_mem           (aCPU, pc, 0x25,0x38,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xf8,0x00,0x00);
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xe9,0x00,0x00);
	clk += Opcodes::addc_a_mem          (aCPU, pc, 0x35,0x39,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xf9,0x00,0x00);
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xea,0x00,0x00);
	clk += Opcodes::add_a_mem           (aCPU, pc, 0x25,0x3a,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfa,0x00,0x00);
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xeb,0x00,0x00);
	clk += Opcodes::addc_a_mem          (aCPU, pc, 0x35,0x3b,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfb,0x00,0x00);
	clk += Opcodes::orl_a_rx            (aCPU, pc, 0x49,0x00,0x00);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xe7,0xdc);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0c18(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0c18;
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0x41,0xa0);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0x40,0xa0);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xdf,0xdc,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0c28(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0c28;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0c2a(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0c2a;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x95,0xff);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xd0,0x00);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x3c,0x00);
	clk += Opcodes::add_a_mem           (aCPU, pc, 0x25,0x34,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfd,0x00,0x00);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x3d,0x00);
	clk += Opcodes::addc_a_mem          (aCPU, pc, 0x35,0x35,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfe,0x00,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8d,0x34,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8e,0x35,0x00);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x3e,0x00);
	clk += Opcodes::add_a_rx            (aCPU, pc, 0x2b,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfb,0x00,0x00);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x3f,0x00);
	clk += Opcodes::addc_a_rx           (aCPU, pc, 0x3c,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfc,0x00,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8b,0x36,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8c,0x37,0x00);
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xda,0x02,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0c4c(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0c4c;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x03,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0c4e(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0c4e;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x0b,0x0b);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0c51(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0c51;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x10,0x67);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0c54(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0c54;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x85,0x03);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7c,0x10,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0c59(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0c59;
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfd,0x00,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x92,0x01);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0x0f,0x00);
	clk += Opcodes::rl_a                (aCPU, pc, 0x23,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x84,0x00);
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xf8,0x00,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0xa0,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x88,0xa0,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0xa0,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x88,0xa0,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0xa0,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x88,0xa0,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0xa0,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x88,0xa0,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xed,0x00,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0xf0,0x00);
	clk += Opcodes::swap_a              (aCPU, pc, 0xc4,0x00,0x00);
	clk += Opcodes::rl_a                (aCPU, pc, 0x23,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x84,0x00);
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xf8,0x00,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0xa0,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x88,0xa0,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0xa0,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x88,0xa0,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0xa0,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x88,0xa0,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0xa0,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x88,0xa0,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x92,0x00);
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xdc,0x81,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0cd8(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0cd8;
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0cd9(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0cd9;
	clk += Opcodes::mov_dptr_imm        (aCPU, pc, 0x90,0x03,0xfd);
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfa,0x00,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7b,0x00,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7c,0x00,0x00);
	clk += Opcodes::push_mem            (aCPU, pc, 0xc0,0x02,0x00);
	clk += Opcodes::push_mem            (aCPU, pc, 0xc0,0x03,0x00);
	clk += Opcodes::push_mem            (aCPU, pc, 0xc0,0x04,0x00);
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x0f,0xd9);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0ceb(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0ceb;
	clk += Opcodes::pop_mem             (aCPU, pc, 0xd0,0x04,0x00);
	clk += Opcodes::pop_mem             (aCPU, pc, 0xd0,0x03,0x00);
	clk += Opcodes::pop_mem             (aCPU, pc, 0xd0,0x02,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x95,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0cf4(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0cf4;
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8b,0x82,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8c,0x83,0x00);
	clk += Opcodes::push_mem            (aCPU, pc, 0xc0,0x02,0x00);
	clk += Opcodes::push_mem            (aCPU, pc, 0xc0,0x03,0x00);
	clk += Opcodes::push_mem            (aCPU, pc, 0xc0,0x04,0x00);
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x0c,0x54);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0d01(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0d01;
	clk += Opcodes::pop_mem             (aCPU, pc, 0xd0,0x04,0x00);
	clk += Opcodes::pop_mem             (aCPU, pc, 0xd0,0x03,0x00);
	clk += Opcodes::pop_mem             (aCPU, pc, 0xd0,0x02,0x00);
	clk += Opcodes::dec_rx              (aCPU, pc, 0x1a,0x00,0x00);
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xea,0x00,0x00);
	clk += Opcodes::jz_offset           (aCPU, pc, 0x60,0x50,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0d0b(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0d0b;
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8b,0x82,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8c,0x83,0x00);
	clk += Opcodes::push_mem            (aCPU, pc, 0xc0,0x02,0x00);
	clk += Opcodes::push_mem            (aCPU, pc, 0xc0,0x03,0x00);
	clk += Opcodes::push_mem            (aCPU, pc, 0xc0,0x04,0x00);
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x0c,0x54);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0d18(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0d18;
	clk += Opcodes::pop_mem             (aCPU, pc, 0xd0,0x04,0x00);
	clk += Opcodes::pop_mem             (aCPU, pc, 0xd0,0x03,0x00);
	clk += Opcodes::pop_mem             (aCPU, pc, 0xd0,0x02,0x00);
	clk += Opcodes::dec_rx              (aCPU, pc, 0x1a,0x00,0x00);
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xea,0x00,0x00);
	clk += Opcodes::jz_offset           (aCPU, pc, 0x60,0x39,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0d22(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0d22;
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8b,0x82,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8c,0x83,0x00);
	clk += Opcodes::push_mem            (aCPU, pc, 0xc0,0x02,0x00);
	clk += Opcodes::push_mem            (aCPU, pc, 0xc0,0x03,0x00);
	clk += Opcodes::push_mem            (aCPU, pc, 0xc0,0x04,0x00);
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x0c,0x54);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0d2f(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0d2f;
	clk += Opcodes::pop_mem             (aCPU, pc, 0xd0,0x04,0x00);
	clk += Opcodes::pop_mem             (aCPU, pc, 0xd0,0x03,0x00);
	clk += Opcodes::pop_mem             (aCPU, pc, 0xd0,0x02,0x00);
	clk += Opcodes::dec_rx              (aCPU, pc, 0x1a,0x00,0x00);
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xea,0x00,0x00);
	clk += Opcodes::jz_offset           (aCPU, pc, 0x60,0x22,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0d39(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0d39;
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8b,0x82,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8c,0x83,0x00);
	clk += Opcodes::push_mem            (aCPU, pc, 0xc0,0x02,0x00);
	clk += Opcodes::push_mem            (aCPU, pc, 0xc0,0x03,0x00);
	clk += Opcodes::push_mem            (aCPU, pc, 0xc0,0x04,0x00);
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x0c,0x54);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0d46(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0d46;
	clk += Opcodes::pop_mem             (aCPU, pc, 0xd0,0x04,0x00);
	clk += Opcodes::pop_mem             (aCPU, pc, 0xd0,0x03,0x00);
	clk += Opcodes::pop_mem             (aCPU, pc, 0xd0,0x02,0x00);
	clk += Opcodes::mov_a_imm           (aCPU, pc, 0x74,0x10,0x00);
	clk += Opcodes::add_a_rx            (aCPU, pc, 0x2b,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfb,0x00,0x00);
	clk += Opcodes::clr_a               (aCPU, pc, 0xe4,0x00,0x00);
	clk += Opcodes::addc_a_rx           (aCPU, pc, 0x3c,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfc,0x00,0x00);
	clk += Opcodes::anl_mem_imm         (aCPU, pc, 0x53,0x03,0xf0);
	clk += Opcodes::anl_mem_imm         (aCPU, pc, 0x53,0x04,0x01);
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xda,0x99,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0d5b(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0d5b;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x95,0xff);
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x10,0x67);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0d61(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0d61;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x92,0x01);
	clk += Opcodes::mov_dptr_imm        (aCPU, pc, 0x90,0x03,0x00);
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfc,0x00,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfd,0x00,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfe,0x00,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xff,0x00,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x92,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7a,0x08,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0d77(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0d77;
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7b,0x08,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0d7b(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0d7b;
	clk += Opcodes::rrc_a               (aCPU, pc, 0x13,0x00,0x00);
	clk += Opcodes::jc_offset           (aCPU, pc, 0x40,0x1e,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0d7e(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0d7e;
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8d,0xa0,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8c,0xa0,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8d,0xa0,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8c,0xa0,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xdb,0xe3,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0d98(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0d98;
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xda,0xdd,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0d9a(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0d9a;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x1c,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0d9c(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0d9c;
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8f,0xa0,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8e,0xa0,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8f,0xa0,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8e,0xa0,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xdb,0xc5,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0db6(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0db6;
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xda,0xbf,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0db8(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0db8;
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0db9(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0db9;
	clk += Opcodes::mov_dptr_imm        (aCPU, pc, 0x90,0x03,0xfd);
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfa,0x00,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7b,0x00,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7c,0x00,0x00);
	clk += Opcodes::push_mem            (aCPU, pc, 0xc0,0x02,0x00);
	clk += Opcodes::push_mem            (aCPU, pc, 0xc0,0x03,0x00);
	clk += Opcodes::push_mem            (aCPU, pc, 0xc0,0x04,0x00);
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x0f,0xd9);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0dcb(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0dcb;
	clk += Opcodes::pop_mem             (aCPU, pc, 0xd0,0x04,0x00);
	clk += Opcodes::pop_mem             (aCPU, pc, 0xd0,0x03,0x00);
	clk += Opcodes::pop_mem             (aCPU, pc, 0xd0,0x02,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x95,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0dd4(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0dd4;
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8b,0x82,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8c,0x83,0x00);
	clk += Opcodes::push_mem            (aCPU, pc, 0xc0,0x02,0x00);
	clk += Opcodes::push_mem            (aCPU, pc, 0xc0,0x03,0x00);
	clk += Opcodes::push_mem            (aCPU, pc, 0xc0,0x04,0x00);
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x0d,0x61);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0de1(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0de1;
	clk += Opcodes::pop_mem             (aCPU, pc, 0xd0,0x04,0x00);
	clk += Opcodes::pop_mem             (aCPU, pc, 0xd0,0x03,0x00);
	clk += Opcodes::pop_mem             (aCPU, pc, 0xd0,0x02,0x00);
	clk += Opcodes::dec_rx              (aCPU, pc, 0x1a,0x00,0x00);
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xea,0x00,0x00);
	clk += Opcodes::jz_offset           (aCPU, pc, 0x60,0x22,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0deb(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0deb;
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8b,0x82,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8c,0x83,0x00);
	clk += Opcodes::push_mem            (aCPU, pc, 0xc0,0x02,0x00);
	clk += Opcodes::push_mem            (aCPU, pc, 0xc0,0x03,0x00);
	clk += Opcodes::push_mem            (aCPU, pc, 0xc0,0x04,0x00);
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x0d,0x61);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0df8(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0df8;
	clk += Opcodes::pop_mem             (aCPU, pc, 0xd0,0x04,0x00);
	clk += Opcodes::pop_mem             (aCPU, pc, 0xd0,0x03,0x00);
	clk += Opcodes::pop_mem             (aCPU, pc, 0xd0,0x02,0x00);
	clk += Opcodes::mov_a_imm           (aCPU, pc, 0x74,0x08,0x00);
	clk += Opcodes::add_a_rx            (aCPU, pc, 0x2b,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfb,0x00,0x00);
	clk += Opcodes::clr_a               (aCPU, pc, 0xe4,0x00,0x00);
	clk += Opcodes::addc_a_rx           (aCPU, pc, 0x3c,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfc,0x00,0x00);
	clk += Opcodes::anl_mem_imm         (aCPU, pc, 0x53,0x03,0xf8);
	clk += Opcodes::anl_mem_imm         (aCPU, pc, 0x53,0x04,0x01);
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xda,0xc7,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0e0d(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0e0d;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x95,0xff);
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x10,0x67);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0e13(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0e13;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x92,0x01);
	clk += Opcodes::mov_dptr_imm        (aCPU, pc, 0x90,0x03,0x00);
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfc,0x00,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfd,0x00,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfe,0x00,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xff,0x00,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x92,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7a,0x10,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0e29(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0e29;
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7b,0x08,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0e2d(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0e2d;
	clk += Opcodes::rrc_a               (aCPU, pc, 0x13,0x00,0x00);
	clk += Opcodes::jc_offset           (aCPU, pc, 0x40,0x12,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0e30(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0e30;
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8d,0xa0,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8c,0xa0,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xdb,0xef,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0e3e(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0e3e;
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xda,0xe9,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0e40(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0e40;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x10,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0e42(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0e42;
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8f,0xa0,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8e,0xa0,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xdb,0xdd,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0e50(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0e50;
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xda,0xd7,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0e52(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0e52;
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0e53(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0e53;
	clk += Opcodes::mov_dptr_imm        (aCPU, pc, 0x90,0x03,0xfd);
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfa,0x00,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7b,0x00,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7c,0x00,0x00);
	clk += Opcodes::push_mem            (aCPU, pc, 0xc0,0x02,0x00);
	clk += Opcodes::push_mem            (aCPU, pc, 0xc0,0x03,0x00);
	clk += Opcodes::push_mem            (aCPU, pc, 0xc0,0x04,0x00);
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x0f,0xd9);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0e65(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0e65;
	clk += Opcodes::pop_mem             (aCPU, pc, 0xd0,0x04,0x00);
	clk += Opcodes::pop_mem             (aCPU, pc, 0xd0,0x03,0x00);
	clk += Opcodes::pop_mem             (aCPU, pc, 0xd0,0x02,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x95,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0e6e(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0e6e;
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8b,0x82,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8c,0x83,0x00);
	clk += Opcodes::push_mem            (aCPU, pc, 0xc0,0x02,0x00);
	clk += Opcodes::push_mem            (aCPU, pc, 0xc0,0x03,0x00);
	clk += Opcodes::push_mem            (aCPU, pc, 0xc0,0x04,0x00);
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x0e,0x13);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0e7b(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0e7b;
	clk += Opcodes::pop_mem             (aCPU, pc, 0xd0,0x04,0x00);
	clk += Opcodes::pop_mem             (aCPU, pc, 0xd0,0x03,0x00);
	clk += Opcodes::pop_mem             (aCPU, pc, 0xd0,0x02,0x00);
	clk += Opcodes::mov_a_imm           (aCPU, pc, 0x74,0x10,0x00);
	clk += Opcodes::add_a_rx            (aCPU, pc, 0x2b,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfb,0x00,0x00);
	clk += Opcodes::clr_a               (aCPU, pc, 0xe4,0x00,0x00);
	clk += Opcodes::addc_a_rx           (aCPU, pc, 0x3c,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfc,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfd,0x00,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7e,0x00,0x00);
	clk += Opcodes::cjne_rx_imm_offset  (aCPU, pc, 0xbd,0x03,0x07);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0e8e(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0e8e;
	clk += Opcodes::cjne_rx_imm_offset  (aCPU, pc, 0xbe,0x00,0x04);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0e91(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0e91;
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7b,0x00,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7c,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0e95(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0e95;
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xda,0xd7,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0e97(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0e97;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x95,0xff);
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x10,0x67);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0e9d(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0e9d;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x0f,0xd9);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0ea0(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0ea0;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x95,0x00);
	clk += Opcodes::mov_dptr_imm        (aCPU, pc, 0x90,0x03,0xfd);
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xf9,0x00,0x00);
	clk += Opcodes::mov_dptr_imm        (aCPU, pc, 0x90,0x03,0x00);
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xf8,0x00,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0eaf(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0eaf;
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7a,0x80,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0eb1(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0eb1;
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0xa0,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x88,0xa0,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xda,0xf2,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0ebf(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0ebf;
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xd9,0xee,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0ec1(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0ec1;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x95,0xff);
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x10,0x67);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0ec7(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0ec7;
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7a,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0ec9(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0ec9;
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7b,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0ecb(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0ecb;
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xdb,0xfe,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0ecd(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0ecd;
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xda,0xfa,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0ecf(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0ecf;
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0ed0(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0ed0;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0xa4,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xae,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xce,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xa4,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x90,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0ede(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0ede;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x80,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x95,0xff);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x94,0xf3);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0eea(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0eea;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x96,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x93,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x08);
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x0e,0xc7);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0ef6(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0ef6;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x18);
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x0e,0xc7);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0efc(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0efc;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x79);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x90,0x0c);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0f02(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0f02;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x9f,0x60);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x9f,0x61);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x9f,0x65);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x9f,0x64);
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0f0f(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0f0f;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x0f,0xcb);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0f12(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0f12;
	clk += Opcodes::clr_bitaddr         (aCPU, pc, 0xc2,0xaf,0x00);
	clk += Opcodes::clr_bitaddr         (aCPU, pc, 0xc2,0xe8,0x00);
	clk += Opcodes::clr_bitaddr         (aCPU, pc, 0xc2,0xea,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xd6,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xd3,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xe2,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0f21(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0f21;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x98,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xfc,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xe4,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x95,0xff);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x80,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x90,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0f33(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0f33;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x18);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x08);
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x0e,0xc7);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0f3c(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0f3c;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x93,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x94,0xff);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0f45(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0f45;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x96,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xa0,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x95,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xce,0x80);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xae,0x02);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0f54(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0f54;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xa4,0x01);
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0xfb,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0f59(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0f59;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x95,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0f5c(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0f5c;
	clk += Opcodes::clr_a               (aCPU, pc, 0xe4,0x00,0x00);
	clk += Opcodes::movc_a_indir_a_dptr (aCPU, pc, 0x93,0x00,0x00);
	clk += Opcodes::jz_offset           (aCPU, pc, 0x60,0x17,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0f60(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0f60;
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::jb_bitaddr_offset   (aCPU, pc, 0x20,0xe7,0x17);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0f64(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0f64;
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xf8,0x00,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x78);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0f68(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0f68;
	clk += Opcodes::clr_a               (aCPU, pc, 0xe4,0x00,0x00);
	clk += Opcodes::movc_a_indir_a_dptr (aCPU, pc, 0x93,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0xa0,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x21,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0f70(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0f70;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x79);
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xd8,0xf3,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0f75(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0f75;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0xe5,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0f77(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0f77;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x95,0xff);
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0f7b(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0f7b;
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0x82,0x00);
	clk += Opcodes::add_a_mem           (aCPU, pc, 0x25,0x58,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xf8,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0f80(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0f80;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x58,0x00);
	clk += Opcodes::xrl_a_rx            (aCPU, pc, 0x68,0x00,0x00);
	clk += Opcodes::jnz_offset          (aCPU, pc, 0x70,0xfb,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0f85(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0f85;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0xd5,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0f87(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0f87;
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7a,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0f89(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0f89;
	clk += Opcodes::cjne_rx_imm_offset  (aCPU, pc, 0xba,0x1f,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0f8c(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0f8c;
	clk += Opcodes::jnc_offset          (aCPU, pc, 0x50,0x0b,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0f8e(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0f8e;
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xea,0x00,0x00);
	clk += Opcodes::add_a_rx            (aCPU, pc, 0x2a,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0xa0,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_rx              (aCPU, pc, 0x0a,0x00,0x00);
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0xf0,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0f99(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0f99;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xa0,0x3f);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0fa1(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0fa1;
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7a,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0fa3(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0fa3;
	clk += Opcodes::cjne_rx_imm_offset  (aCPU, pc, 0xba,0x40,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0fa6(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0fa6;
	clk += Opcodes::jnc_offset          (aCPU, pc, 0x50,0x09,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0fa8(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0fa8;
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8a,0xa0,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_rx              (aCPU, pc, 0x0a,0x00,0x00);
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0xf2,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0fb1(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0fb1;
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0fb2(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0fb2;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x95,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x78);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xa0,0x2d);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x79);
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x0f,0x87);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0fc5(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0fc5;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x0f,0xa1);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0fc8(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0fc8;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x0f,0x87);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0fcb(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0fcb;
	clk += Opcodes::jbc_bitaddr_offset  (aCPU, pc, 0x10,0x07,0x01);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0fce(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0fce;
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0fcf(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0fcf;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x78);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x7a);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x7c);
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0fd9(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0fd9;
	clk += Opcodes::mov_dptr_imm        (aCPU, pc, 0x90,0x03,0xff);
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfa,0x00,0x00);
	clk += Opcodes::mov_dptr_imm        (aCPU, pc, 0x90,0x03,0xfe);
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_dptr_imm        (aCPU, pc, 0x90,0x03,0xfc);
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfb,0x00,0x00);
	clk += Opcodes::jb_bitaddr_offset   (aCPU, pc, 0x20,0x07,0x1f);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0fea(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0fea;
	clk += Opcodes::setb_bitaddr        (aCPU, pc, 0xd2,0x07,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x78);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x7c);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x79);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x7d);
	clk += Opcodes::mov_dptr_imm        (aCPU, pc, 0x90,0x1e,0x18);
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x0f,0x59);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0ffe(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0ffe;
	clk += Opcodes::push_mem            (aCPU, pc, 0xc0,0x02,0x00);
	clk += Opcodes::push_mem            (aCPU, pc, 0xc0,0x03,0x00);
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x0f,0xb2);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1005(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1005;
	clk += Opcodes::pop_mem             (aCPU, pc, 0xd0,0x03,0x00);
	clk += Opcodes::pop_mem             (aCPU, pc, 0xd0,0x02,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1009(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1009;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x95,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x78);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xa0,0x36);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x79);
	clk += Opcodes::mov_a_imm           (aCPU, pc, 0x74,0xe0,0x00);
	clk += Opcodes::anl_a_rx            (aCPU, pc, 0x5a,0x00,0x00);
	clk += Opcodes::xrl_a_imm           (aCPU, pc, 0x64,0xc8,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0xa0,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x78);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xa0,0x2b);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x79);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xa0,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8b,0xa0,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xa0,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xa0,0x7f);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x78);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xa0,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x80,0x01);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xa0,0x2c);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x79);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x95,0xff);
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1067(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1067;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x79);
	clk += Opcodes::mov_dptr_imm        (aCPU, pc, 0x90,0x1e,0x66);
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x0f,0x59);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1070(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1070;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x7b);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x48,0x00);
	clk += Opcodes::orl_mem_imm         (aCPU, pc, 0x43,0x55,0x01);
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1079(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1079;
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xeb,0x00,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0x03,0x00);
	clk += Opcodes::jz_offset           (aCPU, pc, 0x60,0x36,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_107e(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x107e;
	clk += Opcodes::dec_a               (aCPU, pc, 0x14,0x00,0x00);
	clk += Opcodes::jz_offset           (aCPU, pc, 0x60,0x23,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1081(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1081;
	clk += Opcodes::dec_a               (aCPU, pc, 0x14,0x00,0x00);
	clk += Opcodes::jz_offset           (aCPU, pc, 0x60,0x10,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1084(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1084;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x84,0x00);
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0xda,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x82,0x00);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x85,0x00);
	clk += Opcodes::addc_a_imm          (aCPU, pc, 0x34,0xff,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0x03,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x83,0x00);
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x2e,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1094(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1094;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x84,0x00);
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0xdc,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x82,0x00);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x85,0x00);
	clk += Opcodes::addc_a_imm          (aCPU, pc, 0x34,0xff,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0x03,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x83,0x00);
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x1e,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_10a4(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x10a4;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x84,0x00);
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0xfc,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x82,0x00);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x85,0x00);
	clk += Opcodes::addc_a_imm          (aCPU, pc, 0x34,0xff,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0x03,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x83,0x00);
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x0e,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_10b4(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x10b4;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x84,0x00);
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0xfe,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x82,0x00);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x85,0x00);
	clk += Opcodes::addc_a_imm          (aCPU, pc, 0x34,0xff,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0x03,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x83,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_10c2(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x10c2;
	clk += Opcodes::inc_rx              (aCPU, pc, 0x09,0x00,0x00);
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xec,0x00,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0x0f,0x00);
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0xf9,0x00);
	clk += Opcodes::clr_c               (aCPU, pc, 0xc3,0x00,0x00);
	clk += Opcodes::rlc_a               (aCPU, pc, 0x33,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfd,0x00,0x00);
	clk += Opcodes::jb_bitaddr_offset   (aCPU, pc, 0x20,0xe7,0x21);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_10ce(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x10ce;
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::add_a_rx            (aCPU, pc, 0x2d,0x00,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x92,0x01);
	clk += Opcodes::movx_indir_dptr_a   (aCPU, pc, 0xf0,0x00,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x92,0x00);
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::jnc_offset          (aCPU, pc, 0x50,0x02,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_10dd(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x10dd;
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0x02,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_10df(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x10df;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x92,0x01);
	clk += Opcodes::movx_indir_dptr_a   (aCPU, pc, 0xf0,0x00,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x92,0x00);
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xd9,0xe5,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_10e9(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x10e9;
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7d,0x00,0x00);
	clk += Opcodes::mov_dptr_imm        (aCPU, pc, 0x90,0x11,0xad);
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_10ef(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x10ef;
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::add_a_rx            (aCPU, pc, 0x2d,0x00,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x92,0x01);
	clk += Opcodes::movx_indir_dptr_a   (aCPU, pc, 0xf0,0x00,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x92,0x00);
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::jc_offset           (aCPU, pc, 0x40,0x02,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_10fe(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x10fe;
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0xfe,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1100(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1100;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x92,0x01);
	clk += Opcodes::movx_indir_dptr_a   (aCPU, pc, 0xf0,0x00,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x92,0x00);
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xd9,0xe5,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_110a(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x110a;
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7d,0x00,0x00);
	clk += Opcodes::mov_dptr_imm        (aCPU, pc, 0x90,0x11,0xad);
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1110(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1110;
	clk += Opcodes::push_mem            (aCPU, pc, 0xc0,0xe0,0x00);
	clk += Opcodes::push_mem            (aCPU, pc, 0xc0,0x82,0x00);
	clk += Opcodes::push_mem            (aCPU, pc, 0xc0,0x83,0x00);
	clk += Opcodes::push_mem            (aCPU, pc, 0xc0,0x92,0x00);
	clk += Opcodes::push_mem            (aCPU, pc, 0xc0,0x84,0x00);
	clk += Opcodes::push_mem            (aCPU, pc, 0xc0,0x85,0x00);
	clk += Opcodes::push_mem            (aCPU, pc, 0xc0,0xd0,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xd0,0x08);
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0x56,0x84);
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0x57,0x85);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1127(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1127;
	clk += Opcodes::jb_bitaddr_offset   (aCPU, pc, 0x20,0x08,0x0a);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_112a(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x112a;
	clk += Opcodes::setb_bitaddr        (aCPU, pc, 0xd2,0x08,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7d,0x00,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x84,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x85,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1134(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1134;
	clk += Opcodes::clr_bitaddr         (aCPU, pc, 0xc2,0xe9,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xe7,0x60);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1139(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1139;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xe7,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_113c(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x113c;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0xe6,0x00);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xe2,0xfb);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1141(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1141;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0xe7,0x00);
	clk += Opcodes::orl_a_imm           (aCPU, pc, 0x44,0xf1,0x00);
	clk += Opcodes::inc_a               (aCPU, pc, 0x04,0x00,0x00);
	clk += Opcodes::jnz_offset          (aCPU, pc, 0x70,0x0c,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1148(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1148;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0xe6,0x00);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xe2,0xfb);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_114d(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x114d;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0xe7,0x00);
	clk += Opcodes::setb_bitaddr        (aCPU, pc, 0xd2,0xe9,0x00);
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x13,0xae);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1154(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1154;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0xe6,0x00);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xe2,0xfb);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1159(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1159;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0xe7,0x00);
	clk += Opcodes::setb_bitaddr        (aCPU, pc, 0xd2,0xe9,0x00);
	clk += Opcodes::jz_offset           (aCPU, pc, 0x60,0x06,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_115f(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x115f;
	clk += Opcodes::rl_a                (aCPU, pc, 0x23,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xff,0x00,0x00);
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0xbf,0x00);
	clk += Opcodes::jnc_offset          (aCPU, pc, 0x50,0x11,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1165(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1165;
	clk += Opcodes::clr_bitaddr         (aCPU, pc, 0xc2,0x08,0x00);
	clk += Opcodes::clr_bitaddr         (aCPU, pc, 0xc2,0xe9,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xe7,0xe2);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_116c(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x116c;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0xe6,0x00);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xe2,0xfb);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1171(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1171;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0xe7,0x00);
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x13,0x1f);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1176(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1176;
	clk += Opcodes::inc_a               (aCPU, pc, 0x04,0x00,0x00);
	clk += Opcodes::jz_offset           (aCPU, pc, 0x60,0x02,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1179(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1179;
	clk += Opcodes::clr_bitaddr         (aCPU, pc, 0xc2,0x08,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_117b(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x117b;
	clk += Opcodes::clr_bitaddr         (aCPU, pc, 0xc2,0xe9,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xe7,0x61);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1180(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1180;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xe7,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1183(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1183;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0xe6,0x00);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xe2,0xfb);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1188(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1188;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0xe7,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x92,0x00);
	clk += Opcodes::mov_dptr_imm        (aCPU, pc, 0x90,0x11,0xad);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1190(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1190;
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xef,0x00,0x00);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xe0,0x04);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1194(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1194;
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xee,0x00,0x00);
	clk += Opcodes::swap_a              (aCPU, pc, 0xc4,0x00,0x00);
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x0a,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1198(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1198;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0xe6,0x00);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xe2,0xfb);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_119d(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x119d;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0xe7,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xe7,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_11a2(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x11a2;
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfe,0x00,0x00);
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xed,0x00,0x00);
	clk += Opcodes::jmp_indir_a_dptr    (aCPU, pc, 0x73,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_11a5(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x11a5;
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfc,0x00,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x79,0x00,0x00);
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x10,0x79);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_11ab(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x11ab;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x37,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_11ad(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x11ad;
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xee,0x00,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0x0c,0x00);
	clk += Opcodes::jnz_offset          (aCPU, pc, 0x70,0x09,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_11b2(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x11b2;
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8e,0x09,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7d,0x71,0x00);
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xdf,0xd8,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_11b8(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x11b8;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x13,0x18);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_11bb(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x11bb;
	clk += Opcodes::cjne_a_imm_offset   (aCPU, pc, 0xb4,0x04,0x0e);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_11be(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x11be;
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8e,0x0b,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7c,0x07,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x79,0x00,0x00);
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x10,0x79);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_11c7(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x11c7;
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xdf,0xc7,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_11c9(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x11c9;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x13,0x18);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_11cc(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x11cc;
	clk += Opcodes::cjne_a_imm_offset   (aCPU, pc, 0xb4,0x08,0x09);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_11cf(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x11cf;
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8e,0x0b,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7d,0x3c,0x00);
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xdf,0xbb,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_11d5(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x11d5;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x13,0x18);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_11d8(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x11d8;
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xee,0x00,0x00);
	clk += Opcodes::rr_a                (aCPU, pc, 0x03,0x00,0x00);
	clk += Opcodes::rr_a                (aCPU, pc, 0x03,0x00,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0xc0,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfa,0x00,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7b,0x00,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7c,0x07,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7d,0x45,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_11e4(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x11e4;
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xdf,0xaa,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_11e6(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x11e6;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x13,0x18);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_11e9(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x11e9;
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xee,0x00,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0x0f,0x00);
	clk += Opcodes::cjne_a_imm_offset   (aCPU, pc, 0xb4,0x07,0xb6);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_11ef(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x11ef;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x12,0xd6);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_11f2(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x11f2;
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xee,0x00,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0x0f,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xf9,0x00,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7d,0x4d,0x00);
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0xea,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_11fa(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x11fa;
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xee,0x00,0x00);
	clk += Opcodes::swap_a              (aCPU, pc, 0xc4,0x00,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0xf0,0x00);
	clk += Opcodes::orl_mem_a           (aCPU, pc, 0x42,0x09,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7d,0x57,0x00);
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0xe0,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1204(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1204;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x92,0x01);
	clk += Opcodes::clr_c               (aCPU, pc, 0xc3,0x00,0x00);
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xe9,0x00,0x00);
	clk += Opcodes::rlc_a               (aCPU, pc, 0x33,0x00,0x00);
	clk += Opcodes::movx_indir_dptr_a   (aCPU, pc, 0xf0,0x00,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xee,0x00,0x00);
	clk += Opcodes::rlc_a               (aCPU, pc, 0x33,0x00,0x00);
	clk += Opcodes::rlc_a               (aCPU, pc, 0x33,0x00,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0x3e,0x00);
	clk += Opcodes::orl_a_rx            (aCPU, pc, 0x4a,0x00,0x00);
	clk += Opcodes::movx_indir_dptr_a   (aCPU, pc, 0xf0,0x00,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::anl_mem_imm         (aCPU, pc, 0x53,0x85,0x03);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x92,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7d,0x00,0x00);
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0xc6,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_121e(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x121e;
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xee,0x00,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0x0c,0x00);
	clk += Opcodes::jz_offset           (aCPU, pc, 0x60,0x09,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1223(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1223;
	clk += Opcodes::anl_mem_imm         (aCPU, pc, 0x53,0x09,0x0f);
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x10,0x79);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1229(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1229;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x11,0xad);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_122c(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x122c;
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xe9,0x00,0x00);
	clk += Opcodes::jb_bitaddr_offset   (aCPU, pc, 0x20,0xe1,0x1f);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1230(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1230;
	clk += Opcodes::rrc_a               (aCPU, pc, 0x13,0x00,0x00);
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xee,0x00,0x00);
	clk += Opcodes::rlc_a               (aCPU, pc, 0x33,0x00,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0x07,0x00);
	clk += Opcodes::inc_a               (aCPU, pc, 0x04,0x00,0x00);
	clk += Opcodes::rl_a                (aCPU, pc, 0x23,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xf9,0x00,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x92,0x01);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x84,0x00);
	clk += Opcodes::add_a_rx            (aCPU, pc, 0x29,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x84,0x00);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x85,0x00);
	clk += Opcodes::addc_a_imm          (aCPU, pc, 0x34,0x00,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0x03,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x85,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x92,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7d,0x00,0x00);
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x95,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_124f(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x124f;
	clk += Opcodes::jb_bitaddr_offset   (aCPU, pc, 0x20,0xe0,0x0b);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1252(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1252;
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xee,0x00,0x00);
	clk += Opcodes::swap_a              (aCPU, pc, 0xc4,0x00,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0x30,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xf9,0x00,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7d,0xae,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1259(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1259;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x89,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_125b(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x125b;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x6d,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_125d(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x125d;
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xee,0x00,0x00);
	clk += Opcodes::jb_bitaddr_offset   (aCPU, pc, 0x20,0xe1,0x27);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1261(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1261;
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xee,0x00,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0x01,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfa,0x00,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7d,0xbc,0x00);
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0xf0,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1269(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1269;
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xee,0x00,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0x0f,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xf9,0x00,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7d,0xc4,0x00);
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0xe8,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1271(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1271;
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xee,0x00,0x00);
	clk += Opcodes::swap_a              (aCPU, pc, 0xc4,0x00,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0xf0,0x00);
	clk += Opcodes::orl_a_rx            (aCPU, pc, 0x49,0x00,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x92,0x01);
	clk += Opcodes::clr_c               (aCPU, pc, 0xc3,0x00,0x00);
	clk += Opcodes::rlc_a               (aCPU, pc, 0x33,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x84,0x00);
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xea,0x00,0x00);
	clk += Opcodes::rlc_a               (aCPU, pc, 0x33,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x85,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x92,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7d,0x00,0x00);
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0xd1,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1288(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1288;
	clk += Opcodes::jb_bitaddr_offset   (aCPU, pc, 0x20,0xe0,0x3b);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_128b(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x128b;
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7d,0xe2,0x00);
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0xca,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_128f(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x128f;
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xee,0x00,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0x0f,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xf9,0x00,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7d,0xea,0x00);
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0xc2,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1297(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1297;
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xee,0x00,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0x0f,0x00);
	clk += Opcodes::swap_a              (aCPU, pc, 0xc4,0x00,0x00);
	clk += Opcodes::orl_mem_a           (aCPU, pc, 0x42,0x09,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7d,0xf4,0x00);
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0xb8,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_12a1(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x12a1;
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xee,0x00,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0x0f,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfa,0x00,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7d,0xfc,0x00);
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0xb0,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_12a9(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x12a9;
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xee,0x00,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0x0f,0x00);
	clk += Opcodes::swap_a              (aCPU, pc, 0xc4,0x00,0x00);
	clk += Opcodes::orl_mem_a           (aCPU, pc, 0x42,0x0a,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x92,0x01);
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xe9,0x00,0x00);
	clk += Opcodes::movx_indir_dptr_a   (aCPU, pc, 0xf0,0x00,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xea,0x00,0x00);
	clk += Opcodes::movx_indir_dptr_a   (aCPU, pc, 0xf0,0x00,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::anl_mem_imm         (aCPU, pc, 0x53,0x85,0x03);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x92,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7b,0x00,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7c,0x07,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7d,0x00,0x00);
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x93,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_12c6(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x12c6;
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7d,0x00,0x00);
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x29,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_12ca(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x12ca;
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xee,0x00,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0x0f,0x00);
	clk += Opcodes::orl_a_rx            (aCPU, pc, 0x49,0x00,0x00);
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0x04,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xf9,0x00,0x00);
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x10,0x79);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_12d4(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x12d4;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x83,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_12d6(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x12d6;
	clk += Opcodes::anl_mem_imm         (aCPU, pc, 0x53,0x0b,0x03);
	clk += Opcodes::cjne_rx_imm_offset  (aCPU, pc, 0xbb,0x00,0x15);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_12dc(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x12dc;
	clk += Opcodes::clr_bitaddr         (aCPU, pc, 0xc2,0x8c,0x00);
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0xe7,0x8a);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_12e1(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x12e1;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xe7,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_12e4(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x12e4;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0xe6,0x00);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xe2,0xfb);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_12e9(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x12e9;
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0xe7,0x8c);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_12ec(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x12ec;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xe7,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_12ef(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x12ef;
	clk += Opcodes::setb_bitaddr        (aCPU, pc, 0xd2,0x8c,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_12f1(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x12f1;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x25,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_12f3(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x12f3;
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xef,0x00,0x00);
	clk += Opcodes::dec_a               (aCPU, pc, 0x14,0x00,0x00);
	clk += Opcodes::clr_c               (aCPU, pc, 0xc3,0x00,0x00);
	clk += Opcodes::rrc_a               (aCPU, pc, 0x13,0x00,0x00);
	clk += Opcodes::jz_offset           (aCPU, pc, 0x60,0x1c,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_12f9(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x12f9;
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xff,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_12fa(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x12fa;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x62,0x00);
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0x74,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xf8,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_12ff(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x12ff;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0xe6,0x00);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xe2,0xfb);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1304(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1304;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0xe7,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xe7,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1309(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1309;
	clk += Opcodes::mov_indir_rx_a      (aCPU, pc, 0xf6,0x00,0x00);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x62,0x00);
	clk += Opcodes::inc_a               (aCPU, pc, 0x04,0x00,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0x3f,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x62,0x00);
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xdf,0xe7,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1313(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1313;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x03,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1315(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1315;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x62,0xff);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1318(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1318;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0xe6,0x00);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xe2,0xfb);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_131d(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x131d;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0xe7,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_131f(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x131f;
	clk += Opcodes::setb_bitaddr        (aCPU, pc, 0xd2,0xe9,0x00);
	clk += Opcodes::clr_bitaddr         (aCPU, pc, 0xc2,0xe9,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xe7,0x27);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1326(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1326;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xe7,0x40);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1329(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1329;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0xe6,0x00);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xe2,0xfb);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_132e(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x132e;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0xe7,0x00);
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0x59,0x18);
	clk += Opcodes::orl_a_imm           (aCPU, pc, 0x44,0xf1,0x00);
	clk += Opcodes::inc_a               (aCPU, pc, 0x04,0x00,0x00);
	clk += Opcodes::jz_offset           (aCPU, pc, 0x60,0x0c,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1338(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1338;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0xe6,0x00);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xe2,0xfb);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_133d(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x133d;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0xe7,0x00);
	clk += Opcodes::setb_bitaddr        (aCPU, pc, 0xd2,0xe9,0x00);
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x11,0x27);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1344(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1344;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0xe6,0x00);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xe2,0xfb);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1349(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1349;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0xe7,0x00);
	clk += Opcodes::setb_bitaddr        (aCPU, pc, 0xd2,0xe9,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_134d(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x134d;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x55,0x00);
	clk += Opcodes::jz_offset           (aCPU, pc, 0x60,0x5d,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1351(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1351;
	clk += Opcodes::clr_bitaddr         (aCPU, pc, 0xc2,0xe9,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xe7,0xa8);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1356(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1356;
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x78,0x48,0x00);
	clk += Opcodes::clr_c               (aCPU, pc, 0xc3,0x00,0x00);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xe5,0x05);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_135c(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x135c;
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7e,0x0b,0x00);
	clk += Opcodes::setb_c              (aCPU, pc, 0xd3,0x00,0x00);
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x1e,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1361(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1361;
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xe4,0x04);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1364(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1364;
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7e,0x0b,0x00);
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x17,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1368(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1368;
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xe3,0x04);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_136b(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x136b;
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7e,0x09,0x00);
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x10,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_136f(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x136f;
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xe2,0x04);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1372(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1372;
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7e,0x08,0x00);
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x09,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1376(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1376;
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xe1,0x04);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1379(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1379;
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7e,0x04,0x00);
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x02,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_137d(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x137d;
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7e,0x01,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_137f(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x137f;
	clk += Opcodes::mov_mem_indir_rx    (aCPU, pc, 0x86,0xe7,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1381(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1381;
	clk += Opcodes::inc_rx              (aCPU, pc, 0x08,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1382(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1382;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0xe6,0x00);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xe2,0xfb);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1387(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1387;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0xe7,0x00);
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xde,0xf4,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_138b(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x138b;
	clk += Opcodes::jnc_offset          (aCPU, pc, 0x50,0x15,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_138d(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x138d;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x92,0x00);
	clk += Opcodes::mov_dptr_imm        (aCPU, pc, 0x90,0xfc,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7e,0x08,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1395(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1395;
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0xe7,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1398(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1398;
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1399(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1399;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0xe6,0x00);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xe2,0xfb);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_139e(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x139e;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0xe7,0x00);
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xde,0xf3,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_13a2(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x13a2;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x55,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_13a5(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x13a5;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0xe6,0x00);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xe2,0xfb);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_13aa(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x13aa;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0xe7,0x00);
	clk += Opcodes::setb_bitaddr        (aCPU, pc, 0xd2,0xe9,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_13ae(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x13ae;
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0x84,0x56);
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0x85,0x57);
	clk += Opcodes::pop_mem             (aCPU, pc, 0xd0,0xd0,0x00);
	clk += Opcodes::pop_mem             (aCPU, pc, 0xd0,0x85,0x00);
	clk += Opcodes::pop_mem             (aCPU, pc, 0xd0,0x84,0x00);
	clk += Opcodes::pop_mem             (aCPU, pc, 0xd0,0x92,0x00);
	clk += Opcodes::pop_mem             (aCPU, pc, 0xd0,0x83,0x00);
	clk += Opcodes::pop_mem             (aCPU, pc, 0xd0,0x82,0x00);
	clk += Opcodes::pop_mem             (aCPU, pc, 0xd0,0xe0,0x00);
	clk += Opcodes::reti                (aCPU, pc, 0x32,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_13c3(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x13c3;
	clk += Opcodes::mov_rx_mem          (aCPU, pc, 0xaa,0x82,0x00);
	clk += Opcodes::mov_rx_mem          (aCPU, pc, 0xab,0x83,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_13c7(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x13c7;
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8a,0x82,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8b,0x83,0x00);
	clk += Opcodes::clr_a               (aCPU, pc, 0xe4,0x00,0x00);
	clk += Opcodes::movc_a_indir_a_dptr (aCPU, pc, 0x93,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfc,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfd,0x00,0x00);
	clk += Opcodes::jz_offset           (aCPU, pc, 0x60,0x2b,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_13d1(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x13d1;
	clk += Opcodes::inc_rx              (aCPU, pc, 0x0a,0x00,0x00);
	clk += Opcodes::cjne_rx_imm_offset  (aCPU, pc, 0xba,0x00,0x01);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_13d5(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x13d5;
	clk += Opcodes::inc_rx              (aCPU, pc, 0x0b,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_13d6(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x13d6;
	clk += Opcodes::clr_bitaddr         (aCPU, pc, 0xc2,0xe9,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8d,0x04,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8a,0x05,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8b,0x06,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_13de(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x13de;
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8d,0x82,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8e,0x83,0x00);
	clk += Opcodes::clr_a               (aCPU, pc, 0xe4,0x00,0x00);
	clk += Opcodes::movc_a_indir_a_dptr (aCPU, pc, 0x93,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0xe7,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_13e6(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x13e6;
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::mov_rx_mem          (aCPU, pc, 0xad,0x82,0x00);
	clk += Opcodes::mov_rx_mem          (aCPU, pc, 0xae,0x83,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_13eb(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x13eb;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0xe6,0x00);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xe2,0xfb);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_13f0(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x13f0;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0xe7,0x00);
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xdc,0xea,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_13f4(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x13f4;
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8d,0x02,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8e,0x03,0x00);
	clk += Opcodes::setb_bitaddr        (aCPU, pc, 0xd2,0xe9,0x00);
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0xcb,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_13fc(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x13fc;
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_13fd(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x13fd;
	clk += Opcodes::clr_bitaddr         (aCPU, pc, 0xc2,0xe8,0x00);
	clk += Opcodes::setb_bitaddr        (aCPU, pc, 0xd2,0xea,0x00);
	clk += Opcodes::mov_dptr_imm        (aCPU, pc, 0x90,0x1e,0x6a);
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x13,0xc3);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1407(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1407;
	clk += Opcodes::setb_bitaddr        (aCPU, pc, 0xd2,0xb9,0x00);
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_140a(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x140a;
	clk += Opcodes::clr_bitaddr         (aCPU, pc, 0xc2,0xb9,0x00);
	clk += Opcodes::clr_bitaddr         (aCPU, pc, 0xc2,0xe9,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xe7,0x10);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1411(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1411;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xe7,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1414(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1414;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0xe6,0x00);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xe2,0xfb);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1419(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1419;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0xe7,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_141b(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x141b;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0xe6,0x00);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xe2,0xfb);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1420(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1420;
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0xe7,0x82);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1423(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1423;
	clk += Opcodes::setb_bitaddr        (aCPU, pc, 0xd2,0xe9,0x00);
	clk += Opcodes::setb_bitaddr        (aCPU, pc, 0xd2,0xb9,0x00);
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1428(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1428;
	clk += Opcodes::push_mem            (aCPU, pc, 0xc0,0xe0,0x00);
	clk += Opcodes::push_mem            (aCPU, pc, 0xc0,0xd0,0x00);
	clk += Opcodes::push_mem            (aCPU, pc, 0xc0,0x82,0x00);
	clk += Opcodes::push_mem            (aCPU, pc, 0xc0,0x83,0x00);
	clk += Opcodes::push_mem            (aCPU, pc, 0xc0,0x92,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x92,0x00);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0xe1,0x00);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xe0,0x77);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_143a(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x143a;
	clk += Opcodes::jb_bitaddr_offset   (aCPU, pc, 0x20,0xe1,0x6c);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_143d(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x143d;
	clk += Opcodes::mov_dptr_imm        (aCPU, pc, 0x90,0x14,0x43);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x5a,0x00);
	clk += Opcodes::jmp_indir_a_dptr    (aCPU, pc, 0x73,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1443(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1443;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xda,0xa8);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1446(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1446;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x5a,0x08);
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x66,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_144b(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x144b;
	clk += Opcodes::orl_mem_imm         (aCPU, pc, 0x43,0xe2,0x10);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xda,0x31);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1451(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1451;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x5a,0x13);
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x5b,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1456(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1456;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x5a,0x18);
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x56,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_145b(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x145b;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0xda,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x5a,0x1f);
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x4f,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1462(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1462;
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0xda,0x5b);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1465(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1465;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x5a,0x27);
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x47,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_146a(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x146a;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0xda,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x5a,0x2e);
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x40,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1471(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1471;
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0xda,0x5c);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1474(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1474;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x5a,0x36);
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x38,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1479(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1479;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0xda,0x00);
	clk += Opcodes::orl_mem_imm         (aCPU, pc, 0x43,0xe2,0x20);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x5a,0x40);
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x2e,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1483(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1483;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0xda,0x00);
	clk += Opcodes::xrl_a_mem           (aCPU, pc, 0x65,0x4b,0x00);
	clk += Opcodes::jz_offset           (aCPU, pc, 0x60,0x05,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1489(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1489;
	clk += Opcodes::xrl_mem_a           (aCPU, pc, 0x62,0x4b,0x00);
	clk += Opcodes::orl_mem_imm         (aCPU, pc, 0x43,0x55,0x02);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_148e(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x148e;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x5c,0x00);
	clk += Opcodes::xrl_a_mem           (aCPU, pc, 0x65,0x4a,0x00);
	clk += Opcodes::jz_offset           (aCPU, pc, 0x60,0x05,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1494(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1494;
	clk += Opcodes::xrl_mem_a           (aCPU, pc, 0x62,0x4a,0x00);
	clk += Opcodes::orl_mem_imm         (aCPU, pc, 0x43,0x55,0x02);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1499(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1499;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x5b,0x00);
	clk += Opcodes::xrl_a_mem           (aCPU, pc, 0x65,0x49,0x00);
	clk += Opcodes::jz_offset           (aCPU, pc, 0x60,0x05,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_149f(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x149f;
	clk += Opcodes::xrl_mem_a           (aCPU, pc, 0x62,0x49,0x00);
	clk += Opcodes::orl_mem_imm         (aCPU, pc, 0x43,0x55,0x02);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_14a4(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x14a4;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x5a,0x00);
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x08,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_14a9(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x14a9;
	clk += Opcodes::orl_mem_imm         (aCPU, pc, 0x43,0xe2,0x20);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x5a,0x00);
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_14b1(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x14b1;
	clk += Opcodes::pop_mem             (aCPU, pc, 0xd0,0x92,0x00);
	clk += Opcodes::pop_mem             (aCPU, pc, 0xd0,0x83,0x00);
	clk += Opcodes::pop_mem             (aCPU, pc, 0xd0,0x82,0x00);
	clk += Opcodes::pop_mem             (aCPU, pc, 0xd0,0xd0,0x00);
	clk += Opcodes::pop_mem             (aCPU, pc, 0xd0,0xe0,0x00);
	clk += Opcodes::reti                (aCPU, pc, 0x32,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_14bc(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x14bc;
	clk += Opcodes::push_mem            (aCPU, pc, 0xc0,0xe0,0x00);
	clk += Opcodes::push_mem            (aCPU, pc, 0xc0,0xd0,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xd0,0x00);
	clk += Opcodes::push_mem            (aCPU, pc, 0xc0,0x00,0x00);
	clk += Opcodes::push_mem            (aCPU, pc, 0xc0,0x01,0x00);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x8c,0x00);
	clk += Opcodes::jnz_offset          (aCPU, pc, 0x70,0x16,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_14cb(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x14cb;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x8a,0x00);
	clk += Opcodes::addc_a_imm          (aCPU, pc, 0x34,0xf3,0x00);
	clk += Opcodes::jc_offset           (aCPU, pc, 0x40,0x10,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_14d1(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x14d1;
	clk += Opcodes::setb_bitaddr        (aCPU, pc, 0xd2,0x09,0x00);
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0x60,0x5e);
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0x61,0x5f);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x5d,0x12);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xcc,0xf3);
	clk += Opcodes::setb_bitaddr        (aCPU, pc, 0xd2,0xc8,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_14e1(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x14e1;
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x78,0x6c,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_14e3(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x14e3;
	clk += Opcodes::mov_a_indir_rx      (aCPU, pc, 0xe6,0x00,0x00);
	clk += Opcodes::mov_indir_rx_imm    (aCPU, pc, 0x76,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xf9,0x00,0x00);
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xe8,0x00,0x00);
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0x04,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xf8,0x00,0x00);
	clk += Opcodes::mov_a_indir_rx      (aCPU, pc, 0xe6,0x00,0x00);
	clk += Opcodes::mov_indir_rx_mem    (aCPU, pc, 0xa6,0x01,0x00);
	clk += Opcodes::xrl_a_rx            (aCPU, pc, 0x69,0x00,0x00);
	clk += Opcodes::jz_offset           (aCPU, pc, 0x60,0x09,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_14f1(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x14f1;
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xe8,0x00,0x00);
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0xfd,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xf8,0x00,0x00);
	clk += Opcodes::cjne_a_imm_offset   (aCPU, pc, 0xb4,0x70,0xeb);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_14f8(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x14f8;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x1c,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_14fa(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x14fa;
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xe8,0x00,0x00);
	clk += Opcodes::clr_c               (aCPU, pc, 0xc3,0x00,0x00);
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0x4c,0x00);
	clk += Opcodes::subb_a_imm          (aCPU, pc, 0x94,0x70,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xf8,0x00,0x00);
	clk += Opcodes::mov_a_indir_rx      (aCPU, pc, 0xe6,0x00,0x00);
	clk += Opcodes::xrl_a_rx            (aCPU, pc, 0x69,0x00,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0x9f,0x00);
	clk += Opcodes::jz_offset           (aCPU, pc, 0x60,0x05,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1507(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1507;
	clk += Opcodes::xrl_a_indir_rx      (aCPU, pc, 0x66,0x00,0x00);
	clk += Opcodes::mov_indir_rx_a      (aCPU, pc, 0xf6,0x00,0x00);
	clk += Opcodes::orl_mem_imm         (aCPU, pc, 0x43,0x55,0x04);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_150c(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x150c;
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xe8,0x00,0x00);
	clk += Opcodes::clr_c               (aCPU, pc, 0xc3,0x00,0x00);
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0x69,0x00);
	clk += Opcodes::subb_a_imm          (aCPU, pc, 0x94,0x48,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xf8,0x00,0x00);
	clk += Opcodes::cjne_a_imm_offset   (aCPU, pc, 0xb4,0x70,0xcd);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1516(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1516;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x90,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0x80,0x00);
	clk += Opcodes::cjne_a_imm_offset   (aCPU, pc, 0xb4,0x80,0x07);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_151d(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x151d;
	clk += Opcodes::jb_bitaddr_offset   (aCPU, pc, 0x20,0x0f,0x0f);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1520(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1520;
	clk += Opcodes::setb_bitaddr        (aCPU, pc, 0xd2,0x0f,0x00);
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x05,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1524(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1524;
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0x0f,0x08);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1527(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1527;
	clk += Opcodes::clr_bitaddr         (aCPU, pc, 0xc2,0x0f,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1529(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1529;
	clk += Opcodes::xrl_mem_imm         (aCPU, pc, 0x63,0x4c,0x40);
	clk += Opcodes::orl_mem_imm         (aCPU, pc, 0x43,0x55,0x04);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_152f(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x152f;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x58,0x00);
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0x01,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x58,0x00);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x59,0x00);
	clk += Opcodes::addc_a_imm          (aCPU, pc, 0x34,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x59,0x00);
	clk += Opcodes::pop_mem             (aCPU, pc, 0xd0,0x01,0x00);
	clk += Opcodes::pop_mem             (aCPU, pc, 0xd0,0x00,0x00);
	clk += Opcodes::pop_mem             (aCPU, pc, 0xd0,0xd0,0x00);
	clk += Opcodes::pop_mem             (aCPU, pc, 0xd0,0xe0,0x00);
	clk += Opcodes::reti                (aCPU, pc, 0x32,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1544(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1544;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xcc,0xfe);
	clk += Opcodes::setb_bitaddr        (aCPU, pc, 0xd2,0xc8,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x5d,0x10);
	clk += Opcodes::clr_bitaddr         (aCPU, pc, 0xc2,0x0a,0x00);
	clk += Opcodes::clr_bitaddr         (aCPU, pc, 0xc2,0x0b,0x00);
	clk += Opcodes::clr_bitaddr         (aCPU, pc, 0xc2,0x0c,0x00);
	clk += Opcodes::reti                (aCPU, pc, 0x32,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1553(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1553;
	clk += Opcodes::push_mem            (aCPU, pc, 0xc0,0xe0,0x00);
	clk += Opcodes::push_mem            (aCPU, pc, 0xc0,0xd0,0x00);
	clk += Opcodes::jb_bitaddr_offset   (aCPU, pc, 0x20,0x09,0x53);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_155a(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x155a;
	clk += Opcodes::anl_mem_imm         (aCPU, pc, 0x53,0x94,0xcc);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x8b,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x8b,0x00);
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0xff,0x00);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x5f,0x00);
	clk += Opcodes::orl_mem_imm         (aCPU, pc, 0x43,0x94,0x33);
	clk += Opcodes::jb_bitaddr_offset   (aCPU, pc, 0x20,0x0a,0x07);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_156c(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x156c;
	clk += Opcodes::setb_bitaddr        (aCPU, pc, 0xd2,0x0a,0x00);
	clk += Opcodes::anl_mem_imm         (aCPU, pc, 0x53,0x94,0xfc);
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x30,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1573(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1573;
	clk += Opcodes::jb_bitaddr_offset   (aCPU, pc, 0x20,0x0b,0x09);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1576(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1576;
	clk += Opcodes::setb_bitaddr        (aCPU, pc, 0xd2,0x0b,0x00);
	clk += Opcodes::mov_bitaddr_c       (aCPU, pc, 0x92,0x0d,0x00);
	clk += Opcodes::anl_mem_imm         (aCPU, pc, 0x53,0x94,0xee);
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x24,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_157f(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x157f;
	clk += Opcodes::jb_bitaddr_offset   (aCPU, pc, 0x20,0x0c,0x06);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1582(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1582;
	clk += Opcodes::setb_bitaddr        (aCPU, pc, 0xd2,0x0c,0x00);
	clk += Opcodes::mov_bitaddr_c       (aCPU, pc, 0x92,0x0e,0x00);
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x1b,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1588(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1588;
	clk += Opcodes::jb_bitaddr_offset   (aCPU, pc, 0x20,0x0d,0x0d);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_158b(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x158b;
	clk += Opcodes::jb_bitaddr_offset   (aCPU, pc, 0x20,0x0e,0x05);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_158e(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x158e;
	clk += Opcodes::anl_mem_imm         (aCPU, pc, 0x53,0x94,0xcd);
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x10,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1593(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1593;
	clk += Opcodes::anl_mem_imm         (aCPU, pc, 0x53,0x94,0xce);
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x0b,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1598(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1598;
	clk += Opcodes::jb_bitaddr_offset   (aCPU, pc, 0x20,0x0e,0x05);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_159b(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x159b;
	clk += Opcodes::anl_mem_imm         (aCPU, pc, 0x53,0x94,0xdc);
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x03,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_15a0(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x15a0;
	clk += Opcodes::anl_mem_imm         (aCPU, pc, 0x53,0x94,0xec);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_15a3(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x15a3;
	clk += Opcodes::rlc_a               (aCPU, pc, 0x33,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x5f,0x00);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x5e,0x00);
	clk += Opcodes::rlc_a               (aCPU, pc, 0x33,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x5e,0x00);
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x21,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_15ad(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x15ad;
	clk += Opcodes::clr_bitaddr         (aCPU, pc, 0xc2,0x8e,0x00);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x5e,0x00);
	clk += Opcodes::rlc_a               (aCPU, pc, 0x33,0x00,0x00);
	clk += Opcodes::jnc_offset          (aCPU, pc, 0x50,0x06,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_15b4(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x15b4;
	clk += Opcodes::orl_mem_imm         (aCPU, pc, 0x43,0x90,0x33);
	clk += Opcodes::anl_mem_imm         (aCPU, pc, 0x53,0x94,0xcc);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_15ba(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x15ba;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x5f,0x00);
	clk += Opcodes::clr_c               (aCPU, pc, 0xc3,0x00,0x00);
	clk += Opcodes::rlc_a               (aCPU, pc, 0x33,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x5f,0x00);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x5e,0x00);
	clk += Opcodes::rlc_a               (aCPU, pc, 0x33,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x5e,0x00);
	clk += Opcodes::mov_a_imm           (aCPU, pc, 0x74,0x02,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_15c7(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x15c7;
	clk += Opcodes::djnz_mem_offset     (aCPU, pc, 0xd5,0xe0,0xfd);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_15ca(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x15ca;
	clk += Opcodes::nop                 (aCPU, pc, 0x00,0x00,0x00);
	clk += Opcodes::anl_mem_imm         (aCPU, pc, 0x53,0x90,0xcc);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_15ce(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x15ce;
	clk += Opcodes::djnz_mem_offset     (aCPU, pc, 0xd5,0x5d,0x43);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_15d1(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x15d1;
	clk += Opcodes::clr_bitaddr         (aCPU, pc, 0xc2,0xc8,0x00);
	clk += Opcodes::orl_mem_imm         (aCPU, pc, 0x43,0x94,0x33);
	clk += Opcodes::jb_bitaddr_offset   (aCPU, pc, 0x20,0x09,0x22);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_15d9(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x15d9;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x5e,0x00);
	clk += Opcodes::orl_a_imm           (aCPU, pc, 0x44,0xe0,0x00);
	clk += Opcodes::cpl_a               (aCPU, pc, 0xf4,0x00,0x00);
	clk += Opcodes::xrl_a_mem           (aCPU, pc, 0x65,0x5f,0x00);
	clk += Opcodes::jnz_offset          (aCPU, pc, 0x70,0x28,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_15e2(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x15e2;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x5e,0x00);
	clk += Opcodes::swap_a              (aCPU, pc, 0xc4,0x00,0x00);
	clk += Opcodes::rr_a                (aCPU, pc, 0x03,0x00,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0x03,0x00);
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0x6c,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xd0,0x00);
	clk += Opcodes::push_mem            (aCPU, pc, 0xc0,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xf8,0x00,0x00);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x5e,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0x1f,0x00);
	clk += Opcodes::orl_a_imm           (aCPU, pc, 0x44,0x80,0x00);
	clk += Opcodes::mov_indir_rx_a      (aCPU, pc, 0xf6,0x00,0x00);
	clk += Opcodes::pop_mem             (aCPU, pc, 0xd0,0x00,0x00);
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x0f,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_15fb(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x15fb;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x5a,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xe2,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1601(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1601;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xe2,0x01);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1604(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1604;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xe2,0x07);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1607(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1607;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xda,0x30);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_160a(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x160a;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x8b,0xff);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x8d,0xff);
	clk += Opcodes::clr_bitaddr         (aCPU, pc, 0xc2,0x09,0x00);
	clk += Opcodes::setb_bitaddr        (aCPU, pc, 0xd2,0x8e,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1614(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1614;
	clk += Opcodes::clr_bitaddr         (aCPU, pc, 0xc2,0xc6,0x00);
	clk += Opcodes::pop_mem             (aCPU, pc, 0xd0,0xd0,0x00);
	clk += Opcodes::pop_mem             (aCPU, pc, 0xd0,0xe0,0x00);
	clk += Opcodes::reti                (aCPU, pc, 0x32,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_161b(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x161b;
	clk += Opcodes::mov_rx_mem          (aCPU, pc, 0xaa,0x82,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_161d(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x161d;
	clk += Opcodes::clr_bitaddr         (aCPU, pc, 0xc2,0xc2,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8a,0xda,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1621(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1621;
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xc2,0xfd);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1624(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1624;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0xe1,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfb,0x00,0x00);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xe0,0xf3);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_162a(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x162a;
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xeb,0x00,0x00);
	clk += Opcodes::jb_bitaddr_offset   (aCPU, pc, 0x20,0xe1,0x2e);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_162e(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x162e;
	clk += Opcodes::mov_rx_mem          (aCPU, pc, 0xaa,0x1c,0x00);
	clk += Opcodes::mov_rx_mem          (aCPU, pc, 0xab,0x1d,0x00);
	clk += Opcodes::mov_rx_mem          (aCPU, pc, 0xac,0x1e,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1634(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1634;
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8c,0x05,0x00);
	clk += Opcodes::dec_rx              (aCPU, pc, 0x1c,0x00,0x00);
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xed,0x00,0x00);
	clk += Opcodes::jz_offset           (aCPU, pc, 0x60,0x22,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_163a(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x163a;
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8a,0x05,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8b,0x06,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_163e(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x163e;
	clk += Opcodes::clr_bitaddr         (aCPU, pc, 0xc2,0xc2,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8d,0x82,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8e,0x83,0x00);
	clk += Opcodes::clr_a               (aCPU, pc, 0xe4,0x00,0x00);
	clk += Opcodes::movc_a_indir_a_dptr (aCPU, pc, 0x93,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0xda,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1648(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1648;
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xc2,0xfd);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_164b(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x164b;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0xe1,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xff,0x00,0x00);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xe0,0xed);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1651(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1651;
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xef,0x00,0x00);
	clk += Opcodes::jb_bitaddr_offset   (aCPU, pc, 0x20,0xe1,0x07);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1655(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1655;
	clk += Opcodes::inc_rx              (aCPU, pc, 0x0a,0x00,0x00);
	clk += Opcodes::cjne_rx_imm_offset  (aCPU, pc, 0xba,0x00,0xdb);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1659(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1659;
	clk += Opcodes::inc_rx              (aCPU, pc, 0x0b,0x00,0x00);
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0xd8,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_165c(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x165c;
	clk += Opcodes::orl_mem_imm         (aCPU, pc, 0x43,0xe2,0x20);
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1660(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1660;
	clk += Opcodes::orl_mem_imm         (aCPU, pc, 0x43,0xb9,0x10);
	clk += Opcodes::orl_mem_imm         (aCPU, pc, 0x43,0x90,0x0c);
	clk += Opcodes::anl_mem_imm         (aCPU, pc, 0x53,0x94,0xf3);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xe2,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_166c(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x166c;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xe2,0x01);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_166f(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x166f;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xe2,0x07);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1672(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1672;
	clk += Opcodes::orl_mem_imm         (aCPU, pc, 0x43,0xa6,0x04);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xe1,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1678(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1678;
	clk += Opcodes::orl_mem_imm         (aCPU, pc, 0x43,0xc8,0x40);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xc0,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x1c,0x8d);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x1d,0x1e);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x1e,0x02);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x82,0x30);
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x16,0x1b);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_168d(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x168d;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x1c,0x8f);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x1d,0x1e);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x1e,0x02);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x82,0x30);
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x16,0x1b);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_169c(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x169c;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xc0,0x00);
	clk += Opcodes::orl_mem_imm         (aCPU, pc, 0x43,0xa9,0x04);
	clk += Opcodes::setb_bitaddr        (aCPU, pc, 0xd2,0xba,0x00);
	clk += Opcodes::setb_bitaddr        (aCPU, pc, 0xd2,0x8c,0x00);
	clk += Opcodes::setb_bitaddr        (aCPU, pc, 0xd2,0xa9,0x00);
	clk += Opcodes::orl_mem_imm         (aCPU, pc, 0x43,0x89,0x50);
	clk += Opcodes::orl_mem_imm         (aCPU, pc, 0x43,0xa9,0x08);
	clk += Opcodes::orl_mem_imm         (aCPU, pc, 0x43,0xb9,0x08);
	clk += Opcodes::setb_bitaddr        (aCPU, pc, 0xd2,0xab,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xcb,0xff);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xca,0xf3);
	clk += Opcodes::orl_mem_imm         (aCPU, pc, 0x43,0xc8,0x10);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xcd,0xff);
	clk += Opcodes::orl_mem_imm         (aCPU, pc, 0x43,0xa9,0x20);
	clk += Opcodes::orl_mem_imm         (aCPU, pc, 0x43,0xb9,0x20);
	clk += Opcodes::setb_bitaddr        (aCPU, pc, 0xd2,0xad,0x00);
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x14,0x0a);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_16ca(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x16ca;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x82,0x00);
	clk += Opcodes::orl_a_imm           (aCPU, pc, 0x44,0xe0,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x60,0x00);
	clk += Opcodes::cpl_a               (aCPU, pc, 0xf4,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfa,0x00,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8a,0x61,0x00);
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_16d5(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x16d5;
	clk += Opcodes::mov_a_imm           (aCPU, pc, 0x74,0x05,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_16d7(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x16d7;
	clk += Opcodes::djnz_mem_offset     (aCPU, pc, 0xd5,0xe0,0xfd);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_16da(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x16da;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0xd3,0x00);
	clk += Opcodes::jb_bitaddr_offset   (aCPU, pc, 0x20,0xe6,0xfb);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_16df(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x16df;
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_16e0(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x16e0;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x59,0x00);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xe2,0x08);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_16e5(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x16e5;
	clk += Opcodes::jb_bitaddr_offset   (aCPU, pc, 0x20,0x10,0x01);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_16e8(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x16e8;
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_16e9(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x16e9;
	clk += Opcodes::clr_bitaddr         (aCPU, pc, 0xc2,0x10,0x00);
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x06,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_16ed(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x16ed;
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0x10,0x01);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_16f0(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x16f0;
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_16f1(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x16f1;
	clk += Opcodes::setb_bitaddr        (aCPU, pc, 0xd2,0x10,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_16f3(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x16f3;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x16,0xd5);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_16f6(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x16f6;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x80,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x93,0x01);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xd2,0x03);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xd1,0xc0);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xd3,0x81);
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x16,0xd5);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1708(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1708;
	clk += Opcodes::clr_bitaddr         (aCPU, pc, 0xc2,0xb9,0x00);
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0xd5,0x51);
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0xd4,0x52);
	clk += Opcodes::orl_mem_imm         (aCPU, pc, 0x43,0x55,0x10);
	clk += Opcodes::setb_bitaddr        (aCPU, pc, 0xd2,0xb9,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x93,0x00);
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1719(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1719;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x80,0x2a);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x7b);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x80,0x54);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xa0,0xaa);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x59);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x79);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x80,0x14);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x7b);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x80,0xaa);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xa0,0x55);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x59);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x79);
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_173e(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x173e;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x17,0x19);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1741(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1741;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x80,0x2a);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x7b);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x80,0x54);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xa0,0xa0);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x59);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x79);
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1754(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1754;
	clk += Opcodes::clr_bitaddr         (aCPU, pc, 0xc2,0x11,0x00);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x1a,0x00);
	clk += Opcodes::jz_offset           (aCPU, pc, 0x60,0x01,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_175a(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x175a;
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_175b(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x175b;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x1b,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0x07,0x00);
	clk += Opcodes::jz_offset           (aCPU, pc, 0x60,0x01,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1761(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1761;
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1762(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1762;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x79);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x95,0x00);
	clk += Opcodes::clr_bitaddr         (aCPU, pc, 0xc2,0xb9,0x00);
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x17,0x19);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_176d(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x176d;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x80,0x2a);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x7b);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x80,0x54);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xa0,0x80);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x59);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x79);
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x17,0x19);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1782(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1782;
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0x1b,0x80);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x7d);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x80,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xa0,0x30);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x59);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x79);
	clk += Opcodes::setb_bitaddr        (aCPU, pc, 0xd2,0xb9,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x95,0xff);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x39);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_179c(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x179c;
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xa7,0xfd);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_179f(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x179f;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x17,0xa2);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_17a2(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x17a2;
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0x1b,0x80);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x3d);
	clk += Opcodes::mov_c_bitaddr       (aCPU, pc, 0xa2,0xa7,0x00);
	clk += Opcodes::mov_bitaddr_c       (aCPU, pc, 0x92,0x12,0x00);
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_17ad(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x17ad;
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0x12,0x05);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_17b0(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x17b0;
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xa7,0xfd);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_17b3(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x17b3;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x03,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_17b5(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x17b5;
	clk += Opcodes::jb_bitaddr_offset   (aCPU, pc, 0x20,0xa7,0xfd);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_17b8(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x17b8;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x79);
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_17bc(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x17bc;
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0x12,0x05);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_17bf(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x17bf;
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xa7,0xfd);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_17c2(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x17c2;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x03,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_17c4(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x17c4;
	clk += Opcodes::jb_bitaddr_offset   (aCPU, pc, 0x20,0xa7,0xfd);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_17c7(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x17c7;
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0x11,0x03);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_17ca(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x17ca;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x17,0x54);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_17cd(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x17cd;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x79);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x95,0x00);
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x17,0x3e);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_17d6(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x17d6;
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0x1a,0x80);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x7b);
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0x19,0x80);
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0x83,0xa0);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x59);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x79);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x95,0xff);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x39);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x19,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x19,0x00);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x82,0x00);
	clk += Opcodes::rlc_a               (aCPU, pc, 0x33,0x00,0x00);
	clk += Opcodes::mov_bitaddr_c       (aCPU, pc, 0x92,0x12,0x00);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x83,0x00);
	clk += Opcodes::rlc_a               (aCPU, pc, 0x33,0x00,0x00);
	clk += Opcodes::jnc_offset          (aCPU, pc, 0x50,0x05,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_17fc(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x17fc;
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xa7,0xfd);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_17ff(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x17ff;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x03,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1801(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1801;
	clk += Opcodes::jb_bitaddr_offset   (aCPU, pc, 0x20,0xa7,0xfd);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1804(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1804;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x79);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x95,0x00);
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x17,0x3e);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_180d(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x180d;
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0x1a,0x80);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x7b);
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0x19,0x80);
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0x82,0xa0);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x59);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x79);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x95,0xff);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x39);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x19,0x00);
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0x02,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x19,0x00);
	clk += Opcodes::jz_offset           (aCPU, pc, 0x60,0x01,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_182d(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x182d;
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_182e(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x182e;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x1a,0x00);
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0x02,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x1a,0x00);
	clk += Opcodes::jz_offset           (aCPU, pc, 0x60,0x01,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1836(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1836;
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1837(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1837;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x1b,0x00);
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0x02,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x1b,0x00);
	clk += Opcodes::setb_bitaddr        (aCPU, pc, 0xd2,0x11,0x00);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0x12,0x05);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1842(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1842;
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xa7,0xfd);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1845(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1845;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x03,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1847(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1847;
	clk += Opcodes::jb_bitaddr_offset   (aCPU, pc, 0x20,0xa7,0xfd);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_184a(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x184a;
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x80,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x7d);
	clk += Opcodes::mov_c_bitaddr       (aCPU, pc, 0xa2,0xa7,0x00);
	clk += Opcodes::mov_bitaddr_c       (aCPU, pc, 0x92,0x12,0x00);
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1854(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1854;
	clk += Opcodes::push_mem            (aCPU, pc, 0xc0,0x02,0x00);
	clk += Opcodes::push_mem            (aCPU, pc, 0xc0,0x00,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x78,0xb4,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7a,0x22,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_185c(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x185c;
	clk += Opcodes::mov_indir_rx_imm    (aCPU, pc, 0x76,0x00,0x00);
	clk += Opcodes::inc_rx              (aCPU, pc, 0x08,0x00,0x00);
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xda,0xfb,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1861(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1861;
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0x62,0x65);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x6a,0xc1);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x6b,0x18);
	clk += Opcodes::pop_mem             (aCPU, pc, 0xd0,0x00,0x00);
	clk += Opcodes::pop_mem             (aCPU, pc, 0xd0,0x02,0x00);
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_186f(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x186f;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x65,0x00);
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0x62,0x01);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1874(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1874;
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1875(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1875;
	clk += Opcodes::setb_bitaddr        (aCPU, pc, 0xd2,0x00,0x00);
	clk += Opcodes::mov_a_imm           (aCPU, pc, 0x74,0xff,0x00);
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0x62,0x02);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_187c(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x187c;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x03,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_187e(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x187e;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x18,0x8d);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1881(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1881;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x62,0x00);
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x18,0x54);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1887(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1887;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x50,0x00);
	clk += Opcodes::orl_mem_imm         (aCPU, pc, 0x43,0x55,0x20);
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_188d(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x188d;
	clk += Opcodes::mov_a_imm           (aCPU, pc, 0x74,0x03,0x00);
	clk += Opcodes::add_a_mem           (aCPU, pc, 0x25,0x58,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x69,0x00);
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x17,0xa2);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1896(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1896;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x58,0x00);
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0x69,0x02);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_189b(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x189b;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x05,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_189d(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x189d;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x65,0x00);
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0x62,0x03);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_18a2(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x18a2;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x17,0xad);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_18a5(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x18a5;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x65,0x00);
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0x74,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xf8,0x00,0x00);
	clk += Opcodes::mov_mem_indir_rx    (aCPU, pc, 0x86,0x68,0x00);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x65,0x00);
	clk += Opcodes::inc_a               (aCPU, pc, 0x04,0x00,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0x3f,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x65,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x50,0x00);
	clk += Opcodes::orl_mem_imm         (aCPU, pc, 0x43,0x55,0x08);
	clk += Opcodes::clr_a               (aCPU, pc, 0xe4,0x00,0x00);
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0x6a,0x82);
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0x6b,0x83);
	clk += Opcodes::jmp_indir_a_dptr    (aCPU, pc, 0x73,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_18c0(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x18c0;
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_18c1(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x18c1;
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0x68,0x66);
	clk += Opcodes::mov_a_imm           (aCPU, pc, 0x74,0xe0,0x00);
	clk += Opcodes::anl_a_mem           (aCPU, pc, 0x55,0x66,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfa,0x00,0x00);
	clk += Opcodes::jz_offset           (aCPU, pc, 0x60,0x2b,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_18cb(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x18cb;
	clk += Opcodes::cjne_rx_imm_offset  (aCPU, pc, 0xba,0x20,0x02);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_18ce(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x18ce;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x2f,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_18d0(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x18d0;
	clk += Opcodes::cjne_rx_imm_offset  (aCPU, pc, 0xba,0x40,0x02);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_18d3(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x18d3;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x33,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_18d5(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x18d5;
	clk += Opcodes::cjne_rx_imm_offset  (aCPU, pc, 0xba,0x60,0x03);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_18d8(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x18d8;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x19,0x1f);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_18db(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x18db;
	clk += Opcodes::cjne_rx_imm_offset  (aCPU, pc, 0xba,0x80,0x03);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_18de(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x18de;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x19,0x2e);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_18e1(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x18e1;
	clk += Opcodes::cjne_rx_imm_offset  (aCPU, pc, 0xba,0xa0,0x03);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_18e4(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x18e4;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x19,0x3d);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_18e7(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x18e7;
	clk += Opcodes::cjne_rx_imm_offset  (aCPU, pc, 0xba,0xc0,0x03);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_18ea(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x18ea;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x19,0x4c);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_18ed(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x18ed;
	clk += Opcodes::cjne_rx_imm_offset  (aCPU, pc, 0xba,0xe0,0x03);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_18f0(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x18f0;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x19,0x58);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_18f3(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x18f3;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x19,0x69);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_18f6(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x18f6;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x6a,0x8f);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x6b,0x19);
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x18,0x96);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_18ff(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x18ff;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x6a,0xba);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x6b,0x19);
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x18,0x96);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1908(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1908;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x68,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0x0f,0x00);
	clk += Opcodes::rl_a                (aCPU, pc, 0x23,0x00,0x00);
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0xb4,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xf8,0x00,0x00);
	clk += Opcodes::mov_mem_indir_rx    (aCPU, pc, 0x86,0x82,0x00);
	clk += Opcodes::inc_rx              (aCPU, pc, 0x08,0x00,0x00);
	clk += Opcodes::mov_mem_indir_rx    (aCPU, pc, 0x86,0x83,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x78,0x40,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1917(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1917;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x17,0xbc);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_191a(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x191a;
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xd8,0xfb,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_191c(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x191c;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x18,0x96);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_191f(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x191f;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x67,0x40);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x63,0xff);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x6a,0x30);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x6b,0x1a);
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x18,0x96);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_192e(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x192e;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x67,0x40);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x63,0xff);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x6a,0xb1);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x6b,0x1a);
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x18,0x96);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_193d(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x193d;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x67,0x40);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x63,0xff);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x6a,0x2e);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x6b,0x1b);
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x18,0x96);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_194c(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x194c;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x67,0x08);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x6a,0x9c);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x6b,0x1b);
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x18,0x96);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1958(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1958;
	clk += Opcodes::mov_a_imm           (aCPU, pc, 0x74,0xe1,0x00);
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0x66,0x09);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_195d(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x195d;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x6a,0x6c);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x6b,0x19);
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x18,0x96);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1966(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1966;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x18,0x96);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1969(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1969;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x18,0x96);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_196c(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x196c;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x19,0x00);
	clk += Opcodes::mov_a_imm           (aCPU, pc, 0x74,0xfe,0x00);
	clk += Opcodes::anl_a_mem           (aCPU, pc, 0x55,0x68,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x1a,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x6a,0x7e);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x6b,0x19);
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x18,0x96);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_197e(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x197e;
	clk += Opcodes::mov_a_imm           (aCPU, pc, 0x74,0xfe,0x00);
	clk += Opcodes::anl_a_mem           (aCPU, pc, 0x55,0x68,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x1b,0x00);
	clk += Opcodes::setb_bitaddr        (aCPU, pc, 0xd2,0x11,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x6a,0xc1);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x6b,0x18);
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x18,0x96);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_198f(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x198f;
	clk += Opcodes::mov_a_imm           (aCPU, pc, 0x74,0x0f,0x00);
	clk += Opcodes::anl_a_mem           (aCPU, pc, 0x55,0x66,0x00);
	clk += Opcodes::add_a_mem           (aCPU, pc, 0x25,0xe0,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfa,0x00,0x00);
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0xb4,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xf8,0x00,0x00);
	clk += Opcodes::mov_indir_rx_mem    (aCPU, pc, 0xa6,0x68,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x6a,0xa4);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x6b,0x19);
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x18,0x96);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_19a4(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x19a4;
	clk += Opcodes::mov_a_imm           (aCPU, pc, 0x74,0x0f,0x00);
	clk += Opcodes::anl_a_mem           (aCPU, pc, 0x55,0x66,0x00);
	clk += Opcodes::add_a_mem           (aCPU, pc, 0x25,0xe0,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfa,0x00,0x00);
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0xb4,0x00);
	clk += Opcodes::inc_a               (aCPU, pc, 0x04,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xf8,0x00,0x00);
	clk += Opcodes::mov_indir_rx_mem    (aCPU, pc, 0xa6,0x68,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x6a,0xc1);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x6b,0x18);
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x18,0x96);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_19ba(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x19ba;
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0x68,0x63);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x6a,0xc6);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x6b,0x19);
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x18,0x96);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_19c6(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x19c6;
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0x68,0x64);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x67,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x6a,0xd5);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x6b,0x19);
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x18,0x96);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_19d5(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x19d5;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x63,0x00);
	clk += Opcodes::jb_bitaddr_offset   (aCPU, pc, 0x20,0xe0,0x12);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_19da(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x19da;
	clk += Opcodes::mov_rx_mem          (aCPU, pc, 0xaa,0x63,0x00);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x64,0x00);
	clk += Opcodes::clr_c               (aCPU, pc, 0xc3,0x00,0x00);
	clk += Opcodes::rrc_a               (aCPU, pc, 0x13,0x00,0x00);
	clk += Opcodes::xch_a_rx            (aCPU, pc, 0xca,0x00,0x00);
	clk += Opcodes::rrc_a               (aCPU, pc, 0x13,0x00,0x00);
	clk += Opcodes::xch_a_rx            (aCPU, pc, 0xca,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfb,0x00,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8a,0x63,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8b,0x64,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x67,0x00);
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0xe9,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_19ec(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x19ec;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x67,0x00);
	clk += Opcodes::add_a_mem           (aCPU, pc, 0x25,0x67,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfa,0x00,0x00);
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0xb4,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xf8,0x00,0x00);
	clk += Opcodes::mov_indir_rx_mem    (aCPU, pc, 0xa6,0x68,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x6a,0xff);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x6b,0x19);
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x18,0x96);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_19ff(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x19ff;
	clk += Opcodes::mov_rx_mem          (aCPU, pc, 0xaa,0x67,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x67,0x00);
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xea,0x00,0x00);
	clk += Opcodes::add_a_rx            (aCPU, pc, 0x2a,0x00,0x00);
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0xb4,0x00);
	clk += Opcodes::inc_a               (aCPU, pc, 0x04,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xf8,0x00,0x00);
	clk += Opcodes::mov_indir_rx_mem    (aCPU, pc, 0xa6,0x68,0x00);
	clk += Opcodes::mov_rx_mem          (aCPU, pc, 0xaa,0x63,0x00);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x64,0x00);
	clk += Opcodes::clr_c               (aCPU, pc, 0xc3,0x00,0x00);
	clk += Opcodes::rrc_a               (aCPU, pc, 0x13,0x00,0x00);
	clk += Opcodes::xch_a_rx            (aCPU, pc, 0xca,0x00,0x00);
	clk += Opcodes::rrc_a               (aCPU, pc, 0x13,0x00,0x00);
	clk += Opcodes::xch_a_rx            (aCPU, pc, 0xca,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfb,0x00,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8a,0x63,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8b,0x64,0x00);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x63,0x00);
	clk += Opcodes::orl_a_mem           (aCPU, pc, 0x45,0x64,0x00);
	clk += Opcodes::jz_offset           (aCPU, pc, 0x60,0x06,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1a1f(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1a1f;
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7a,0xd5,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7b,0x19,0x00);
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x04,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1a25(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1a25;
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7a,0xc1,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7b,0x18,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1a29(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1a29;
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8a,0x6a,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8b,0x6b,0x00);
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x18,0x96);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1a30(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1a30;
	clk += Opcodes::mov_a_imm           (aCPU, pc, 0x74,0x0f,0x00);
	clk += Opcodes::anl_a_mem           (aCPU, pc, 0x55,0x68,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfa,0x00,0x00);
	clk += Opcodes::setb_bitaddr        (aCPU, pc, 0xd2,0x13,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1a37(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1a37;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x64,0x00);
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0x63,0x1b);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1a3c(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1a3c;
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8a,0x03,0x00);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x63,0x00);
	clk += Opcodes::swap_a              (aCPU, pc, 0xc4,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfc,0x00,0x00);
	clk += Opcodes::orl_a_mem           (aCPU, pc, 0x45,0x63,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfa,0x00,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x63,0xf0);
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xeb,0x00,0x00);
	clk += Opcodes::jz_offset           (aCPU, pc, 0x60,0x33,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1a4b(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1a4b;
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xeb,0x00,0x00);
	clk += Opcodes::rl_a                (aCPU, pc, 0x23,0x00,0x00);
	clk += Opcodes::rl_a                (aCPU, pc, 0x23,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfb,0x00,0x00);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x67,0x00);
	clk += Opcodes::clr_c               (aCPU, pc, 0xc3,0x00,0x00);
	clk += Opcodes::subb_a_rx           (aCPU, pc, 0x9b,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x67,0x00);
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x10,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1a57(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1a57;
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7b,0x04,0x00);
	clk += Opcodes::dec_mem             (aCPU, pc, 0x15,0x67,0x00);
	clk += Opcodes::dec_mem             (aCPU, pc, 0x15,0x67,0x00);
	clk += Opcodes::dec_mem             (aCPU, pc, 0x15,0x67,0x00);
	clk += Opcodes::dec_mem             (aCPU, pc, 0x15,0x67,0x00);
	clk += Opcodes::mov_rx_mem          (aCPU, pc, 0xac,0x63,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8c,0x64,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8a,0x63,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1a67(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1a67;
	clk += Opcodes::mov_a_imm           (aCPU, pc, 0x74,0x01,0x00);
	clk += Opcodes::anl_a_rx            (aCPU, pc, 0x5a,0x00,0x00);
	clk += Opcodes::add_a_mem           (aCPU, pc, 0x25,0xe0,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfc,0x00,0x00);
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0xb4,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xf8,0x00,0x00);
	clk += Opcodes::mov_mem_indir_rx    (aCPU, pc, 0x86,0x82,0x00);
	clk += Opcodes::inc_rx              (aCPU, pc, 0x08,0x00,0x00);
	clk += Opcodes::mov_mem_indir_rx    (aCPU, pc, 0x86,0x83,0x00);
	clk += Opcodes::dec_rx              (aCPU, pc, 0x18,0x00,0x00);
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x17,0xbc);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1a79(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1a79;
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xea,0x00,0x00);
	clk += Opcodes::rr_a                (aCPU, pc, 0x03,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfa,0x00,0x00);
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xdb,0xe9,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1a7e(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1a7e;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x67,0x00);
	clk += Opcodes::jz_offset           (aCPU, pc, 0x60,0x05,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1a82(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1a82;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x67,0x00);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xe7,0x19);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1a87(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1a87;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x66,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0x1f,0x00);
	clk += Opcodes::jz_offset           (aCPU, pc, 0x60,0x0a,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1a8d(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1a8d;
	clk += Opcodes::dec_mem             (aCPU, pc, 0x15,0x66,0x00);
	clk += Opcodes::mov_a_imm           (aCPU, pc, 0x74,0x40,0x00);
	clk += Opcodes::add_a_mem           (aCPU, pc, 0x25,0x67,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x67,0x00);
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x09,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1a97(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1a97;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x6a,0xc1);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x6b,0x18);
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x18,0x96);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1aa0(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1aa0;
	clk += Opcodes::jb_bitaddr_offset   (aCPU, pc, 0x20,0x13,0x03);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1aa3(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1aa3;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x18,0x96);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1aa6(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1aa6;
	clk += Opcodes::clr_bitaddr         (aCPU, pc, 0xc2,0x13,0x00);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x68,0x00);
	clk += Opcodes::swap_a              (aCPU, pc, 0xc4,0x00,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0x0f,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfa,0x00,0x00);
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x1a,0x37);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1ab1(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1ab1;
	clk += Opcodes::mov_a_imm           (aCPU, pc, 0x74,0x0f,0x00);
	clk += Opcodes::anl_a_mem           (aCPU, pc, 0x55,0x68,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfa,0x00,0x00);
	clk += Opcodes::setb_bitaddr        (aCPU, pc, 0xd2,0x13,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1ab8(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1ab8;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x64,0x00);
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0x63,0x1a);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1abd(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1abd;
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8a,0x03,0x00);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x63,0x00);
	clk += Opcodes::swap_a              (aCPU, pc, 0xc4,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfc,0x00,0x00);
	clk += Opcodes::orl_a_mem           (aCPU, pc, 0x45,0x63,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfa,0x00,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x63,0xf0);
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xeb,0x00,0x00);
	clk += Opcodes::jz_offset           (aCPU, pc, 0x60,0x2f,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1acc(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1acc;
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xeb,0x00,0x00);
	clk += Opcodes::rl_a                (aCPU, pc, 0x23,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfb,0x00,0x00);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x67,0x00);
	clk += Opcodes::clr_c               (aCPU, pc, 0xc3,0x00,0x00);
	clk += Opcodes::subb_a_rx           (aCPU, pc, 0x9b,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x67,0x00);
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x0c,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1ad7(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1ad7;
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7b,0x02,0x00);
	clk += Opcodes::dec_mem             (aCPU, pc, 0x15,0x67,0x00);
	clk += Opcodes::dec_mem             (aCPU, pc, 0x15,0x67,0x00);
	clk += Opcodes::mov_rx_mem          (aCPU, pc, 0xac,0x63,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8c,0x64,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8a,0x63,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1ae3(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1ae3;
	clk += Opcodes::mov_a_imm           (aCPU, pc, 0x74,0x03,0x00);
	clk += Opcodes::anl_a_rx            (aCPU, pc, 0x5a,0x00,0x00);
	clk += Opcodes::add_a_mem           (aCPU, pc, 0x25,0xe0,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfc,0x00,0x00);
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0xb4,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xf8,0x00,0x00);
	clk += Opcodes::mov_mem_indir_rx    (aCPU, pc, 0x86,0x82,0x00);
	clk += Opcodes::inc_rx              (aCPU, pc, 0x08,0x00,0x00);
	clk += Opcodes::mov_mem_indir_rx    (aCPU, pc, 0x86,0x83,0x00);
	clk += Opcodes::dec_rx              (aCPU, pc, 0x18,0x00,0x00);
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x17,0xbc);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1af5(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1af5;
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xea,0x00,0x00);
	clk += Opcodes::rr_a                (aCPU, pc, 0x03,0x00,0x00);
	clk += Opcodes::rr_a                (aCPU, pc, 0x03,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfa,0x00,0x00);
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xdb,0xe8,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1afb(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1afb;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x67,0x00);
	clk += Opcodes::jz_offset           (aCPU, pc, 0x60,0x05,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1aff(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1aff;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x67,0x00);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xe7,0x19);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1b04(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1b04;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x66,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0x1f,0x00);
	clk += Opcodes::jz_offset           (aCPU, pc, 0x60,0x0a,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1b0a(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1b0a;
	clk += Opcodes::dec_mem             (aCPU, pc, 0x15,0x66,0x00);
	clk += Opcodes::mov_a_imm           (aCPU, pc, 0x74,0x40,0x00);
	clk += Opcodes::add_a_mem           (aCPU, pc, 0x25,0x67,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x67,0x00);
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x09,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1b14(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1b14;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x6a,0xc1);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x6b,0x18);
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x18,0x96);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1b1d(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1b1d;
	clk += Opcodes::jb_bitaddr_offset   (aCPU, pc, 0x20,0x13,0x03);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1b20(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1b20;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x18,0x96);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1b23(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1b23;
	clk += Opcodes::clr_bitaddr         (aCPU, pc, 0xc2,0x13,0x00);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x68,0x00);
	clk += Opcodes::swap_a              (aCPU, pc, 0xc4,0x00,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0x0f,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfa,0x00,0x00);
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x1a,0xb8);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1b2e(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1b2e;
	clk += Opcodes::mov_a_imm           (aCPU, pc, 0x74,0x0f,0x00);
	clk += Opcodes::anl_a_mem           (aCPU, pc, 0x55,0x68,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfa,0x00,0x00);
	clk += Opcodes::setb_bitaddr        (aCPU, pc, 0xd2,0x13,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1b35(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1b35;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x64,0x00);
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0x63,0x12);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1b3a(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1b3a;
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8a,0x03,0x00);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x67,0x00);
	clk += Opcodes::clr_c               (aCPU, pc, 0xc3,0x00,0x00);
	clk += Opcodes::subb_a_rx           (aCPU, pc, 0x9a,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x67,0x00);
	clk += Opcodes::mov_rx_mem          (aCPU, pc, 0xaa,0x63,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x63,0xf0);
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xeb,0x00,0x00);
	clk += Opcodes::jnz_offset          (aCPU, pc, 0x70,0x0c,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1b4a(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1b4a;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x1e,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1b4c(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1b4c;
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7b,0x01,0x00);
	clk += Opcodes::dec_mem             (aCPU, pc, 0x15,0x67,0x00);
	clk += Opcodes::mov_rx_mem          (aCPU, pc, 0xac,0x63,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8c,0x64,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8a,0x63,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1b56(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1b56;
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xea,0x00,0x00);
	clk += Opcodes::add_a_rx            (aCPU, pc, 0x2a,0x00,0x00);
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0xb4,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xf8,0x00,0x00);
	clk += Opcodes::mov_mem_indir_rx    (aCPU, pc, 0x86,0x04,0x00);
	clk += Opcodes::inc_rx              (aCPU, pc, 0x08,0x00,0x00);
	clk += Opcodes::mov_mem_indir_rx    (aCPU, pc, 0x86,0x05,0x00);
	clk += Opcodes::dec_rx              (aCPU, pc, 0x18,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1b61(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1b61;
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8c,0x82,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8d,0x83,0x00);
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x17,0xbc);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1b68(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1b68;
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xdb,0xf7,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1b6a(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1b6a;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x67,0x00);
	clk += Opcodes::jz_offset           (aCPU, pc, 0x60,0x05,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1b6e(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1b6e;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x67,0x00);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xe7,0x19);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1b73(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1b73;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x66,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0x1f,0x00);
	clk += Opcodes::jz_offset           (aCPU, pc, 0x60,0x0a,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1b79(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1b79;
	clk += Opcodes::dec_mem             (aCPU, pc, 0x15,0x66,0x00);
	clk += Opcodes::mov_a_imm           (aCPU, pc, 0x74,0x40,0x00);
	clk += Opcodes::add_a_mem           (aCPU, pc, 0x25,0x67,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x67,0x00);
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x09,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1b83(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1b83;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x6a,0xc1);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x6b,0x18);
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x18,0x96);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1b8c(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1b8c;
	clk += Opcodes::jb_bitaddr_offset   (aCPU, pc, 0x20,0x13,0x03);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1b8f(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1b8f;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x18,0x96);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1b92(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1b92;
	clk += Opcodes::clr_bitaddr         (aCPU, pc, 0xc2,0x13,0x00);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x68,0x00);
	clk += Opcodes::swap_a              (aCPU, pc, 0xc4,0x00,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0x0f,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfa,0x00,0x00);
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x99,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1b9c(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1b9c;
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0x68,0x63);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x64,0x08);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1ba2(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1ba2;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x63,0x00);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xe0,0x09);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1ba7(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1ba7;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x6a,0xf2);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x6b,0x1b);
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x18,0x96);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1bb0(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1bb0;
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x78,0xd4,0x00);
	clk += Opcodes::mov_mem_indir_rx    (aCPU, pc, 0x86,0x82,0x00);
	clk += Opcodes::inc_rx              (aCPU, pc, 0x08,0x00,0x00);
	clk += Opcodes::mov_mem_indir_rx    (aCPU, pc, 0x86,0x83,0x00);
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x17,0xbc);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1bba(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1bba;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x63,0x00);
	clk += Opcodes::rr_a                (aCPU, pc, 0x03,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfa,0x00,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8a,0x63,0x00);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x64,0x00);
	clk += Opcodes::dec_a               (aCPU, pc, 0x14,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfa,0x00,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8a,0x64,0x00);
	clk += Opcodes::jnz_offset          (aCPU, pc, 0x70,0xda,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1bc8(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1bc8;
	clk += Opcodes::dec_mem             (aCPU, pc, 0x15,0x67,0x00);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x67,0x00);
	clk += Opcodes::jz_offset           (aCPU, pc, 0x60,0x08,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1bce(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1bce;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x6a,0x9c);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x6b,0x1b);
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x19,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1bd6(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1bd6;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x66,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0x1f,0x00);
	clk += Opcodes::jz_offset           (aCPU, pc, 0x60,0x0d,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1bdc(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1bdc;
	clk += Opcodes::dec_mem             (aCPU, pc, 0x15,0x66,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x67,0x08);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x6a,0x9c);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x6b,0x1b);
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x06,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1be9(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1be9;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x6a,0xc1);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x6b,0x18);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1bef(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1bef;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x18,0x96);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1bf2(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1bf2;
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x78,0xd4,0x00);
	clk += Opcodes::mov_indir_rx_mem    (aCPU, pc, 0xa6,0x68,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x6a,0xff);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x6b,0x1b);
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x18,0x96);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1bff(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1bff;
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x78,0xd5,0x00);
	clk += Opcodes::mov_indir_rx_mem    (aCPU, pc, 0xa6,0x68,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x78,0xd4,0x00);
	clk += Opcodes::mov_mem_indir_rx    (aCPU, pc, 0x86,0x82,0x00);
	clk += Opcodes::inc_rx              (aCPU, pc, 0x08,0x00,0x00);
	clk += Opcodes::mov_mem_indir_rx    (aCPU, pc, 0x86,0x83,0x00);
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x17,0xbc);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1c0d(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1c0d;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x64,0x00);
	clk += Opcodes::dec_a               (aCPU, pc, 0x14,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfa,0x00,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8a,0x64,0x00);
	clk += Opcodes::jz_offset           (aCPU, pc, 0x60,0x2c,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1c15(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1c15;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x63,0x00);
	clk += Opcodes::rr_a                (aCPU, pc, 0x03,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfa,0x00,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8a,0x63,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1c1b(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1c1b;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x63,0x00);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xe0,0x09);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1c20(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1c20;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x6a,0xf2);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x6b,0x1b);
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x18,0x96);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1c29(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1c29;
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x78,0xd4,0x00);
	clk += Opcodes::mov_mem_indir_rx    (aCPU, pc, 0x86,0x82,0x00);
	clk += Opcodes::inc_rx              (aCPU, pc, 0x08,0x00,0x00);
	clk += Opcodes::mov_mem_indir_rx    (aCPU, pc, 0x86,0x83,0x00);
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x17,0xbc);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1c33(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1c33;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x63,0x00);
	clk += Opcodes::rr_a                (aCPU, pc, 0x03,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfa,0x00,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8a,0x63,0x00);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x64,0x00);
	clk += Opcodes::dec_a               (aCPU, pc, 0x14,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfa,0x00,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8a,0x64,0x00);
	clk += Opcodes::jnz_offset          (aCPU, pc, 0x70,0xda,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1c41(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1c41;
	clk += Opcodes::dec_mem             (aCPU, pc, 0x15,0x67,0x00);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x67,0x00);
	clk += Opcodes::jz_offset           (aCPU, pc, 0x60,0x08,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1c47(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1c47;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x6a,0x9c);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x6b,0x1b);
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x19,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1c4f(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1c4f;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x66,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0x1f,0x00);
	clk += Opcodes::jz_offset           (aCPU, pc, 0x60,0x0d,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1c55(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1c55;
	clk += Opcodes::dec_mem             (aCPU, pc, 0x15,0x66,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x67,0x08);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x6a,0x9c);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x6b,0x1b);
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x06,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1c62(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1c62;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x6a,0xc1);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x6b,0x18);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1c68(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1c68;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x18,0x96);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1c6b(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1c6b;
	clk += Opcodes::mov_dptr_imm        (aCPU, pc, 0x90,0xfc,0x00);
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfa,0x00,0x00);
	clk += Opcodes::cjne_rx_imm_offset  (aCPU, pc, 0xba,0xff,0x0a);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1c73(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1c73;
	clk += Opcodes::setb_bitaddr        (aCPU, pc, 0xd2,0xfd,0x00);
	clk += Opcodes::mov_dptr_imm        (aCPU, pc, 0x90,0xfc,0x00);
	clk += Opcodes::mov_a_imm           (aCPU, pc, 0x74,0x12,0x00);
	clk += Opcodes::movx_indir_dptr_a   (aCPU, pc, 0xf0,0x00,0x00);
	clk += Opcodes::clr_bitaddr         (aCPU, pc, 0xc2,0xfd,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1c7d(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1c7d;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xd6,0xc0);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7a,0x01,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1c82(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1c82;
	clk += Opcodes::cjne_rx_imm_offset  (aCPU, pc, 0xba,0x08,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1c85(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1c85;
	clk += Opcodes::jnc_offset          (aCPU, pc, 0x50,0x2e,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1c87(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1c87;
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xea,0x00,0x00);
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x82,0x00);
	clk += Opcodes::clr_a               (aCPU, pc, 0xe4,0x00,0x00);
	clk += Opcodes::addc_a_imm          (aCPU, pc, 0x34,0xfc,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x83,0x00);
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfb,0x00,0x00);
	clk += Opcodes::cjne_rx_imm_offset  (aCPU, pc, 0xbb,0xff,0x1c);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1c96(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1c96;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0xd6,0x00);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xe5,0xfb);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1c9b(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1c9b;
	clk += Opcodes::mov_rx_mem          (aCPU, pc, 0xab,0xd7,0x00);
	clk += Opcodes::cjne_rx_imm_offset  (aCPU, pc, 0xbb,0xff,0x02);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1ca0(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1ca0;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0xf4,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1ca2(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1ca2;
	clk += Opcodes::setb_bitaddr        (aCPU, pc, 0xd2,0xfd,0x00);
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xea,0x00,0x00);
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x82,0x00);
	clk += Opcodes::clr_a               (aCPU, pc, 0xe4,0x00,0x00);
	clk += Opcodes::addc_a_imm          (aCPU, pc, 0x34,0xfc,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x83,0x00);
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xeb,0x00,0x00);
	clk += Opcodes::movx_indir_dptr_a   (aCPU, pc, 0xf0,0x00,0x00);
	clk += Opcodes::clr_bitaddr         (aCPU, pc, 0xc2,0xfd,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1cb2(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1cb2;
	clk += Opcodes::inc_rx              (aCPU, pc, 0x0a,0x00,0x00);
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0xcd,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1cb5(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1cb5;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xd6,0x00);
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1cb9(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1cb9;
	clk += Opcodes::mov_dptr_imm        (aCPU, pc, 0x90,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1cbc(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1cbc;
	clk += Opcodes::clr_a               (aCPU, pc, 0xe4,0x00,0x00);
	clk += Opcodes::movx_indir_dptr_a   (aCPU, pc, 0xf0,0x00,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::movx_indir_dptr_a   (aCPU, pc, 0xf0,0x00,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::movx_indir_dptr_a   (aCPU, pc, 0xf0,0x00,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::movx_indir_dptr_a   (aCPU, pc, 0xf0,0x00,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::mov_a_imm           (aCPU, pc, 0x74,0x04,0x00);
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0x83,0xf2);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1cca(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1cca;
	clk += Opcodes::mov_dptr_imm        (aCPU, pc, 0x90,0x03,0xfd);
	clk += Opcodes::mov_a_imm           (aCPU, pc, 0x74,0x80,0x00);
	clk += Opcodes::movx_indir_dptr_a   (aCPU, pc, 0xf0,0x00,0x00);
	clk += Opcodes::mov_dptr_imm        (aCPU, pc, 0x90,0x03,0xfe);
	clk += Opcodes::mov_a_imm           (aCPU, pc, 0x74,0x04,0x00);
	clk += Opcodes::movx_indir_dptr_a   (aCPU, pc, 0xf0,0x00,0x00);
	clk += Opcodes::mov_dptr_imm        (aCPU, pc, 0x90,0x03,0xff);
	clk += Opcodes::mov_a_imm           (aCPU, pc, 0x74,0x08,0x00);
	clk += Opcodes::movx_indir_dptr_a   (aCPU, pc, 0xf0,0x00,0x00);
	clk += Opcodes::clr_a               (aCPU, pc, 0xe4,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x28,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x29,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x2a,0x00);
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1ce5(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1ce5;
	clk += Opcodes::mov_dptr_imm        (aCPU, pc, 0x90,0x03,0xff);
	clk += Opcodes::clr_a               (aCPU, pc, 0xe4,0x00,0x00);
	clk += Opcodes::movx_indir_dptr_a   (aCPU, pc, 0xf0,0x00,0x00);
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1ceb(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1ceb;
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0x28,0x84);
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0x29,0x85);
	clk += Opcodes::clr_a               (aCPU, pc, 0xe4,0x00,0x00);
	clk += Opcodes::movc_a_indir_a_dptr (aCPU, pc, 0x93,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xf9,0x00,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::clr_a               (aCPU, pc, 0xe4,0x00,0x00);
	clk += Opcodes::movc_a_indir_a_dptr (aCPU, pc, 0x93,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfa,0x00,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::clr_a               (aCPU, pc, 0xe4,0x00,0x00);
	clk += Opcodes::movc_a_indir_a_dptr (aCPU, pc, 0x93,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfb,0x00,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1cfd(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1cfd;
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x89,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1cff(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1cff;
	clk += Opcodes::clr_a               (aCPU, pc, 0xe4,0x00,0x00);
	clk += Opcodes::movc_a_indir_a_dptr (aCPU, pc, 0x93,0x00,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::clr_c               (aCPU, pc, 0xc3,0x00,0x00);
	clk += Opcodes::rlc_a               (aCPU, pc, 0x33,0x00,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x92,0x01);
	clk += Opcodes::movx_indir_dptr_a   (aCPU, pc, 0xf0,0x00,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xeb,0x00,0x00);
	clk += Opcodes::inc_a               (aCPU, pc, 0x04,0x00,0x00);
	clk += Opcodes::jz_offset           (aCPU, pc, 0x60,0x0e,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1d0d(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1d0d;
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xeb,0x00,0x00);
	clk += Opcodes::rlc_a               (aCPU, pc, 0x33,0x00,0x00);
	clk += Opcodes::rl_a                (aCPU, pc, 0x23,0x00,0x00);
	clk += Opcodes::xrl_a_mem           (aCPU, pc, 0x65,0x2a,0x00);
	clk += Opcodes::movx_indir_dptr_a   (aCPU, pc, 0xf0,0x00,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x92,0x00);
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xd8,0xe6,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1d19(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1d19;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x14,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1d1b(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1d1b;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x92,0x00);
	clk += Opcodes::clr_a               (aCPU, pc, 0xe4,0x00,0x00);
	clk += Opcodes::movc_a_indir_a_dptr (aCPU, pc, 0x93,0x00,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x92,0x01);
	clk += Opcodes::rlc_a               (aCPU, pc, 0x33,0x00,0x00);
	clk += Opcodes::rl_a                (aCPU, pc, 0x23,0x00,0x00);
	clk += Opcodes::xrl_a_mem           (aCPU, pc, 0x65,0x2a,0x00);
	clk += Opcodes::movx_indir_dptr_a   (aCPU, pc, 0xf0,0x00,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x92,0x00);
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xd8,0xd0,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1d2f(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1d2f;
	clk += Opcodes::clr_c               (aCPU, pc, 0xc3,0x00,0x00);
	clk += Opcodes::mov_a_imm           (aCPU, pc, 0x74,0x12,0x00);
	clk += Opcodes::subb_a_rx           (aCPU, pc, 0x99,0x00,0x00);
	clk += Opcodes::rl_a                (aCPU, pc, 0x23,0x00,0x00);
	clk += Opcodes::add_a_mem           (aCPU, pc, 0x25,0x84,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x84,0x00);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x85,0x00);
	clk += Opcodes::addc_a_imm          (aCPU, pc, 0x34,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x85,0x00);
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xda,0xbd,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1d40(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1d40;
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0x84,0x28);
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0x85,0x29);
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1d47(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1d47;
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0x28,0x84);
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0x29,0x85);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1d4d(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1d4d;
	clk += Opcodes::clr_a               (aCPU, pc, 0xe4,0x00,0x00);
	clk += Opcodes::movc_a_indir_a_dptr (aCPU, pc, 0x93,0x00,0x00);
	clk += Opcodes::jz_offset           (aCPU, pc, 0x60,0x15,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1d51(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1d51;
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0xe0,0x00);
	clk += Opcodes::clr_c               (aCPU, pc, 0xc3,0x00,0x00);
	clk += Opcodes::rlc_a               (aCPU, pc, 0x33,0x00,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x92,0x01);
	clk += Opcodes::movx_indir_dptr_a   (aCPU, pc, 0xf0,0x00,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x2a,0x00);
	clk += Opcodes::addc_a_imm          (aCPU, pc, 0x34,0x00,0x00);
	clk += Opcodes::movx_indir_dptr_a   (aCPU, pc, 0xf0,0x00,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x92,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0xe7,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1d66(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1d66;
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0x84,0x28);
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0x85,0x29);
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1d6d(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1d6d;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x82,0x00);
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0x28,0x82);
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0x29,0x83);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xf8,0x00,0x00);
	clk += Opcodes::swap_a              (aCPU, pc, 0xc4,0x00,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x79,0x02,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1d79(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1d79;
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0x0f,0x00);
	clk += Opcodes::clr_bitaddr         (aCPU, pc, 0xc2,0xd6,0x00);
	clk += Opcodes::clr_c               (aCPU, pc, 0xc3,0x00,0x00);
	clk += Opcodes::da_a                (aCPU, pc, 0xd4,0x00,0x00);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xe4,0x01);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1d82(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1d82;
	clk += Opcodes::inc_a               (aCPU, pc, 0x04,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1d83(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1d83;
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0x10,0x00);
	clk += Opcodes::rl_a                (aCPU, pc, 0x23,0x00,0x00);
	clk += Opcodes::movx_indir_dptr_a   (aCPU, pc, 0xf0,0x00,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x2a,0x00);
	clk += Opcodes::movx_indir_dptr_a   (aCPU, pc, 0xf0,0x00,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xe8,0x00,0x00);
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xd9,0xea,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1d8f(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1d8f;
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0x82,0x28);
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0x83,0x29);
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1d96(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1d96;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x1c,0xb9);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1d99(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1d99;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x28,0xb2);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x29,0x01);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x2a,0x40);
	clk += Opcodes::mov_dptr_imm        (aCPU, pc, 0x90,0x1e,0x91);
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x1d,0x47);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1da8(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1da8;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x2a,0x20);
	clk += Opcodes::mov_dptr_imm        (aCPU, pc, 0x90,0x1e,0x99);
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x1d,0x47);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1db1(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1db1;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x28,0xb6);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x29,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x2a,0x00);
	clk += Opcodes::mov_dptr_imm        (aCPU, pc, 0x90,0x2e,0x67);
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x1c,0xeb);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1dc0(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1dc0;
	clk += Opcodes::clr_a               (aCPU, pc, 0xe4,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x28,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x29,0x00);
	clk += Opcodes::mov_dptr_imm        (aCPU, pc, 0x90,0x2e,0x55);
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x1c,0xeb);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1dcb(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1dcb;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x28,0x26);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x29,0x00);
	clk += Opcodes::mov_dptr_imm        (aCPU, pc, 0x90,0x2e,0x19);
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x1c,0xeb);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1dd7(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1dd7;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x28,0x18);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x29,0x00);
	clk += Opcodes::mov_dptr_imm        (aCPU, pc, 0x90,0x2e,0x46);
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x1c,0xeb);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1de3(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1de3;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x28,0x18);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x29,0x00);
	clk += Opcodes::mov_dptr_imm        (aCPU, pc, 0x90,0x2e,0x1f);
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x1c,0xeb);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1def(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1def;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x28,0x38);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x29,0x02);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x2a,0x50);
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x14,0x0a);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1dfb(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1dfb;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x1d,0x6d);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1dfe(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1dfe;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x00,0xe9);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1e01(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1e01;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x1c,0xe5);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2000(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2000;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x92,0x01);
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x80,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x3b);
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x80,0x00);
	clk += Opcodes::dec_mem             (aCPU, pc, 0x15,0x84,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x3d);
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xec,0x00,0x00);
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2014(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2014;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x92,0x01);
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x80,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x3b);
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x80,0x00);
	clk += Opcodes::dec_mem             (aCPU, pc, 0x15,0x84,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x3d);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8c,0x80,0x00);
	clk += Opcodes::mov_a_imm           (aCPU, pc, 0x74,0x4f,0x00);
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_202b(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x202b;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_202d(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x202d;
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0x04,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x80,0x00);
	clk += Opcodes::mov_a_imm           (aCPU, pc, 0x74,0x4f,0x00);
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2034(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2034;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2036(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2036;
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0x08,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x80,0x00);
	clk += Opcodes::mov_a_imm           (aCPU, pc, 0x74,0x4f,0x00);
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_203d(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x203d;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_203f(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x203f;
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0x0c,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x80,0x00);
	clk += Opcodes::mov_a_imm           (aCPU, pc, 0x74,0x4f,0x00);
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2046(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2046;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2048(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2048;
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0x10,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x80,0x00);
	clk += Opcodes::mov_a_imm           (aCPU, pc, 0x74,0x4f,0x00);
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_204f(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x204f;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2051(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2051;
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0x14,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x80,0x00);
	clk += Opcodes::mov_a_imm           (aCPU, pc, 0x74,0x4f,0x00);
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2058(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2058;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_205a(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x205a;
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0x18,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x80,0x00);
	clk += Opcodes::mov_a_imm           (aCPU, pc, 0x74,0x4f,0x00);
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2061(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2061;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2063(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2063;
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0x1c,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x80,0x00);
	clk += Opcodes::mov_a_imm           (aCPU, pc, 0x74,0x4f,0x00);
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_206a(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x206a;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x92,0x00);
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x80,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x3b);
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x80,0x00);
	clk += Opcodes::dec_mem             (aCPU, pc, 0x15,0x82,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x3d);
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xeb,0x00,0x00);
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_207e(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x207e;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x92,0x00);
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x80,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x3b);
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x80,0x00);
	clk += Opcodes::dec_mem             (aCPU, pc, 0x15,0x82,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x3d);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8b,0x80,0x00);
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2093(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2093;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x6a,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2095(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2095;
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0x04,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x80,0x00);
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_209a(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x209a;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x6a,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_209c(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x209c;
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0x08,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x80,0x00);
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_20a1(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x20a1;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x6a,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_20a3(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x20a3;
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0x0c,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x80,0x00);
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_20a8(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x20a8;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x6a,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_20aa(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x20aa;
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0x10,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x80,0x00);
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_20af(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x20af;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x6a,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_20b1(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x20b1;
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0x14,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x80,0x00);
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_20b6(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x20b6;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x6a,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_20b8(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x20b8;
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0x18,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x80,0x00);
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_20bd(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x20bd;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x6a,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_20bf(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x20bf;
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0x1c,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x80,0x00);
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_20c4(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x20c4;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_20cc(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x20cc;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_20d4(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x20d4;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_20dc(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x20dc;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_20e4(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x20e4;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_20ec(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x20ec;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_20f4(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x20f4;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_20fc(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x20fc;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_20fe(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x20fe;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2100(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2100;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2102(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2102;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2105(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2105;
	clk += Opcodes::jb_bitaddr_offset   (aCPU, pc, 0x20,0xf0,0x26);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2108(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2108;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xc4,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_210a(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x210a;
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0xf0,0xe9);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xef,0x21);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xd9,0x03,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2114(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2114;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x01,0x42);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2117(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2117;
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x80,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x3b);
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x80,0x00);
	clk += Opcodes::dec_mem             (aCPU, pc, 0x15,0x82,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x3d);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8b,0x80,0x00);
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0xe9,0xf0);
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xdd,0xd8,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_212d(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x212d;
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_212e(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x212e;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x14,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2130(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2130;
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0xa0,0x14);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2133(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2133;
	clk += Opcodes::orl_mem_imm         (aCPU, pc, 0x43,0x80,0x02);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xa6,0x06);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2139(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2139;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x7e,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_213b(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x213b;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xc4,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_213d(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x213d;
	clk += Opcodes::ajmp_offset         (aCPU, pc, 0x41,0x31,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_213f(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x213f;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x7e,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2141(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2141;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xfc,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2143(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2143;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x2b,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2145(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2145;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x08,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2147(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2147;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_214f(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x214f;
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0xa0,0x14);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2152(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2152;
	clk += Opcodes::orl_mem_imm         (aCPU, pc, 0x43,0x80,0x02);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xa6,0x06);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2158(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2158;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x93,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_215a(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x215a;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xcc,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_215c(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x215c;
	clk += Opcodes::ajmp_offset         (aCPU, pc, 0x41,0x31,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_215e(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x215e;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x93,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2160(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2160;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xfc,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2162(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2162;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x34,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2164(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2164;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x08,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2166(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2166;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_216e(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x216e;
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0xa0,0x14);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2171(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2171;
	clk += Opcodes::orl_mem_imm         (aCPU, pc, 0x43,0x80,0x02);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xa6,0x06);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2177(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2177;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x9a,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2179(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2179;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xd4,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_217b(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x217b;
	clk += Opcodes::ajmp_offset         (aCPU, pc, 0x41,0x31,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_217d(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x217d;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x9a,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_217f(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x217f;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xfc,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2181(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2181;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x3d,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2183(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2183;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x08,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2185(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2185;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_218d(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x218d;
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0xa0,0x14);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2190(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2190;
	clk += Opcodes::orl_mem_imm         (aCPU, pc, 0x43,0x80,0x02);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xa6,0x06);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2196(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2196;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xa1,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2198(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2198;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xdc,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_219a(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x219a;
	clk += Opcodes::ajmp_offset         (aCPU, pc, 0x41,0x31,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_219c(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x219c;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xa1,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_219e(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x219e;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xfc,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_21a0(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x21a0;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x46,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_21a2(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x21a2;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x08,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_21a4(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x21a4;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_21ac(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x21ac;
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0xa0,0x14);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_21af(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x21af;
	clk += Opcodes::orl_mem_imm         (aCPU, pc, 0x43,0x80,0x02);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xa6,0x06);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_21b5(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x21b5;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xa8,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_21b7(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x21b7;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xe4,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_21b9(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x21b9;
	clk += Opcodes::ajmp_offset         (aCPU, pc, 0x41,0x31,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_21bb(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x21bb;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xa8,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_21bd(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x21bd;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xfc,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_21bf(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x21bf;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x4f,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_21c1(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x21c1;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x08,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_21c3(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x21c3;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_21cb(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x21cb;
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0xa0,0x14);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_21ce(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x21ce;
	clk += Opcodes::orl_mem_imm         (aCPU, pc, 0x43,0x80,0x02);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xa6,0x06);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_21d4(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x21d4;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xaf,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_21d6(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x21d6;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xec,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_21d8(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x21d8;
	clk += Opcodes::ajmp_offset         (aCPU, pc, 0x41,0x31,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_21da(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x21da;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xaf,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_21dc(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x21dc;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xfc,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_21de(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x21de;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x58,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_21e0(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x21e0;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x08,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_21e2(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x21e2;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_21ea(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x21ea;
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0xa0,0x14);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_21ed(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x21ed;
	clk += Opcodes::orl_mem_imm         (aCPU, pc, 0x43,0x80,0x02);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xa6,0x06);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_21f3(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x21f3;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xb6,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_21f5(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x21f5;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xf4,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_21f7(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x21f7;
	clk += Opcodes::ajmp_offset         (aCPU, pc, 0x41,0x31,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_21f9(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x21f9;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xb6,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_21fb(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x21fb;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xfc,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_21fd(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x21fd;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x61,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_21ff(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x21ff;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x08,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2201(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2201;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2209(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2209;
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0xa0,0x14);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_220c(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x220c;
	clk += Opcodes::orl_mem_imm         (aCPU, pc, 0x43,0x80,0x02);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xa6,0x06);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2212(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2212;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xbd,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2214(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2214;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xfc,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2216(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2216;
	clk += Opcodes::ajmp_offset         (aCPU, pc, 0x41,0x31,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2218(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2218;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xbd,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_221a(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x221a;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xfc,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_221c(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x221c;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x14,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_221e(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x221e;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x08,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2220(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2220;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2228(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2228;
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::anl_mem_imm         (aCPU, pc, 0x53,0x85,0x03);
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x7e,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_222f(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x222f;
	clk += Opcodes::ajmp_offset         (aCPU, pc, 0x21,0x0a,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2231(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2231;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x92,0x01);
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0xf2,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2236(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2236;
	clk += Opcodes::jb_bitaddr_offset   (aCPU, pc, 0x20,0xf0,0x34);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2239(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2239;
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0xf0,0xe9);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xef,0x21);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0xe9,0xf0);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xf0,0x03);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_224d(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x224d;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x22,0x71);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2250(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2250;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xcc,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2252(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2252;
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xd9,0x03,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2256(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2256;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x01,0x42);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2259(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2259;
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x80,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x3b);
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x80,0x00);
	clk += Opcodes::dec_mem             (aCPU, pc, 0x15,0x82,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x3d);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8b,0x80,0x00);
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xdd,0xcd,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_226c(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x226c;
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_226d(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x226d;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x61,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_226f(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x226f;
	clk += Opcodes::ajmp_offset         (aCPU, pc, 0x61,0x2c,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2271(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2271;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x14,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2273(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2273;
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0xa0,0x14);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2276(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2276;
	clk += Opcodes::orl_mem_imm         (aCPU, pc, 0x43,0x80,0x02);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xa6,0x06);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_227c(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x227c;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x93,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_227e(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x227e;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xcc,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2280(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2280;
	clk += Opcodes::ajmp_offset         (aCPU, pc, 0x61,0x57,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2282(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2282;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x93,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2284(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2284;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xfc,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2286(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2286;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x2b,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2288(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2288;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x08,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_228a(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x228a;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2292(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2292;
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0xa0,0x08);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2295(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2295;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x9a,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2297(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2297;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xfc,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2299(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2299;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x34,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_229b(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x229b;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x08,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_229d(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x229d;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_22a5(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x22a5;
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0xa0,0x14);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_22a8(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x22a8;
	clk += Opcodes::orl_mem_imm         (aCPU, pc, 0x43,0x80,0x02);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xa6,0x06);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_22ae(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x22ae;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xa1,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_22b0(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x22b0;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xdc,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_22b2(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x22b2;
	clk += Opcodes::ajmp_offset         (aCPU, pc, 0x61,0x57,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_22b4(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x22b4;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xa1,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_22b6(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x22b6;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xfc,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_22b8(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x22b8;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x3d,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_22ba(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x22ba;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x08,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_22bc(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x22bc;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_22c4(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x22c4;
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0xa0,0x08);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_22c7(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x22c7;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xa8,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_22c9(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x22c9;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xfc,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_22cb(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x22cb;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x46,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_22cd(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x22cd;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x08,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_22cf(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x22cf;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_22d7(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x22d7;
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0xa0,0x14);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_22da(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x22da;
	clk += Opcodes::orl_mem_imm         (aCPU, pc, 0x43,0x80,0x02);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xa6,0x06);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_22e0(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x22e0;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xaf,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_22e2(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x22e2;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xec,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_22e4(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x22e4;
	clk += Opcodes::ajmp_offset         (aCPU, pc, 0x61,0x57,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_22e6(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x22e6;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xaf,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_22e8(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x22e8;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xfc,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_22ea(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x22ea;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x4f,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_22ec(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x22ec;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x08,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_22ee(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x22ee;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_22f6(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x22f6;
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0xa0,0x08);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_22f9(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x22f9;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xb6,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_22fb(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x22fb;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xfc,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_22fd(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x22fd;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x58,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_22ff(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x22ff;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x08,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2301(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2301;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2309(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2309;
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0xa0,0x08);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_230c(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x230c;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xbd,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_230e(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x230e;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xfc,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2310(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2310;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x61,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2312(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2312;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x08,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2314(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2314;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_231c(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x231c;
	clk += Opcodes::dec_mem             (aCPU, pc, 0x15,0x92,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x92,0x00);
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xd9,0x05,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2324(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2324;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x01,0x42);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2327(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2327;
	clk += Opcodes::mov_a_imm           (aCPU, pc, 0x74,0x4f,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2329(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2329;
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xdd,0x01,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_232b(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x232b;
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_232c(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x232c;
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0xa0,0x08);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_232f(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x232f;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x7e,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2331(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2331;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xfc,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2333(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2333;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x14,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2335(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2335;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x08,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2337(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2337;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_233f(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x233f;
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0xf0,0xe9);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xef,0x21);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::anl_mem_imm         (aCPU, pc, 0x53,0x85,0x03);
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0xe9,0xf0);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xf0,0x03);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2350(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2350;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x22,0x71);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2353(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2353;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x93,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2355(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2355;
	clk += Opcodes::ajmp_offset         (aCPU, pc, 0x41,0x50,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2357(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2357;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x61,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2359(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2359;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0xc1,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_235b(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x235b;
	clk += Opcodes::jb_bitaddr_offset   (aCPU, pc, 0x20,0xf0,0x2e);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_235e(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x235e;
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0xf0,0xe9);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xef,0x21);
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xf4,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2366(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2366;
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0xe9,0xf0);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xf0,0x03);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_236c(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x236c;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x23,0x90);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_236f(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x236f;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xd4,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2371(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2371;
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xd9,0x03,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2375(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2375;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x01,0x42);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2378(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2378;
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x80,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x3b);
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x80,0x00);
	clk += Opcodes::dec_mem             (aCPU, pc, 0x15,0x82,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x3d);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8b,0x80,0x00);
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xdd,0xd3,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_238b(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x238b;
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_238c(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x238c;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x58,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_238e(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x238e;
	clk += Opcodes::ajmp_offset         (aCPU, pc, 0x81,0x38,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2390(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2390;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x14,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2392(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2392;
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0xa0,0x14);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2395(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2395;
	clk += Opcodes::orl_mem_imm         (aCPU, pc, 0x43,0x80,0x02);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xa6,0x06);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_239b(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x239b;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x9a,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_239d(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x239d;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xd4,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_239f(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x239f;
	clk += Opcodes::ajmp_offset         (aCPU, pc, 0x81,0x82,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_23a1(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x23a1;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x9a,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_23a3(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x23a3;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xfc,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_23a5(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x23a5;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x2b,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_23a7(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x23a7;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x08,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_23a9(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x23a9;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_23b1(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x23b1;
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0xa0,0x08);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_23b4(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x23b4;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xa1,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_23b6(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x23b6;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xfc,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_23b8(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x23b8;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x34,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_23ba(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x23ba;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x08,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_23bc(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x23bc;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_23c4(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x23c4;
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0xa0,0x14);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_23c7(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x23c7;
	clk += Opcodes::orl_mem_imm         (aCPU, pc, 0x43,0x80,0x02);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xa6,0x06);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_23cd(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x23cd;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xa8,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_23cf(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x23cf;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xe4,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_23d1(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x23d1;
	clk += Opcodes::ajmp_offset         (aCPU, pc, 0x81,0x82,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_23d3(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x23d3;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xa8,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_23d5(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x23d5;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xfc,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_23d7(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x23d7;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x3d,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_23d9(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x23d9;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x08,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_23db(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x23db;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_23e3(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x23e3;
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0xa0,0x08);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_23e6(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x23e6;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xaf,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_23e8(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x23e8;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xfc,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_23ea(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x23ea;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x46,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_23ec(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x23ec;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x08,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_23ee(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x23ee;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_23f6(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x23f6;
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0xa0,0x14);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_23f9(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x23f9;
	clk += Opcodes::orl_mem_imm         (aCPU, pc, 0x43,0x80,0x02);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xa6,0x06);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_23ff(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x23ff;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xb6,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2401(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2401;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xf4,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2403(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2403;
	clk += Opcodes::ajmp_offset         (aCPU, pc, 0x81,0x82,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2405(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2405;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xb6,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2407(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2407;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xfc,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2409(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2409;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x4f,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_240b(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x240b;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x08,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_240d(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x240d;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2415(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2415;
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0xa0,0x08);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2418(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2418;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xbd,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_241a(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x241a;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xfc,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_241c(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x241c;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x58,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_241e(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x241e;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x08,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2420(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2420;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2428(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2428;
	clk += Opcodes::dec_mem             (aCPU, pc, 0x15,0x92,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x92,0x00);
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xd9,0x05,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2430(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2430;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x01,0x42);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2433(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2433;
	clk += Opcodes::mov_a_imm           (aCPU, pc, 0x74,0x4f,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2435(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2435;
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xdd,0x01,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2437(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2437;
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2438(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2438;
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0xa0,0x14);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_243b(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x243b;
	clk += Opcodes::orl_mem_imm         (aCPU, pc, 0x43,0x80,0x02);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xa6,0x06);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2441(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2441;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x7e,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2443(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2443;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xf4,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2445(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2445;
	clk += Opcodes::ajmp_offset         (aCPU, pc, 0x81,0x86,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2447(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2447;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x7e,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2449(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2449;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xfc,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_244b(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x244b;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x61,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_244d(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x244d;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x08,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_244f(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x244f;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2457(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2457;
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0xa0,0x08);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_245a(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x245a;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x93,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_245c(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x245c;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xfc,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_245e(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x245e;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x14,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2460(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2460;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x08,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2462(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2462;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_246a(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x246a;
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0xf0,0xe9);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xef,0x21);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::anl_mem_imm         (aCPU, pc, 0x53,0x85,0x03);
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0xe9,0xf0);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xf0,0x03);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_247b(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x247b;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x23,0x90);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_247e(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x247e;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x9a,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2480(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2480;
	clk += Opcodes::ajmp_offset         (aCPU, pc, 0x61,0x6f,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2482(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2482;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x58,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2484(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2484;
	clk += Opcodes::ajmp_offset         (aCPU, pc, 0x81,0x28,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2486(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2486;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x14,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2488(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2488;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0xe0,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_248a(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x248a;
	clk += Opcodes::jb_bitaddr_offset   (aCPU, pc, 0x20,0xf0,0x2e);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_248d(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x248d;
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0xf0,0xe9);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xef,0x21);
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xec,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2495(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2495;
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0xe9,0xf0);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xf0,0x03);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_249b(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x249b;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x24,0xbf);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_249e(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x249e;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xdc,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_24a0(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x24a0;
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xd9,0x03,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_24a4(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x24a4;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x01,0x42);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_24a7(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x24a7;
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x80,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x3b);
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x80,0x00);
	clk += Opcodes::dec_mem             (aCPU, pc, 0x15,0x82,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x3d);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8b,0x80,0x00);
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xdd,0xd3,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_24ba(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x24ba;
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_24bb(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x24bb;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x4f,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_24bd(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x24bd;
	clk += Opcodes::ajmp_offset         (aCPU, pc, 0xa1,0x48,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_24bf(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x24bf;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x14,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_24c1(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x24c1;
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0xa0,0x14);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_24c4(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x24c4;
	clk += Opcodes::orl_mem_imm         (aCPU, pc, 0x43,0x80,0x02);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xa6,0x06);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_24ca(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x24ca;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xa1,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_24cc(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x24cc;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xdc,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_24ce(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x24ce;
	clk += Opcodes::ajmp_offset         (aCPU, pc, 0xa1,0xa5,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_24d0(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x24d0;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xa1,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_24d2(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x24d2;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xfc,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_24d4(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x24d4;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x2b,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_24d6(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x24d6;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x08,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_24d8(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x24d8;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_24e0(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x24e0;
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0xa0,0x08);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_24e3(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x24e3;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xa8,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_24e5(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x24e5;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xfc,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_24e7(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x24e7;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x34,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_24e9(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x24e9;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x08,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_24eb(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x24eb;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_24f3(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x24f3;
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0xa0,0x14);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_24f6(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x24f6;
	clk += Opcodes::orl_mem_imm         (aCPU, pc, 0x43,0x80,0x02);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xa6,0x06);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_24fc(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x24fc;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xaf,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_24fe(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x24fe;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xec,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2500(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2500;
	clk += Opcodes::ajmp_offset         (aCPU, pc, 0xa1,0xa5,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2502(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2502;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xaf,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2504(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2504;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xfc,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2506(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2506;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x3d,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2508(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2508;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x08,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_250a(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x250a;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2512(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2512;
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0xa0,0x08);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2515(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2515;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xb6,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2517(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2517;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xfc,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2519(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2519;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x46,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_251b(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x251b;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x08,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_251d(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x251d;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2525(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2525;
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0xa0,0x08);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2528(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2528;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xbd,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_252a(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x252a;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xfc,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_252c(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x252c;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x4f,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_252e(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x252e;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x08,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2530(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2530;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2538(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2538;
	clk += Opcodes::dec_mem             (aCPU, pc, 0x15,0x92,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x92,0x00);
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xd9,0x05,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2540(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2540;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x01,0x42);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2543(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2543;
	clk += Opcodes::mov_a_imm           (aCPU, pc, 0x74,0x4f,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2545(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2545;
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xdd,0x01,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2547(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2547;
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2548(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2548;
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0xa0,0x14);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_254b(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x254b;
	clk += Opcodes::orl_mem_imm         (aCPU, pc, 0x43,0x80,0x02);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xa6,0x06);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2551(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2551;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x7e,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2553(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2553;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xec,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2555(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2555;
	clk += Opcodes::ajmp_offset         (aCPU, pc, 0xa1,0xa9,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2557(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2557;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x7e,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2559(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2559;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xfc,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_255b(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x255b;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x58,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_255d(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x255d;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x08,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_255f(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x255f;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2567(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2567;
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0xa0,0x08);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_256a(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x256a;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x93,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_256c(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x256c;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xfc,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_256e(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x256e;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x61,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2570(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2570;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x08,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2572(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2572;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_257a(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x257a;
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0xa0,0x08);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_257d(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x257d;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x9a,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_257f(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x257f;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xfc,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2581(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2581;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x14,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2583(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2583;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x08,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2585(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2585;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_258d(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x258d;
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0xf0,0xe9);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xef,0x21);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::anl_mem_imm         (aCPU, pc, 0x53,0x85,0x03);
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0xe9,0xf0);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xf0,0x03);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_259e(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x259e;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x24,0xbf);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_25a1(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x25a1;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xa1,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_25a3(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x25a3;
	clk += Opcodes::ajmp_offset         (aCPU, pc, 0x81,0x9e,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_25a5(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x25a5;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x4f,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_25a7(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x25a7;
	clk += Opcodes::ajmp_offset         (aCPU, pc, 0xa1,0x38,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_25a9(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x25a9;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x14,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_25ab(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x25ab;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0xe0,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_25ad(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x25ad;
	clk += Opcodes::jb_bitaddr_offset   (aCPU, pc, 0x20,0xf0,0x2e);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_25b0(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x25b0;
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0xf0,0xe9);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xef,0x21);
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xe4,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_25b8(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x25b8;
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0xe9,0xf0);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xf0,0x03);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_25be(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x25be;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x25,0xe2);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_25c1(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x25c1;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xe4,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_25c3(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x25c3;
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xd9,0x03,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_25c7(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x25c7;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x01,0x42);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_25ca(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x25ca;
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x80,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x3b);
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x80,0x00);
	clk += Opcodes::dec_mem             (aCPU, pc, 0x15,0x82,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x3d);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8b,0x80,0x00);
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xdd,0xd3,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_25dd(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x25dd;
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_25de(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x25de;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x46,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_25e0(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x25e0;
	clk += Opcodes::ajmp_offset         (aCPU, pc, 0xc1,0x58,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_25e2(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x25e2;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x14,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_25e4(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x25e4;
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0xa0,0x14);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_25e7(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x25e7;
	clk += Opcodes::orl_mem_imm         (aCPU, pc, 0x43,0x80,0x02);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xa6,0x06);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_25ed(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x25ed;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xa8,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_25ef(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x25ef;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xe4,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_25f1(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x25f1;
	clk += Opcodes::ajmp_offset         (aCPU, pc, 0xc1,0xd4,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_25f3(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x25f3;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xa8,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_25f5(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x25f5;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xfc,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_25f7(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x25f7;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x2b,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_25f9(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x25f9;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x08,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_25fb(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x25fb;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2603(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2603;
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0xa0,0x08);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2606(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2606;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xaf,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2608(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2608;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xfc,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_260a(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x260a;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x34,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_260c(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x260c;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x08,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_260e(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x260e;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2616(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2616;
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0xa0,0x14);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2619(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2619;
	clk += Opcodes::orl_mem_imm         (aCPU, pc, 0x43,0x80,0x02);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xa6,0x06);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_261f(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x261f;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xb6,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2621(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2621;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xf4,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2623(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2623;
	clk += Opcodes::ajmp_offset         (aCPU, pc, 0xc1,0xd4,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2625(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2625;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xb6,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2627(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2627;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xfc,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2629(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2629;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x3d,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_262b(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x262b;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x08,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_262d(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x262d;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2635(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2635;
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0xa0,0x08);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2638(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2638;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xbd,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_263a(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x263a;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xfc,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_263c(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x263c;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x46,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_263e(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x263e;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x08,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2640(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2640;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2648(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2648;
	clk += Opcodes::dec_mem             (aCPU, pc, 0x15,0x92,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x92,0x00);
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xd9,0x05,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2650(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2650;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x01,0x42);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2653(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2653;
	clk += Opcodes::mov_a_imm           (aCPU, pc, 0x74,0x4f,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2655(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2655;
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xdd,0x01,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2657(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2657;
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2658(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2658;
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0xa0,0x14);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_265b(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x265b;
	clk += Opcodes::orl_mem_imm         (aCPU, pc, 0x43,0x80,0x02);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xa6,0x06);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2661(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2661;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x7e,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2663(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2663;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xe4,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2665(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2665;
	clk += Opcodes::ajmp_offset         (aCPU, pc, 0xc1,0xd8,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2667(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2667;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x7e,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2669(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2669;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xfc,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_266b(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x266b;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x4f,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_266d(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x266d;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x08,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_266f(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x266f;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2677(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2677;
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0xa0,0x08);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_267a(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x267a;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x93,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_267c(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x267c;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xfc,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_267e(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x267e;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x58,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2680(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2680;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x08,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2682(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2682;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_268a(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x268a;
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0xa0,0x14);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_268d(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x268d;
	clk += Opcodes::orl_mem_imm         (aCPU, pc, 0x43,0x80,0x02);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xa6,0x06);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2693(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2693;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x9a,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2695(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2695;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xf4,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2697(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2697;
	clk += Opcodes::ajmp_offset         (aCPU, pc, 0xc1,0xd8,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2699(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2699;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x9a,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_269b(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x269b;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xfc,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_269d(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x269d;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x61,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_269f(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x269f;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x08,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_26a1(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x26a1;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_26a9(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x26a9;
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0xa0,0x08);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_26ac(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x26ac;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xa1,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_26ae(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x26ae;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xfc,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_26b0(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x26b0;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x14,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_26b2(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x26b2;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x08,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_26b4(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x26b4;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_26bc(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x26bc;
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0xf0,0xe9);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xef,0x21);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::anl_mem_imm         (aCPU, pc, 0x53,0x85,0x03);
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0xe9,0xf0);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xf0,0x03);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_26cd(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x26cd;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x25,0xe2);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_26d0(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x26d0;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xa8,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_26d2(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x26d2;
	clk += Opcodes::ajmp_offset         (aCPU, pc, 0xa1,0xc1,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_26d4(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x26d4;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x46,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_26d6(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x26d6;
	clk += Opcodes::ajmp_offset         (aCPU, pc, 0xc1,0x48,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_26d8(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x26d8;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x14,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_26da(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x26da;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0xe0,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_26dc(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x26dc;
	clk += Opcodes::jb_bitaddr_offset   (aCPU, pc, 0x20,0xf0,0x2e);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_26df(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x26df;
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0xf0,0xe9);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xef,0x21);
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xdc,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_26e7(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x26e7;
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0xe9,0xf0);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xf0,0x03);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_26ed(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x26ed;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x27,0x11);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_26f0(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x26f0;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xec,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_26f2(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x26f2;
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xd9,0x03,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_26f6(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x26f6;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x01,0x42);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_26f9(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x26f9;
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x80,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x3b);
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x80,0x00);
	clk += Opcodes::dec_mem             (aCPU, pc, 0x15,0x82,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x3d);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8b,0x80,0x00);
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xdd,0xd3,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_270c(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x270c;
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_270d(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x270d;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x3d,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_270f(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x270f;
	clk += Opcodes::ajmp_offset         (aCPU, pc, 0xe1,0x68,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2711(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2711;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x14,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2713(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2713;
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0xa0,0x14);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2716(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2716;
	clk += Opcodes::orl_mem_imm         (aCPU, pc, 0x43,0x80,0x02);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xa6,0x06);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_271c(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x271c;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xaf,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_271e(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x271e;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xec,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2720(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2720;
	clk += Opcodes::ajmp_offset         (aCPU, pc, 0xe1,0xf7,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2722(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2722;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xaf,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2724(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2724;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xfc,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2726(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2726;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x2b,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2728(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2728;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x08,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_272a(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x272a;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2732(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2732;
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0xa0,0x08);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2735(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2735;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xb6,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2737(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2737;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xfc,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2739(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2739;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x34,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_273b(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x273b;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x08,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_273d(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x273d;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2745(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2745;
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0xa0,0x08);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2748(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2748;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xbd,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_274a(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x274a;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xfc,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_274c(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x274c;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x3d,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_274e(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x274e;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x08,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2750(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2750;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2758(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2758;
	clk += Opcodes::dec_mem             (aCPU, pc, 0x15,0x92,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x92,0x00);
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xd9,0x05,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2760(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2760;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x01,0x42);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2763(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2763;
	clk += Opcodes::mov_a_imm           (aCPU, pc, 0x74,0x4f,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2765(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2765;
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xdd,0x01,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2767(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2767;
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2768(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2768;
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0xa0,0x14);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_276b(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x276b;
	clk += Opcodes::orl_mem_imm         (aCPU, pc, 0x43,0x80,0x02);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xa6,0x06);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2771(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2771;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x7e,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2773(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2773;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xdc,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2775(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2775;
	clk += Opcodes::ajmp_offset         (aCPU, pc, 0xe1,0xfb,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2777(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2777;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x7e,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2779(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2779;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xfc,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_277b(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x277b;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x46,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_277d(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x277d;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x08,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_277f(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x277f;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2787(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2787;
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0xa0,0x08);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_278a(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x278a;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x93,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_278c(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x278c;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xfc,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_278e(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x278e;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x4f,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2790(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2790;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x08,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2792(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2792;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_279a(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x279a;
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0xa0,0x14);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_279d(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x279d;
	clk += Opcodes::orl_mem_imm         (aCPU, pc, 0x43,0x80,0x02);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xa6,0x06);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_27a3(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x27a3;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x9a,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_27a5(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x27a5;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xec,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_27a7(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x27a7;
	clk += Opcodes::ajmp_offset         (aCPU, pc, 0xe1,0xfb,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_27a9(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x27a9;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x9a,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_27ab(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x27ab;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xfc,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_27ad(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x27ad;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x58,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_27af(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x27af;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x08,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_27b1(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x27b1;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_27b9(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x27b9;
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0xa0,0x08);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_27bc(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x27bc;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xa1,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_27be(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x27be;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xfc,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_27c0(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x27c0;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x61,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_27c2(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x27c2;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x08,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_27c4(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x27c4;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_27cc(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x27cc;
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0xa0,0x08);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_27cf(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x27cf;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xa8,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_27d1(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x27d1;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xfc,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_27d3(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x27d3;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x14,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_27d5(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x27d5;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x08,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_27d7(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x27d7;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_27df(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x27df;
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0xf0,0xe9);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xef,0x21);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::anl_mem_imm         (aCPU, pc, 0x53,0x85,0x03);
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0xe9,0xf0);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xf0,0x03);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_27f0(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x27f0;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x27,0x11);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_27f3(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x27f3;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xaf,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_27f5(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x27f5;
	clk += Opcodes::ajmp_offset         (aCPU, pc, 0xc1,0xf0,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_27f7(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x27f7;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x3d,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_27f9(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x27f9;
	clk += Opcodes::ajmp_offset         (aCPU, pc, 0xe1,0x58,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_27fb(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x27fb;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x14,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_27fd(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x27fd;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0xe0,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_27ff(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x27ff;
	clk += Opcodes::jb_bitaddr_offset   (aCPU, pc, 0x20,0xf0,0x30);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2802(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2802;
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0xf0,0xe9);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xef,0x21);
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x20,0xd4);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_280b(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x280b;
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0xe9,0xf0);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xf0,0x03);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2811(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2811;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x28,0x38);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2814(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2814;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x20,0xf4);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2817(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2817;
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xd9,0x03,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_281b(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x281b;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x01,0x42);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_281e(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x281e;
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x80,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x3b);
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x80,0x00);
	clk += Opcodes::dec_mem             (aCPU, pc, 0x15,0x82,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x3d);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8b,0x80,0x00);
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xdd,0xd1,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2831(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2831;
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2832(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2832;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x20,0x34);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2835(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2835;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x28,0x86);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2838(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2838;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x20,0x14);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_283b(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x283b;
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0xa0,0x1a);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_283e(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x283e;
	clk += Opcodes::orl_mem_imm         (aCPU, pc, 0x43,0x80,0x02);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xa6,0x09);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2844(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2844;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x20,0xb6);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2847(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2847;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x20,0xf4);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_284a(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x284a;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x29,0x51);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_284d(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x284d;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x20,0xb6);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2850(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2850;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x20,0xfc);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2853(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2853;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x20,0x2b);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2856(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2856;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x08,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2858(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2858;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2860(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2860;
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0xa0,0x0b);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2863(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2863;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x20,0xbd);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2866(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2866;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x20,0xfc);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2869(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2869;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x20,0x34);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_286c(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x286c;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x08,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_286e(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x286e;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2876(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2876;
	clk += Opcodes::dec_mem             (aCPU, pc, 0x15,0x92,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x92,0x00);
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xd9,0x05,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_287e(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x287e;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x01,0x42);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2881(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2881;
	clk += Opcodes::mov_a_imm           (aCPU, pc, 0x74,0x4f,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2883(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2883;
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xdd,0x01,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2885(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2885;
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2886(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2886;
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0xa0,0x1a);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2889(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2889;
	clk += Opcodes::orl_mem_imm         (aCPU, pc, 0x43,0x80,0x02);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xa6,0x09);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_288f(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x288f;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x20,0x7e);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2892(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2892;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x20,0xd4);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2895(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2895;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x29,0x57);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2898(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2898;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x20,0x7e);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_289b(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x289b;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x20,0xfc);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_289e(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x289e;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x20,0x3d);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_28a1(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x28a1;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x08,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_28a3(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x28a3;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_28ab(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x28ab;
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0xa0,0x0b);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_28ae(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x28ae;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x20,0x93);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_28b1(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x28b1;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x20,0xfc);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_28b4(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x28b4;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x20,0x46);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_28b7(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x28b7;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x08,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_28b9(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x28b9;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_28c1(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x28c1;
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0xa0,0x1a);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_28c4(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x28c4;
	clk += Opcodes::orl_mem_imm         (aCPU, pc, 0x43,0x80,0x02);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xa6,0x09);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_28ca(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x28ca;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x20,0x9a);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_28cd(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x28cd;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x20,0xe4);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_28d0(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x28d0;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x29,0x57);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_28d3(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x28d3;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x20,0x9a);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_28d6(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x28d6;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x20,0xfc);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_28d9(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x28d9;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x20,0x4f);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_28dc(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x28dc;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x08,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_28de(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x28de;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_28e6(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x28e6;
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0xa0,0x0b);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_28e9(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x28e9;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x20,0xa1);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_28ec(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x28ec;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x20,0xfc);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_28ef(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x28ef;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x20,0x58);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_28f2(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x28f2;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x08,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_28f4(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x28f4;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_28fc(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x28fc;
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0xa0,0x1a);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_28ff(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x28ff;
	clk += Opcodes::orl_mem_imm         (aCPU, pc, 0x43,0x80,0x02);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xa6,0x09);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2905(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2905;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x20,0xa8);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2908(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2908;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x20,0xf4);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_290b(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x290b;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x29,0x57);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_290e(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x290e;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x20,0xa8);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2911(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2911;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x20,0xfc);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2914(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2914;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x20,0x61);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2917(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2917;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x08,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2919(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2919;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2921(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2921;
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0xa0,0x0b);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2924(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2924;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x20,0xaf);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2927(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2927;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x20,0xfc);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_292a(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x292a;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x20,0x14);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_292d(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x292d;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x08,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_292f(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x292f;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2937(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2937;
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0xf0,0xe9);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xef,0x21);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::anl_mem_imm         (aCPU, pc, 0x53,0x85,0x03);
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0xe9,0xf0);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xf0,0x03);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2948(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2948;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x28,0x38);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_294b(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x294b;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x20,0xb6);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_294e(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x294e;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x28,0x14);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2951(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2951;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x20,0x34);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2954(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2954;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x28,0x76);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2957(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2957;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x20,0x14);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_295a(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x295a;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0xdb,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_295c(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x295c;
	clk += Opcodes::jb_bitaddr_offset   (aCPU, pc, 0x20,0xf0,0x35);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_295f(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x295f;
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0xf0,0xe9);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xef,0x21);
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x20,0xcc);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2968(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2968;
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0xe9,0xf0);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xf0,0x03);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_296e(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x296e;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x29,0x9a);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2971(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2971;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xd9,0x03,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_297d(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x297d;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x01,0x42);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2980(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2980;
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x80,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x3b);
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x80,0x00);
	clk += Opcodes::dec_mem             (aCPU, pc, 0x15,0x82,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x3d);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8b,0x80,0x00);
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xdd,0xcc,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2993(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2993;
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2994(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2994;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x20,0x2b);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2997(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2997;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x29,0xc3);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_299a(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x299a;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x20,0x14);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_299d(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x299d;
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0xa0,0x0b);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_29a0(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x29a0;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x20,0xbd);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_29a3(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x29a3;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x20,0xfc);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_29a6(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x29a6;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x20,0x2b);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_29a9(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x29a9;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x08,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_29ab(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x29ab;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_29b3(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x29b3;
	clk += Opcodes::dec_mem             (aCPU, pc, 0x15,0x92,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x92,0x00);
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xd9,0x05,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_29bb(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x29bb;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x01,0x42);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_29be(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x29be;
	clk += Opcodes::mov_a_imm           (aCPU, pc, 0x74,0x4f,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_29c0(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x29c0;
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xdd,0x01,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_29c2(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x29c2;
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_29c3(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x29c3;
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0xa0,0x1a);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_29c6(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x29c6;
	clk += Opcodes::orl_mem_imm         (aCPU, pc, 0x43,0x80,0x02);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xa6,0x09);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_29cc(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x29cc;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x20,0x7e);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_29cf(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x29cf;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x20,0xcc);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_29d2(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x29d2;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x2a,0xa4);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_29d5(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x29d5;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x20,0x7e);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_29d8(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x29d8;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x20,0xfc);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_29db(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x29db;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x20,0x34);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_29de(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x29de;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x08,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_29e0(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x29e0;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_29e8(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x29e8;
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0xa0,0x0b);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_29eb(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x29eb;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x20,0x93);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_29ee(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x29ee;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x20,0xfc);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_29f1(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x29f1;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x20,0x3d);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_29f4(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x29f4;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x08,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_29f6(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x29f6;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_29fe(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x29fe;
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0xa0,0x1a);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2a01(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2a01;
	clk += Opcodes::orl_mem_imm         (aCPU, pc, 0x43,0x80,0x02);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xa6,0x09);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2a07(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2a07;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x20,0x9a);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2a0a(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2a0a;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x20,0xdc);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2a0d(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2a0d;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x2a,0xa4);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2a10(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2a10;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x20,0x9a);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2a13(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2a13;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x20,0xfc);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2a16(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2a16;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x20,0x46);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2a19(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2a19;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x08,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2a1b(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2a1b;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2a23(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2a23;
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0xa0,0x0b);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2a26(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2a26;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x20,0xa1);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2a29(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2a29;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x20,0xfc);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2a2c(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2a2c;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x20,0x4f);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2a2f(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2a2f;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x08,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2a31(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2a31;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2a39(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2a39;
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0xa0,0x1a);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2a3c(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2a3c;
	clk += Opcodes::orl_mem_imm         (aCPU, pc, 0x43,0x80,0x02);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xa6,0x09);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2a42(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2a42;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x20,0xa8);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2a45(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2a45;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x20,0xec);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2a48(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2a48;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x2a,0xa4);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2a4b(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2a4b;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x20,0xa8);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2a4e(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2a4e;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x20,0xfc);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2a51(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2a51;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x20,0x58);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2a54(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2a54;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x08,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2a56(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2a56;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2a5e(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2a5e;
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0xa0,0x0b);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2a61(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2a61;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x20,0xaf);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2a64(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2a64;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x20,0xfc);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2a67(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2a67;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x20,0x61);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2a6a(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2a6a;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x08,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2a6c(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2a6c;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2a74(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2a74;
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0xa0,0x0b);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2a77(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2a77;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x20,0xb6);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2a7a(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2a7a;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x20,0xfc);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2a7d(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2a7d;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x20,0x14);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2a80(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2a80;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x08,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2a82(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2a82;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2a8a(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2a8a;
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0xf0,0xe9);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xef,0x21);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::anl_mem_imm         (aCPU, pc, 0x53,0x85,0x03);
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0xe9,0xf0);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xf0,0x03);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2a9b(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2a9b;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x29,0x9a);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2a9e(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2a9e;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x20,0xbd);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2aa1(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2aa1;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x29,0x71);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2aa4(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2aa4;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x20,0x14);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2aa7(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2aa7;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0xe1,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2aa9(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2aa9;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x20,0x7e);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2aac(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2aac;
	clk += Opcodes::mov_rx_mem          (aCPU, pc, 0xac,0x32,0x00);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0x05,0x15);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2ab1(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2ab1;
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0x04,0x09);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2ab4(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2ab4;
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0x03,0x03);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2ab7(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2ab7;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x29,0x5c);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2aba(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2aba;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x27,0xff);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2abd(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2abd;
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0x03,0x03);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2ac0(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2ac0;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x26,0xdc);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2ac3(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2ac3;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x25,0xad);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2ac6(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2ac6;
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0x04,0x09);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2ac9(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2ac9;
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0x03,0x03);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2acc(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2acc;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x24,0x8a);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2acf(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2acf;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x23,0x5b);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2ad2(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2ad2;
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0x03,0x03);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2ad5(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2ad5;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x22,0x36);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2ad8(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2ad8;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x21,0x05);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2adb(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2adb;
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xf0,0x06);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2ade(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2ade;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x20,0x14);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2ae1(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2ae1;
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0xa0,0x03);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2ae4(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2ae4;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x20,0x7e);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2ae7(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2ae7;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xeb,0x00,0x00);
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0x04,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfb,0x00,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0x1f,0x00);
	clk += Opcodes::jnz_offset          (aCPU, pc, 0x70,0x0e,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2af7(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2af7;
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xeb,0x00,0x00);
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0xe0,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfb,0x00,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x92,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xd9,0x03,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2b02(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2b02;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x01,0x42);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2b05(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2b05;
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xec,0x00,0x00);
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0x04,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfc,0x00,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0x1f,0x00);
	clk += Opcodes::jnz_offset          (aCPU, pc, 0x70,0x18,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2b0d(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2b0d;
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0xf0,0xe9);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xef,0x21);
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xec,0x00,0x00);
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0xe0,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfc,0x00,0x00);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xf0,0x08);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2b1a(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2b1a;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x92,0x01);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::anl_mem_imm         (aCPU, pc, 0x53,0x85,0x03);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2b22(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2b22;
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0xe9,0xf0);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2b25(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2b25;
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xdd,0xb4,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2b27(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2b27;
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2b28(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2b28;
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0x28,0x82);
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0x29,0x83);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x27,0x00);
	clk += Opcodes::add_a_mem           (aCPU, pc, 0x25,0x25,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfb,0x00,0x00);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x32,0x00);
	clk += Opcodes::add_a_mem           (aCPU, pc, 0x25,0x30,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfc,0x00,0x00);
	clk += Opcodes::mov_rx_mem          (aCPU, pc, 0xa9,0x26,0x00);
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0xe9,0xf0);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x23,0x00);
	clk += Opcodes::jb_bitaddr_offset   (aCPU, pc, 0x20,0xe3,0x18);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2b42(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2b42;
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfd,0x00,0x00);
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x2a,0xdb);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2b46(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2b46;
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7d,0x0f,0x00);
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x2a,0xa9);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2b4b(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2b4b;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x92,0x00);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x32,0x00);
	clk += Opcodes::add_a_mem           (aCPU, pc, 0x25,0x31,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfc,0x00,0x00);
	clk += Opcodes::mov_rx_mem          (aCPU, pc, 0xad,0x24,0x00);
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x2a,0xdb);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2b58(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2b58;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x05,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2b5a(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2b5a;
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7d,0x10,0x00);
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x2a,0xa9);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2b5f(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2b5f;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x92,0x00);
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2b63(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2b63;
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::anl_mem_imm         (aCPU, pc, 0x53,0x06,0x01);
	clk += Opcodes::orl_mem_a           (aCPU, pc, 0x42,0x06,0x00);
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xf8,0x00,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0x06,0x00);
	clk += Opcodes::anl_mem_imm         (aCPU, pc, 0x53,0x07,0xf9);
	clk += Opcodes::orl_mem_a           (aCPU, pc, 0x42,0x07,0x00);
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xd9,0x03,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2b76(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2b76;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x01,0x42);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2b79(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2b79;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x92,0x01);
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xe8,0x00,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0xf0,0x00);
	clk += Opcodes::xrl_a_rx            (aCPU, pc, 0x6b,0x00,0x00);
	clk += Opcodes::jz_offset           (aCPU, pc, 0x60,0x09,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2b82(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2b82;
	clk += Opcodes::xrl_a_rx            (aCPU, pc, 0x6b,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfb,0x00,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xd0,0x10);
	clk += Opcodes::mov_dptr_imm        (aCPU, pc, 0x90,0x2f,0x00);
	clk += Opcodes::jmp_indir_a_dptr    (aCPU, pc, 0x73,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2b8b(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2b8b;
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2b8c(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2b8c;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x2b,0x63);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2b8f(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2b8f;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xd0,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8e,0x84,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8f,0x85,0x00);
	clk += Opcodes::clr_a               (aCPU, pc, 0xe4,0x00,0x00);
	clk += Opcodes::movc_a_indir_a_dptr (aCPU, pc, 0x93,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x11,0x00);
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xe8,0x00,0x00);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xe3,0x67);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2b9e(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2b9e;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x09,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2ba0(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2ba0;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xd0,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x92,0x00);
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xdd,0xe4,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2ba8(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2ba8;
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2ba9(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2ba9;
	clk += Opcodes::mov_a_imm           (aCPU, pc, 0x74,0x02,0x00);
	clk += Opcodes::movc_a_indir_a_dptr (aCPU, pc, 0x93,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfa,0x00,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7c,0x08,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xd0,0x10);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2bb2(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2bb2;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x02,0x00);
	clk += Opcodes::rrc_a               (aCPU, pc, 0x13,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x02,0x00);
	clk += Opcodes::jc_offset           (aCPU, pc, 0x40,0x25,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2bb9(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2bb9;
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xe9,0x00,0x00);
	clk += Opcodes::rrc_a               (aCPU, pc, 0x13,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xf9,0x00,0x00);
	clk += Opcodes::jc_offset           (aCPU, pc, 0x40,0x0f,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2bbe(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2bbe;
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x88,0xa0,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::djnz_mem_offset     (aCPU, pc, 0xd5,0x04,0xe7);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2bcb(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2bcb;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0xd3,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2bcd(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2bcd;
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8b,0xa0,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8a,0xa0,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::djnz_mem_offset     (aCPU, pc, 0xd5,0x04,0xd6);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2bdc(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2bdc;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0xc2,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2bde(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2bde;
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xe9,0x00,0x00);
	clk += Opcodes::rrc_a               (aCPU, pc, 0x13,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xf9,0x00,0x00);
	clk += Opcodes::jc_offset           (aCPU, pc, 0x40,0x11,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2be3(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2be3;
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8d,0xa0,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8c,0xa0,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::djnz_mem_offset     (aCPU, pc, 0xd5,0x04,0xc0);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2bf2(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2bf2;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0xac,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2bf4(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2bf4;
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8f,0xa0,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8e,0xa0,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::djnz_mem_offset     (aCPU, pc, 0xd5,0x04,0xaf);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2c03(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2c03;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x9b,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2c05(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2c05;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xd0,0x10);
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xe9,0x00,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x88,0xa0,0x00);
	clk += Opcodes::jz_offset           (aCPU, pc, 0x60,0x5b,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2c0d(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2c0d;
	clk += Opcodes::rrc_a               (aCPU, pc, 0x13,0x00,0x00);
	clk += Opcodes::jc_offset           (aCPU, pc, 0x40,0x5b,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2c10(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2c10;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::rrc_a               (aCPU, pc, 0x13,0x00,0x00);
	clk += Opcodes::jc_offset           (aCPU, pc, 0x40,0x5f,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2c1b(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2c1b;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::rrc_a               (aCPU, pc, 0x13,0x00,0x00);
	clk += Opcodes::jc_offset           (aCPU, pc, 0x40,0x63,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2c26(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2c26;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::rrc_a               (aCPU, pc, 0x13,0x00,0x00);
	clk += Opcodes::jc_offset           (aCPU, pc, 0x40,0x67,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2c31(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2c31;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::rrc_a               (aCPU, pc, 0x13,0x00,0x00);
	clk += Opcodes::jc_offset           (aCPU, pc, 0x40,0x6b,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2c3c(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2c3c;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::rrc_a               (aCPU, pc, 0x13,0x00,0x00);
	clk += Opcodes::jc_offset           (aCPU, pc, 0x40,0x6f,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2c47(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2c47;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::rrc_a               (aCPU, pc, 0x13,0x00,0x00);
	clk += Opcodes::jc_offset           (aCPU, pc, 0x40,0x73,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2c52(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2c52;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::rrc_a               (aCPU, pc, 0x13,0x00,0x00);
	clk += Opcodes::jc_offset           (aCPU, pc, 0x40,0x77,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2c5d(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2c5d;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x2b,0xa0);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2c68(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2c68;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x2d,0x06);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2c6b(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2c6b;
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8b,0xa0,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8a,0xa0,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::rrc_a               (aCPU, pc, 0x13,0x00,0x00);
	clk += Opcodes::jnc_offset          (aCPU, pc, 0x50,0x69,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2c7a(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2c7a;
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8b,0xa0,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8a,0xa0,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::rrc_a               (aCPU, pc, 0x13,0x00,0x00);
	clk += Opcodes::jnc_offset          (aCPU, pc, 0x50,0x5f,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2c89(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2c89;
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8b,0xa0,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8a,0xa0,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::rrc_a               (aCPU, pc, 0x13,0x00,0x00);
	clk += Opcodes::jnc_offset          (aCPU, pc, 0x50,0x55,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2c98(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2c98;
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8b,0xa0,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8a,0xa0,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::rrc_a               (aCPU, pc, 0x13,0x00,0x00);
	clk += Opcodes::jnc_offset          (aCPU, pc, 0x50,0x4b,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2ca7(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2ca7;
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8b,0xa0,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8a,0xa0,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::rrc_a               (aCPU, pc, 0x13,0x00,0x00);
	clk += Opcodes::jnc_offset          (aCPU, pc, 0x50,0x41,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2cb6(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2cb6;
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8b,0xa0,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8a,0xa0,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::rrc_a               (aCPU, pc, 0x13,0x00,0x00);
	clk += Opcodes::jnc_offset          (aCPU, pc, 0x50,0x37,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2cc5(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2cc5;
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8b,0xa0,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8a,0xa0,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::rrc_a               (aCPU, pc, 0x13,0x00,0x00);
	clk += Opcodes::jnc_offset          (aCPU, pc, 0x50,0x2d,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2cd4(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2cd4;
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8b,0xa0,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8a,0xa0,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x2b,0xa0);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2ce3(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2ce3;
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x88,0xa0,0x00);
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x2c,0x1b);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2ce8(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2ce8;
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x88,0xa0,0x00);
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x2c,0x26);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2ced(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2ced;
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x88,0xa0,0x00);
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x2c,0x31);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2cf2(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2cf2;
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x88,0xa0,0x00);
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x2c,0x3c);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2cf7(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2cf7;
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x88,0xa0,0x00);
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x2c,0x47);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2cfc(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2cfc;
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x88,0xa0,0x00);
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x2c,0x52);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2d01(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2d01;
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x88,0xa0,0x00);
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x2c,0x5d);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2d06(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2d06;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x20,0xc4);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2d09(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2d09;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x2b,0xa0);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2d0c(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2d0c;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x2b,0x63);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2d0f(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2d0f;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xd0,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8e,0x84,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8f,0x85,0x00);
	clk += Opcodes::clr_a               (aCPU, pc, 0xe4,0x00,0x00);
	clk += Opcodes::movc_a_indir_a_dptr (aCPU, pc, 0x93,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x11,0x00);
	clk += Opcodes::mov_a_imm           (aCPU, pc, 0x74,0x02,0x00);
	clk += Opcodes::movc_a_indir_a_dptr (aCPU, pc, 0x93,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfa,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2d1e(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2d1e;
	clk += Opcodes::cjne_rx_imm_offset  (aCPU, pc, 0xbd,0x00,0x31);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2d21(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2d21;
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xe8,0x00,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xd0,0x10);
	clk += Opcodes::jb_bitaddr_offset   (aCPU, pc, 0x20,0xe3,0x35);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2d28(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2d28;
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xe9,0x00,0x00);
	clk += Opcodes::rrc_a               (aCPU, pc, 0x13,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xf9,0x00,0x00);
	clk += Opcodes::jc_offset           (aCPU, pc, 0x40,0x0f,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2d2d(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2d2d;
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x88,0xa0,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::djnz_mem_offset     (aCPU, pc, 0xd5,0x04,0xee);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2d3a(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2d3a;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x0f,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2d3c(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2d3c;
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8b,0xa0,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8a,0xa0,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::djnz_mem_offset     (aCPU, pc, 0xd5,0x04,0xdd);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2d4b(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2d4b;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xd0,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x92,0x00);
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2d52(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2d52;
	clk += Opcodes::dec_rx              (aCPU, pc, 0x1d,0x00,0x00);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x11,0x00);
	clk += Opcodes::rr_a                (aCPU, pc, 0x03,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x11,0x00);
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xea,0x00,0x00);
	clk += Opcodes::rr_a                (aCPU, pc, 0x03,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfa,0x00,0x00);
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0xc1,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2d5d(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2d5d;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x02,0x00);
	clk += Opcodes::rrc_a               (aCPU, pc, 0x13,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x02,0x00);
	clk += Opcodes::jc_offset           (aCPU, pc, 0x40,0x25,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2d64(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2d64;
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xe9,0x00,0x00);
	clk += Opcodes::rrc_a               (aCPU, pc, 0x13,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xf9,0x00,0x00);
	clk += Opcodes::jc_offset           (aCPU, pc, 0x40,0x0f,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2d69(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2d69;
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x88,0xa0,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::djnz_mem_offset     (aCPU, pc, 0xd5,0x04,0xe7);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2d76(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2d76;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0xd3,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2d78(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2d78;
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8b,0xa0,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8a,0xa0,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::djnz_mem_offset     (aCPU, pc, 0xd5,0x04,0xd6);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2d87(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2d87;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0xc2,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2d89(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2d89;
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xe9,0x00,0x00);
	clk += Opcodes::rrc_a               (aCPU, pc, 0x13,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xf9,0x00,0x00);
	clk += Opcodes::jc_offset           (aCPU, pc, 0x40,0x11,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2d8e(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2d8e;
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8d,0xa0,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8c,0xa0,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::djnz_mem_offset     (aCPU, pc, 0xd5,0x04,0xc0);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2d9d(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2d9d;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0xac,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2d9f(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2d9f;
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8f,0xa0,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8e,0xa0,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::djnz_mem_offset     (aCPU, pc, 0xd5,0x04,0xaf);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2dae(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2dae;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x9b,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2db0(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2db0;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x95,0x00);
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0x28,0x82);
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0x29,0x83);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7b,0xff,0x00);
	clk += Opcodes::mov_rx_mem          (aCPU, pc, 0xa9,0x26,0x00);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x27,0x00);
	clk += Opcodes::swap_a              (aCPU, pc, 0xc4,0x00,0x00);
	clk += Opcodes::rr_a                (aCPU, pc, 0x03,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfe,0x00,0x00);
	clk += Opcodes::anl_mem_imm         (aCPU, pc, 0x53,0x06,0x01);
	clk += Opcodes::clr_c               (aCPU, pc, 0xc3,0x00,0x00);
	clk += Opcodes::rrc_a               (aCPU, pc, 0x13,0x00,0x00);
	clk += Opcodes::clr_c               (aCPU, pc, 0xc3,0x00,0x00);
	clk += Opcodes::rrc_a               (aCPU, pc, 0x13,0x00,0x00);
	clk += Opcodes::rl_a                (aCPU, pc, 0x23,0x00,0x00);
	clk += Opcodes::rl_a                (aCPU, pc, 0x23,0x00,0x00);
	clk += Opcodes::rlc_a               (aCPU, pc, 0x33,0x00,0x00);
	clk += Opcodes::orl_a_imm           (aCPU, pc, 0x44,0x30,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xff,0x00,0x00);
	clk += Opcodes::mov_rx_mem          (aCPU, pc, 0xac,0x23,0x00);
	clk += Opcodes::mov_rx_mem          (aCPU, pc, 0xad,0x24,0x00);
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x2d,0x0c);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2dd6(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2dd6;
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7d,0x0f,0x00);
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x2b,0x8c);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2ddb(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2ddb;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x24,0x00);
	clk += Opcodes::jz_offset           (aCPU, pc, 0x60,0x07,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2ddf(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2ddf;
	clk += Opcodes::inc_rx              (aCPU, pc, 0x09,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfc,0x00,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7d,0x00,0x00);
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x2d,0x0c);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2de6(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2de6;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x95,0xff);
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2dea(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2dea;
	clk += Opcodes::mov_dptr_imm        (aCPU, pc, 0x90,0x03,0xfd);
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfa,0x00,0x00);
	clk += Opcodes::push_mem            (aCPU, pc, 0xc0,0x02,0x00);
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x0f,0xd9);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2df4(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2df4;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x01,0xe7);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2df7(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2df7;
	clk += Opcodes::pop_mem             (aCPU, pc, 0xd0,0x02,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2df9(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2df9;
	clk += Opcodes::push_mem            (aCPU, pc, 0xc0,0x02,0x00);
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x2d,0xb0);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2dfe(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2dfe;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x02,0x67);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2e01(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2e01;
	clk += Opcodes::pop_mem             (aCPU, pc, 0xd0,0x02,0x00);
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xda,0xf4,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2e05(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2e05;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x10,0x67);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2f00(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2f00;
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x78,0xff,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7a,0x00,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7b,0x00,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7c,0x49,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7d,0x4a,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7e,0xb2,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7f,0x94,0x00);
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2f10(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2f10;
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x78,0xff,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7a,0xbf,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7b,0x25,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7c,0x80,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7d,0xfc,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7e,0xdf,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7f,0xb6,0x00);
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2f20(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2f20;
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x78,0xff,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7a,0x80,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7b,0xfc,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7c,0xbf,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7d,0x25,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7e,0xd5,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7f,0xfe,0x00);
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2f30(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2f30;
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x78,0x50,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7a,0x80,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7b,0xfc,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7c,0xbf,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7d,0x25,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7e,0xff,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7f,0xff,0x00);
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2f40(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2f40;
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x78,0xff,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7a,0x00,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7b,0xb0,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7c,0x08,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7d,0xca,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7e,0xf7,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7f,0xed,0x00);
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2f50(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2f50;
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x78,0xff,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7a,0xef,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7b,0x7b,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7c,0x14,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7d,0xa5,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7e,0x59,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7f,0xce,0x00);
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2f60(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2f60;
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x78,0x00,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7a,0xff,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7b,0xff,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7c,0xb2,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7d,0x94,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7e,0x49,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7f,0x4a,0x00);
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2f70(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2f70;
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x78,0xef,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7a,0xff,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7b,0xff,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7c,0x59,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7d,0xce,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7e,0x14,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7f,0xa5,0x00);
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2f80(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2f80;
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x78,0xff,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7a,0xdf,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7b,0x96,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7c,0x2f,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7d,0xfe,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7e,0x5f,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7f,0xdf,0x00);
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2f90(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2f90;
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x78,0xff,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7a,0x2f,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7b,0xfe,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7c,0xdf,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7d,0x96,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7e,0x5a,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7f,0xff,0x00);
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2fa0(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2fa0;
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x78,0xff,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7a,0xff,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7b,0xff,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7c,0xff,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7d,0xff,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7e,0xff,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7f,0xff,0x00);
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2fb0(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2fb0;
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x78,0xff,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7a,0xff,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7b,0xff,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7c,0xff,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7d,0xff,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7e,0xff,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7f,0xff,0x00);
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2fc0(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2fc0;
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x78,0xff,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7a,0xff,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7b,0xff,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7c,0xff,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7d,0xff,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7e,0xff,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7f,0xff,0x00);
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2fd0(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2fd0;
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x78,0xff,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7a,0xff,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7b,0xff,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7c,0xff,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7d,0xff,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7e,0xff,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7f,0xff,0x00);
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2fe0(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2fe0;
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x78,0xff,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7a,0xff,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7b,0xff,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7c,0xff,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7d,0xff,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7e,0xff,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7f,0xff,0x00);
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2ff0(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2ff0;
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x78,0xff,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7a,0xff,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7b,0xff,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7c,0xff,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7d,0xff,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7e,0xff,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7f,0xff,0x00);
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}
const sbt_block_t sbt_rom_code[] = {
	&sbt_block_0000,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0003,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_000b,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0013,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_001b,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0023,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_002b,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0033,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_003b,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0043,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_004b,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0053,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0056,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0059,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_00b4,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_00b7,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_00ba,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_00bd,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_00c0,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_00c3,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_00c6,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_00cd,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_00d2,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_00d5,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_00de,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_00e1,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_00e4,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_00e7,
	&sbt_exception,
	&sbt_block_00e9,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_00f0,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_00f6,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0102,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0105,
	&sbt_block_0106,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0109,
	&sbt_block_010a,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_010d,
	&sbt_block_010e,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0111,
	&sbt_block_0112,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0115,
	&sbt_block_0116,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0119,
	&sbt_block_011a,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_011d,
	&sbt_block_011e,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0121,
	&sbt_block_0122,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0125,
	&sbt_block_0126,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0129,
	&sbt_block_012a,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_012d,
	&sbt_block_012e,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0131,
	&sbt_block_0132,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0135,
	&sbt_block_0136,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0139,
	&sbt_block_013a,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_013d,
	&sbt_block_013e,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0141,
	&sbt_block_0142,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0156,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_016e,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_017a,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0182,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_018c,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0190,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_01a0,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_01ac,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_01b2,
	&sbt_exception,
	&sbt_block_01b4,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_01b8,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_01cb,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_01d7,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_01dc,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_01e6,
	&sbt_block_01e7,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0267,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_026f,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0285,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0291,
	&sbt_block_0292,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_029c,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_029f,
	&sbt_exception,
	&sbt_block_02a1,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_02a6,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_02a9,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_02ad,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_02b0,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_02ba,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_02bd,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_02c0,
	&sbt_exception,
	&sbt_block_02c2,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_02c5,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_02ca,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_02ce,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_02d3,
	&sbt_exception,
	&sbt_block_02d5,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_02da,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_02dd,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_02e1,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_02e4,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_02ea,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_02fa,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_02fd,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0309,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0313,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_031d,
	&sbt_exception,
	&sbt_block_031f,
	&sbt_exception,
	&sbt_block_0321,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0328,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_032b,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0330,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0336,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_033c,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0340,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0346,
	&sbt_exception,
	&sbt_block_0348,
	&sbt_block_0349,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0378,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_03cf,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_03d9,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_03dc,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_03e0,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_03ec,
	&sbt_exception,
	&sbt_block_03ee,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_03f2,
	&sbt_exception,
	&sbt_block_03f4,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_040b,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_041c,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_041f,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0422,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_042a,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_042d,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0437,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_043a,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0443,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_044c,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_044f,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0452,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0455,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0458,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_045b,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_045f,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0462,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0465,
	&sbt_exception,
	&sbt_block_0467,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_046a,
	&sbt_exception,
	&sbt_block_046c,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_046f,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0472,
	&sbt_exception,
	&sbt_block_0474,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0477,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_047a,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_047d,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0480,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0485,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0488,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0494,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_04a2,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_04a5,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_04b0,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_04b6,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_04bb,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_04cc,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_04cf,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_04d2,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_04d5,
	&sbt_exception,
	&sbt_block_04d7,
	&sbt_block_04d8,
	&sbt_block_04d9,
	&sbt_block_04da,
	&sbt_block_04db,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_04e0,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_04e7,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_04f5,
	&sbt_exception,
	&sbt_block_04f7,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_04fa,
	&sbt_exception,
	&sbt_block_04fc,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_050e,
	&sbt_exception,
	&sbt_block_0510,
	&sbt_exception,
	&sbt_block_0512,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_051a,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0522,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_052a,
	&sbt_block_052b,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0541,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_054d,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0551,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0554,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_055b,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0571,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_057d,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0581,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0584,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_058b,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_05a1,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_05ad,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_05b1,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_05b4,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_05bb,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_05d1,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_05dd,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_05e1,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_05e4,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_05eb,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_05f3,
	&sbt_block_05f4,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_05fa,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0602,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0607,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_060f,
	&sbt_block_0610,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0616,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_061e,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0623,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_062b,
	&sbt_block_062c,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0632,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_063a,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_063f,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0647,
	&sbt_block_0648,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_064e,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0656,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_065b,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0660,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0663,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_066b,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_066e,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0671,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0679,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_067c,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_067f,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0687,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_068a,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_068d,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0695,
	&sbt_exception,
	&sbt_block_0697,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_069a,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_069d,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_06a0,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_06a3,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_06a6,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_06a9,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_06ac,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_06af,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_06b2,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_06b5,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_06b8,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_06bb,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_06be,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_06c1,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_06c4,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_06c7,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_06ca,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_06cd,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_06d0,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_06d3,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_06d6,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_06d9,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_06dc,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_06df,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_06e2,
	&sbt_exception,
	&sbt_block_06e4,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_06f5,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0706,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_070a,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_070e,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0711,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0718,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_071d,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0720,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0723,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_072a,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_072f,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0732,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0735,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_073c,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0741,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0744,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0747,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_074e,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0753,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0758,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_075b,
	&sbt_block_075c,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_075f,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0774,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_077d,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0780,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0789,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_078c,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0795,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0798,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_079e,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_07a1,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_07a4,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_07ab,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_07bd,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_07dd,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_07e7,
	&sbt_exception,
	&sbt_block_07e9,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_07ec,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_07f7,
	&sbt_exception,
	&sbt_block_07f9,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_07fd,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0800,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0816,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_081a,
	&sbt_exception,
	&sbt_block_081c,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_081f,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0829,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0832,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0840,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0847,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0870,
	&sbt_block_0871,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_087b,
	&sbt_block_087c,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0884,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_088c,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_088f,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0897,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_08a3,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_08a7,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_08b3,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_08b8,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_08bd,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_08cd,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_08d0,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_08d3,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_08d7,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_08e1,
	&sbt_block_08e2,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_08e6,
	&sbt_exception,
	&sbt_block_08e8,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_08f8,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_08fb,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0902,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0906,
	&sbt_exception,
	&sbt_block_0908,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_090b,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0915,
	&sbt_block_0916,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_091b,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_091e,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0921,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0924,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0927,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_092f,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0932,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0935,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_093d,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0940,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0943,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_094b,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_094e,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0951,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0959,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_095c,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_095f,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0962,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0965,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0968,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_096b,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_096e,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0971,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0974,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0977,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_097a,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_097d,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0980,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0983,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0986,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0989,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_098c,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_098f,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0992,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0995,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0998,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_099b,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_099e,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_09a1,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_09a4,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_09a7,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_09aa,
	&sbt_exception,
	&sbt_block_09ac,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_09af,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_09c0,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_09cd,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_09d5,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_09d8,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_09e0,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_09e4,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_09eb,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_09ee,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_09f5,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_09fa,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_09fd,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0a00,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0a07,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0a0c,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0a0f,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0a12,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0a19,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0a1e,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0a21,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0a24,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0a2b,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0a30,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0a35,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0a38,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0a3c,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0a3f,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0a45,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0a55,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0a58,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0a61,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0a64,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0a6d,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0a70,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0a76,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0a79,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0a7c,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0a8e,
	&sbt_exception,
	&sbt_block_0a90,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0a93,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0a9a,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0a9d,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0ab9,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0ac2,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0ac8,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0af2,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0b0b,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0b2a,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0b36,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0b39,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0b3f,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0b56,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0b6f,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0b72,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0b75,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0b78,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0b82,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0b87,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0b96,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0b9c,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0bb3,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0bcc,
	&sbt_exception,
	&sbt_block_0bce,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0be2,
	&sbt_exception,
	&sbt_block_0be4,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0bec,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0bf4,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0c04,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0c18,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0c28,
	&sbt_exception,
	&sbt_block_0c2a,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0c4c,
	&sbt_exception,
	&sbt_block_0c4e,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0c51,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0c54,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0c59,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0cd8,
	&sbt_block_0cd9,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0ceb,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0cf4,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0d01,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0d0b,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0d18,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0d22,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0d2f,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0d39,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0d46,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0d5b,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0d61,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0d77,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0d7b,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0d7e,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0d98,
	&sbt_exception,
	&sbt_block_0d9a,
	&sbt_exception,
	&sbt_block_0d9c,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0db6,
	&sbt_exception,
	&sbt_block_0db8,
	&sbt_block_0db9,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0dcb,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0dd4,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0de1,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0deb,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0df8,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0e0d,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0e13,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0e29,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0e2d,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0e30,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0e3e,
	&sbt_exception,
	&sbt_block_0e40,
	&sbt_exception,
	&sbt_block_0e42,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0e50,
	&sbt_exception,
	&sbt_block_0e52,
	&sbt_block_0e53,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0e65,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0e6e,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0e7b,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0e8e,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0e91,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0e95,
	&sbt_exception,
	&sbt_block_0e97,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0e9d,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0ea0,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0eaf,
	&sbt_exception,
	&sbt_block_0eb1,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0ebf,
	&sbt_exception,
	&sbt_block_0ec1,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0ec7,
	&sbt_exception,
	&sbt_block_0ec9,
	&sbt_exception,
	&sbt_block_0ecb,
	&sbt_exception,
	&sbt_block_0ecd,
	&sbt_exception,
	&sbt_block_0ecf,
	&sbt_block_0ed0,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0ede,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0eea,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0ef6,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0efc,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0f02,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0f0f,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0f12,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0f21,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0f33,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0f3c,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0f45,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0f54,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0f59,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0f5c,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0f60,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0f64,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0f68,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0f70,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0f75,
	&sbt_exception,
	&sbt_block_0f77,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0f7b,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0f80,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0f85,
	&sbt_exception,
	&sbt_block_0f87,
	&sbt_exception,
	&sbt_block_0f89,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0f8c,
	&sbt_exception,
	&sbt_block_0f8e,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0f99,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0fa1,
	&sbt_exception,
	&sbt_block_0fa3,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0fa6,
	&sbt_exception,
	&sbt_block_0fa8,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0fb1,
	&sbt_block_0fb2,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0fc5,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0fc8,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0fcb,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0fce,
	&sbt_block_0fcf,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0fd9,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0fea,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0ffe,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1005,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1009,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1067,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1070,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1079,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_107e,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1081,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1084,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1094,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_10a4,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_10b4,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_10c2,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_10ce,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_10dd,
	&sbt_exception,
	&sbt_block_10df,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_10e9,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_10ef,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_10fe,
	&sbt_exception,
	&sbt_block_1100,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_110a,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1110,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1127,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_112a,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1134,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1139,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_113c,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1141,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1148,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_114d,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1154,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1159,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_115f,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1165,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_116c,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1171,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1176,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1179,
	&sbt_exception,
	&sbt_block_117b,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1180,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1183,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1188,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1190,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1194,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1198,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_119d,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_11a2,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_11a5,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_11ab,
	&sbt_exception,
	&sbt_block_11ad,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_11b2,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_11b8,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_11bb,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_11be,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_11c7,
	&sbt_exception,
	&sbt_block_11c9,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_11cc,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_11cf,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_11d5,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_11d8,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_11e4,
	&sbt_exception,
	&sbt_block_11e6,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_11e9,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_11ef,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_11f2,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_11fa,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1204,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_121e,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1223,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1229,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_122c,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1230,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_124f,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1252,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1259,
	&sbt_exception,
	&sbt_block_125b,
	&sbt_exception,
	&sbt_block_125d,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1261,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1269,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1271,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1288,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_128b,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_128f,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1297,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_12a1,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_12a9,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_12c6,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_12ca,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_12d4,
	&sbt_exception,
	&sbt_block_12d6,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_12dc,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_12e1,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_12e4,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_12e9,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_12ec,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_12ef,
	&sbt_exception,
	&sbt_block_12f1,
	&sbt_exception,
	&sbt_block_12f3,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_12f9,
	&sbt_block_12fa,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_12ff,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1304,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1309,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1313,
	&sbt_exception,
	&sbt_block_1315,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1318,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_131d,
	&sbt_exception,
	&sbt_block_131f,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1326,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1329,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_132e,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1338,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_133d,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1344,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1349,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_134d,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1351,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1356,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_135c,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1361,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1364,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1368,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_136b,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_136f,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1372,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1376,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1379,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_137d,
	&sbt_exception,
	&sbt_block_137f,
	&sbt_exception,
	&sbt_block_1381,
	&sbt_block_1382,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1387,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_138b,
	&sbt_exception,
	&sbt_block_138d,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1395,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1398,
	&sbt_block_1399,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_139e,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_13a2,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_13a5,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_13aa,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_13ae,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_13c3,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_13c7,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_13d1,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_13d5,
	&sbt_block_13d6,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_13de,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_13e6,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_13eb,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_13f0,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_13f4,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_13fc,
	&sbt_block_13fd,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1407,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_140a,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1411,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1414,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1419,
	&sbt_exception,
	&sbt_block_141b,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1420,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1423,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1428,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_143a,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_143d,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1443,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1446,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_144b,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1451,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1456,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_145b,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1462,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1465,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_146a,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1471,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1474,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1479,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1483,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1489,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_148e,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1494,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1499,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_149f,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_14a4,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_14a9,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_14b1,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_14bc,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_14cb,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_14d1,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_14e1,
	&sbt_exception,
	&sbt_block_14e3,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_14f1,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_14f8,
	&sbt_exception,
	&sbt_block_14fa,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1507,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_150c,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1516,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_151d,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1520,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1524,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1527,
	&sbt_exception,
	&sbt_block_1529,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_152f,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1544,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1553,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_155a,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_156c,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1573,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1576,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_157f,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1582,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1588,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_158b,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_158e,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1593,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1598,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_159b,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_15a0,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_15a3,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_15ad,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_15b4,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_15ba,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_15c7,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_15ca,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_15ce,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_15d1,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_15d9,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_15e2,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_15fb,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1601,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1604,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1607,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_160a,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1614,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_161b,
	&sbt_exception,
	&sbt_block_161d,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1621,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1624,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_162a,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_162e,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1634,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_163a,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_163e,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1648,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_164b,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1651,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1655,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1659,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_165c,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1660,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_166c,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_166f,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1672,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1678,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_168d,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_169c,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_16ca,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_16d5,
	&sbt_exception,
	&sbt_block_16d7,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_16da,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_16df,
	&sbt_block_16e0,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_16e5,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_16e8,
	&sbt_block_16e9,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_16ed,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_16f0,
	&sbt_block_16f1,
	&sbt_exception,
	&sbt_block_16f3,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_16f6,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1708,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1719,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_173e,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1741,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1754,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_175a,
	&sbt_block_175b,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1761,
	&sbt_block_1762,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_176d,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1782,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_179c,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_179f,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_17a2,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_17ad,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_17b0,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_17b3,
	&sbt_exception,
	&sbt_block_17b5,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_17b8,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_17bc,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_17bf,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_17c2,
	&sbt_exception,
	&sbt_block_17c4,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_17c7,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_17ca,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_17cd,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_17d6,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_17fc,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_17ff,
	&sbt_exception,
	&sbt_block_1801,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1804,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_180d,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_182d,
	&sbt_block_182e,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1836,
	&sbt_block_1837,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1842,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1845,
	&sbt_exception,
	&sbt_block_1847,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_184a,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1854,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_185c,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1861,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_186f,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1874,
	&sbt_block_1875,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_187c,
	&sbt_exception,
	&sbt_block_187e,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1881,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1887,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_188d,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1896,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_189b,
	&sbt_exception,
	&sbt_block_189d,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_18a2,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_18a5,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_18c0,
	&sbt_block_18c1,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_18cb,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_18ce,
	&sbt_exception,
	&sbt_block_18d0,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_18d3,
	&sbt_exception,
	&sbt_block_18d5,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_18d8,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_18db,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_18de,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_18e1,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_18e4,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_18e7,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_18ea,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_18ed,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_18f0,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_18f3,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_18f6,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_18ff,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1908,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1917,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_191a,
	&sbt_exception,
	&sbt_block_191c,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_191f,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_192e,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_193d,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_194c,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1958,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_195d,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1966,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1969,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_196c,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_197e,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_198f,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_19a4,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_19ba,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_19c6,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_19d5,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_19da,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_19ec,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_19ff,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1a1f,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1a25,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1a29,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1a30,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1a37,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1a3c,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1a4b,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1a57,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1a67,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1a79,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1a7e,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1a82,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1a87,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1a8d,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1a97,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1aa0,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1aa3,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1aa6,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1ab1,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1ab8,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1abd,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1acc,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1ad7,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1ae3,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1af5,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1afb,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1aff,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1b04,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1b0a,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1b14,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1b1d,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1b20,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1b23,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1b2e,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1b35,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1b3a,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1b4a,
	&sbt_exception,
	&sbt_block_1b4c,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1b56,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1b61,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1b68,
	&sbt_exception,
	&sbt_block_1b6a,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1b6e,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1b73,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1b79,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1b83,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1b8c,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1b8f,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1b92,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1b9c,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1ba2,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1ba7,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1bb0,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1bba,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1bc8,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1bce,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1bd6,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1bdc,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1be9,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1bef,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1bf2,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1bff,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1c0d,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1c15,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1c1b,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1c20,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1c29,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1c33,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1c41,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1c47,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1c4f,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1c55,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1c62,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1c68,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1c6b,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1c73,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1c7d,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1c82,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1c85,
	&sbt_exception,
	&sbt_block_1c87,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1c96,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1c9b,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1ca0,
	&sbt_exception,
	&sbt_block_1ca2,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1cb2,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1cb5,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1cb9,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1cbc,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1cca,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1ce5,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1ceb,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1cfd,
	&sbt_exception,
	&sbt_block_1cff,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1d0d,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1d19,
	&sbt_exception,
	&sbt_block_1d1b,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1d2f,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1d40,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1d47,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1d4d,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1d51,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1d66,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1d6d,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1d79,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1d82,
	&sbt_block_1d83,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1d8f,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1d96,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1d99,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1da8,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1db1,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1dc0,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1dcb,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1dd7,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1de3,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1def,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1dfb,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1dfe,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1e01,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2000,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2014,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_202b,
	&sbt_exception,
	&sbt_block_202d,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2034,
	&sbt_exception,
	&sbt_block_2036,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_203d,
	&sbt_exception,
	&sbt_block_203f,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2046,
	&sbt_exception,
	&sbt_block_2048,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_204f,
	&sbt_exception,
	&sbt_block_2051,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2058,
	&sbt_exception,
	&sbt_block_205a,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2061,
	&sbt_exception,
	&sbt_block_2063,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_206a,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_207e,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2093,
	&sbt_exception,
	&sbt_block_2095,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_209a,
	&sbt_exception,
	&sbt_block_209c,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_20a1,
	&sbt_exception,
	&sbt_block_20a3,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_20a8,
	&sbt_exception,
	&sbt_block_20aa,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_20af,
	&sbt_exception,
	&sbt_block_20b1,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_20b6,
	&sbt_exception,
	&sbt_block_20b8,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_20bd,
	&sbt_exception,
	&sbt_block_20bf,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_20c4,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_20cc,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_20d4,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_20dc,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_20e4,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_20ec,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_20f4,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_20fc,
	&sbt_exception,
	&sbt_block_20fe,
	&sbt_exception,
	&sbt_block_2100,
	&sbt_exception,
	&sbt_block_2102,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2105,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2108,
	&sbt_exception,
	&sbt_block_210a,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2114,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2117,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_212d,
	&sbt_block_212e,
	&sbt_exception,
	&sbt_block_2130,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2133,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2139,
	&sbt_exception,
	&sbt_block_213b,
	&sbt_exception,
	&sbt_block_213d,
	&sbt_exception,
	&sbt_block_213f,
	&sbt_exception,
	&sbt_block_2141,
	&sbt_exception,
	&sbt_block_2143,
	&sbt_exception,
	&sbt_block_2145,
	&sbt_exception,
	&sbt_block_2147,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_214f,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2152,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2158,
	&sbt_exception,
	&sbt_block_215a,
	&sbt_exception,
	&sbt_block_215c,
	&sbt_exception,
	&sbt_block_215e,
	&sbt_exception,
	&sbt_block_2160,
	&sbt_exception,
	&sbt_block_2162,
	&sbt_exception,
	&sbt_block_2164,
	&sbt_exception,
	&sbt_block_2166,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_216e,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2171,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2177,
	&sbt_exception,
	&sbt_block_2179,
	&sbt_exception,
	&sbt_block_217b,
	&sbt_exception,
	&sbt_block_217d,
	&sbt_exception,
	&sbt_block_217f,
	&sbt_exception,
	&sbt_block_2181,
	&sbt_exception,
	&sbt_block_2183,
	&sbt_exception,
	&sbt_block_2185,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_218d,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2190,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2196,
	&sbt_exception,
	&sbt_block_2198,
	&sbt_exception,
	&sbt_block_219a,
	&sbt_exception,
	&sbt_block_219c,
	&sbt_exception,
	&sbt_block_219e,
	&sbt_exception,
	&sbt_block_21a0,
	&sbt_exception,
	&sbt_block_21a2,
	&sbt_exception,
	&sbt_block_21a4,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_21ac,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_21af,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_21b5,
	&sbt_exception,
	&sbt_block_21b7,
	&sbt_exception,
	&sbt_block_21b9,
	&sbt_exception,
	&sbt_block_21bb,
	&sbt_exception,
	&sbt_block_21bd,
	&sbt_exception,
	&sbt_block_21bf,
	&sbt_exception,
	&sbt_block_21c1,
	&sbt_exception,
	&sbt_block_21c3,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_21cb,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_21ce,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_21d4,
	&sbt_exception,
	&sbt_block_21d6,
	&sbt_exception,
	&sbt_block_21d8,
	&sbt_exception,
	&sbt_block_21da,
	&sbt_exception,
	&sbt_block_21dc,
	&sbt_exception,
	&sbt_block_21de,
	&sbt_exception,
	&sbt_block_21e0,
	&sbt_exception,
	&sbt_block_21e2,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_21ea,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_21ed,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_21f3,
	&sbt_exception,
	&sbt_block_21f5,
	&sbt_exception,
	&sbt_block_21f7,
	&sbt_exception,
	&sbt_block_21f9,
	&sbt_exception,
	&sbt_block_21fb,
	&sbt_exception,
	&sbt_block_21fd,
	&sbt_exception,
	&sbt_block_21ff,
	&sbt_exception,
	&sbt_block_2201,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2209,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_220c,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2212,
	&sbt_exception,
	&sbt_block_2214,
	&sbt_exception,
	&sbt_block_2216,
	&sbt_exception,
	&sbt_block_2218,
	&sbt_exception,
	&sbt_block_221a,
	&sbt_exception,
	&sbt_block_221c,
	&sbt_exception,
	&sbt_block_221e,
	&sbt_exception,
	&sbt_block_2220,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2228,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_222f,
	&sbt_exception,
	&sbt_block_2231,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2236,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2239,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_224d,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2250,
	&sbt_exception,
	&sbt_block_2252,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2256,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2259,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_226c,
	&sbt_block_226d,
	&sbt_exception,
	&sbt_block_226f,
	&sbt_exception,
	&sbt_block_2271,
	&sbt_exception,
	&sbt_block_2273,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2276,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_227c,
	&sbt_exception,
	&sbt_block_227e,
	&sbt_exception,
	&sbt_block_2280,
	&sbt_exception,
	&sbt_block_2282,
	&sbt_exception,
	&sbt_block_2284,
	&sbt_exception,
	&sbt_block_2286,
	&sbt_exception,
	&sbt_block_2288,
	&sbt_exception,
	&sbt_block_228a,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2292,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2295,
	&sbt_exception,
	&sbt_block_2297,
	&sbt_exception,
	&sbt_block_2299,
	&sbt_exception,
	&sbt_block_229b,
	&sbt_exception,
	&sbt_block_229d,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_22a5,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_22a8,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_22ae,
	&sbt_exception,
	&sbt_block_22b0,
	&sbt_exception,
	&sbt_block_22b2,
	&sbt_exception,
	&sbt_block_22b4,
	&sbt_exception,
	&sbt_block_22b6,
	&sbt_exception,
	&sbt_block_22b8,
	&sbt_exception,
	&sbt_block_22ba,
	&sbt_exception,
	&sbt_block_22bc,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_22c4,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_22c7,
	&sbt_exception,
	&sbt_block_22c9,
	&sbt_exception,
	&sbt_block_22cb,
	&sbt_exception,
	&sbt_block_22cd,
	&sbt_exception,
	&sbt_block_22cf,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_22d7,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_22da,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_22e0,
	&sbt_exception,
	&sbt_block_22e2,
	&sbt_exception,
	&sbt_block_22e4,
	&sbt_exception,
	&sbt_block_22e6,
	&sbt_exception,
	&sbt_block_22e8,
	&sbt_exception,
	&sbt_block_22ea,
	&sbt_exception,
	&sbt_block_22ec,
	&sbt_exception,
	&sbt_block_22ee,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_22f6,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_22f9,
	&sbt_exception,
	&sbt_block_22fb,
	&sbt_exception,
	&sbt_block_22fd,
	&sbt_exception,
	&sbt_block_22ff,
	&sbt_exception,
	&sbt_block_2301,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2309,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_230c,
	&sbt_exception,
	&sbt_block_230e,
	&sbt_exception,
	&sbt_block_2310,
	&sbt_exception,
	&sbt_block_2312,
	&sbt_exception,
	&sbt_block_2314,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_231c,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2324,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2327,
	&sbt_exception,
	&sbt_block_2329,
	&sbt_exception,
	&sbt_block_232b,
	&sbt_block_232c,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_232f,
	&sbt_exception,
	&sbt_block_2331,
	&sbt_exception,
	&sbt_block_2333,
	&sbt_exception,
	&sbt_block_2335,
	&sbt_exception,
	&sbt_block_2337,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_233f,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2350,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2353,
	&sbt_exception,
	&sbt_block_2355,
	&sbt_exception,
	&sbt_block_2357,
	&sbt_exception,
	&sbt_block_2359,
	&sbt_exception,
	&sbt_block_235b,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_235e,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2366,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_236c,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_236f,
	&sbt_exception,
	&sbt_block_2371,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2375,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2378,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_238b,
	&sbt_block_238c,
	&sbt_exception,
	&sbt_block_238e,
	&sbt_exception,
	&sbt_block_2390,
	&sbt_exception,
	&sbt_block_2392,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2395,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_239b,
	&sbt_exception,
	&sbt_block_239d,
	&sbt_exception,
	&sbt_block_239f,
	&sbt_exception,
	&sbt_block_23a1,
	&sbt_exception,
	&sbt_block_23a3,
	&sbt_exception,
	&sbt_block_23a5,
	&sbt_exception,
	&sbt_block_23a7,
	&sbt_exception,
	&sbt_block_23a9,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_23b1,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_23b4,
	&sbt_exception,
	&sbt_block_23b6,
	&sbt_exception,
	&sbt_block_23b8,
	&sbt_exception,
	&sbt_block_23ba,
	&sbt_exception,
	&sbt_block_23bc,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_23c4,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_23c7,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_23cd,
	&sbt_exception,
	&sbt_block_23cf,
	&sbt_exception,
	&sbt_block_23d1,
	&sbt_exception,
	&sbt_block_23d3,
	&sbt_exception,
	&sbt_block_23d5,
	&sbt_exception,
	&sbt_block_23d7,
	&sbt_exception,
	&sbt_block_23d9,
	&sbt_exception,
	&sbt_block_23db,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_23e3,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_23e6,
	&sbt_exception,
	&sbt_block_23e8,
	&sbt_exception,
	&sbt_block_23ea,
	&sbt_exception,
	&sbt_block_23ec,
	&sbt_exception,
	&sbt_block_23ee,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_23f6,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_23f9,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_23ff,
	&sbt_exception,
	&sbt_block_2401,
	&sbt_exception,
	&sbt_block_2403,
	&sbt_exception,
	&sbt_block_2405,
	&sbt_exception,
	&sbt_block_2407,
	&sbt_exception,
	&sbt_block_2409,
	&sbt_exception,
	&sbt_block_240b,
	&sbt_exception,
	&sbt_block_240d,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2415,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2418,
	&sbt_exception,
	&sbt_block_241a,
	&sbt_exception,
	&sbt_block_241c,
	&sbt_exception,
	&sbt_block_241e,
	&sbt_exception,
	&sbt_block_2420,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2428,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2430,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2433,
	&sbt_exception,
	&sbt_block_2435,
	&sbt_exception,
	&sbt_block_2437,
	&sbt_block_2438,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_243b,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2441,
	&sbt_exception,
	&sbt_block_2443,
	&sbt_exception,
	&sbt_block_2445,
	&sbt_exception,
	&sbt_block_2447,
	&sbt_exception,
	&sbt_block_2449,
	&sbt_exception,
	&sbt_block_244b,
	&sbt_exception,
	&sbt_block_244d,
	&sbt_exception,
	&sbt_block_244f,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2457,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_245a,
	&sbt_exception,
	&sbt_block_245c,
	&sbt_exception,
	&sbt_block_245e,
	&sbt_exception,
	&sbt_block_2460,
	&sbt_exception,
	&sbt_block_2462,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_246a,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_247b,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_247e,
	&sbt_exception,
	&sbt_block_2480,
	&sbt_exception,
	&sbt_block_2482,
	&sbt_exception,
	&sbt_block_2484,
	&sbt_exception,
	&sbt_block_2486,
	&sbt_exception,
	&sbt_block_2488,
	&sbt_exception,
	&sbt_block_248a,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_248d,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2495,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_249b,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_249e,
	&sbt_exception,
	&sbt_block_24a0,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_24a4,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_24a7,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_24ba,
	&sbt_block_24bb,
	&sbt_exception,
	&sbt_block_24bd,
	&sbt_exception,
	&sbt_block_24bf,
	&sbt_exception,
	&sbt_block_24c1,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_24c4,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_24ca,
	&sbt_exception,
	&sbt_block_24cc,
	&sbt_exception,
	&sbt_block_24ce,
	&sbt_exception,
	&sbt_block_24d0,
	&sbt_exception,
	&sbt_block_24d2,
	&sbt_exception,
	&sbt_block_24d4,
	&sbt_exception,
	&sbt_block_24d6,
	&sbt_exception,
	&sbt_block_24d8,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_24e0,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_24e3,
	&sbt_exception,
	&sbt_block_24e5,
	&sbt_exception,
	&sbt_block_24e7,
	&sbt_exception,
	&sbt_block_24e9,
	&sbt_exception,
	&sbt_block_24eb,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_24f3,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_24f6,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_24fc,
	&sbt_exception,
	&sbt_block_24fe,
	&sbt_exception,
	&sbt_block_2500,
	&sbt_exception,
	&sbt_block_2502,
	&sbt_exception,
	&sbt_block_2504,
	&sbt_exception,
	&sbt_block_2506,
	&sbt_exception,
	&sbt_block_2508,
	&sbt_exception,
	&sbt_block_250a,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2512,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2515,
	&sbt_exception,
	&sbt_block_2517,
	&sbt_exception,
	&sbt_block_2519,
	&sbt_exception,
	&sbt_block_251b,
	&sbt_exception,
	&sbt_block_251d,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2525,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2528,
	&sbt_exception,
	&sbt_block_252a,
	&sbt_exception,
	&sbt_block_252c,
	&sbt_exception,
	&sbt_block_252e,
	&sbt_exception,
	&sbt_block_2530,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2538,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2540,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2543,
	&sbt_exception,
	&sbt_block_2545,
	&sbt_exception,
	&sbt_block_2547,
	&sbt_block_2548,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_254b,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2551,
	&sbt_exception,
	&sbt_block_2553,
	&sbt_exception,
	&sbt_block_2555,
	&sbt_exception,
	&sbt_block_2557,
	&sbt_exception,
	&sbt_block_2559,
	&sbt_exception,
	&sbt_block_255b,
	&sbt_exception,
	&sbt_block_255d,
	&sbt_exception,
	&sbt_block_255f,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2567,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_256a,
	&sbt_exception,
	&sbt_block_256c,
	&sbt_exception,
	&sbt_block_256e,
	&sbt_exception,
	&sbt_block_2570,
	&sbt_exception,
	&sbt_block_2572,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_257a,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_257d,
	&sbt_exception,
	&sbt_block_257f,
	&sbt_exception,
	&sbt_block_2581,
	&sbt_exception,
	&sbt_block_2583,
	&sbt_exception,
	&sbt_block_2585,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_258d,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_259e,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_25a1,
	&sbt_exception,
	&sbt_block_25a3,
	&sbt_exception,
	&sbt_block_25a5,
	&sbt_exception,
	&sbt_block_25a7,
	&sbt_exception,
	&sbt_block_25a9,
	&sbt_exception,
	&sbt_block_25ab,
	&sbt_exception,
	&sbt_block_25ad,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_25b0,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_25b8,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_25be,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_25c1,
	&sbt_exception,
	&sbt_block_25c3,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_25c7,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_25ca,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_25dd,
	&sbt_block_25de,
	&sbt_exception,
	&sbt_block_25e0,
	&sbt_exception,
	&sbt_block_25e2,
	&sbt_exception,
	&sbt_block_25e4,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_25e7,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_25ed,
	&sbt_exception,
	&sbt_block_25ef,
	&sbt_exception,
	&sbt_block_25f1,
	&sbt_exception,
	&sbt_block_25f3,
	&sbt_exception,
	&sbt_block_25f5,
	&sbt_exception,
	&sbt_block_25f7,
	&sbt_exception,
	&sbt_block_25f9,
	&sbt_exception,
	&sbt_block_25fb,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2603,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2606,
	&sbt_exception,
	&sbt_block_2608,
	&sbt_exception,
	&sbt_block_260a,
	&sbt_exception,
	&sbt_block_260c,
	&sbt_exception,
	&sbt_block_260e,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2616,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2619,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_261f,
	&sbt_exception,
	&sbt_block_2621,
	&sbt_exception,
	&sbt_block_2623,
	&sbt_exception,
	&sbt_block_2625,
	&sbt_exception,
	&sbt_block_2627,
	&sbt_exception,
	&sbt_block_2629,
	&sbt_exception,
	&sbt_block_262b,
	&sbt_exception,
	&sbt_block_262d,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2635,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2638,
	&sbt_exception,
	&sbt_block_263a,
	&sbt_exception,
	&sbt_block_263c,
	&sbt_exception,
	&sbt_block_263e,
	&sbt_exception,
	&sbt_block_2640,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2648,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2650,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2653,
	&sbt_exception,
	&sbt_block_2655,
	&sbt_exception,
	&sbt_block_2657,
	&sbt_block_2658,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_265b,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2661,
	&sbt_exception,
	&sbt_block_2663,
	&sbt_exception,
	&sbt_block_2665,
	&sbt_exception,
	&sbt_block_2667,
	&sbt_exception,
	&sbt_block_2669,
	&sbt_exception,
	&sbt_block_266b,
	&sbt_exception,
	&sbt_block_266d,
	&sbt_exception,
	&sbt_block_266f,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2677,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_267a,
	&sbt_exception,
	&sbt_block_267c,
	&sbt_exception,
	&sbt_block_267e,
	&sbt_exception,
	&sbt_block_2680,
	&sbt_exception,
	&sbt_block_2682,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_268a,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_268d,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2693,
	&sbt_exception,
	&sbt_block_2695,
	&sbt_exception,
	&sbt_block_2697,
	&sbt_exception,
	&sbt_block_2699,
	&sbt_exception,
	&sbt_block_269b,
	&sbt_exception,
	&sbt_block_269d,
	&sbt_exception,
	&sbt_block_269f,
	&sbt_exception,
	&sbt_block_26a1,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_26a9,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_26ac,
	&sbt_exception,
	&sbt_block_26ae,
	&sbt_exception,
	&sbt_block_26b0,
	&sbt_exception,
	&sbt_block_26b2,
	&sbt_exception,
	&sbt_block_26b4,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_26bc,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_26cd,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_26d0,
	&sbt_exception,
	&sbt_block_26d2,
	&sbt_exception,
	&sbt_block_26d4,
	&sbt_exception,
	&sbt_block_26d6,
	&sbt_exception,
	&sbt_block_26d8,
	&sbt_exception,
	&sbt_block_26da,
	&sbt_exception,
	&sbt_block_26dc,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_26df,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_26e7,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_26ed,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_26f0,
	&sbt_exception,
	&sbt_block_26f2,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_26f6,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_26f9,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_270c,
	&sbt_block_270d,
	&sbt_exception,
	&sbt_block_270f,
	&sbt_exception,
	&sbt_block_2711,
	&sbt_exception,
	&sbt_block_2713,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2716,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_271c,
	&sbt_exception,
	&sbt_block_271e,
	&sbt_exception,
	&sbt_block_2720,
	&sbt_exception,
	&sbt_block_2722,
	&sbt_exception,
	&sbt_block_2724,
	&sbt_exception,
	&sbt_block_2726,
	&sbt_exception,
	&sbt_block_2728,
	&sbt_exception,
	&sbt_block_272a,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2732,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2735,
	&sbt_exception,
	&sbt_block_2737,
	&sbt_exception,
	&sbt_block_2739,
	&sbt_exception,
	&sbt_block_273b,
	&sbt_exception,
	&sbt_block_273d,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2745,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2748,
	&sbt_exception,
	&sbt_block_274a,
	&sbt_exception,
	&sbt_block_274c,
	&sbt_exception,
	&sbt_block_274e,
	&sbt_exception,
	&sbt_block_2750,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2758,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2760,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2763,
	&sbt_exception,
	&sbt_block_2765,
	&sbt_exception,
	&sbt_block_2767,
	&sbt_block_2768,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_276b,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2771,
	&sbt_exception,
	&sbt_block_2773,
	&sbt_exception,
	&sbt_block_2775,
	&sbt_exception,
	&sbt_block_2777,
	&sbt_exception,
	&sbt_block_2779,
	&sbt_exception,
	&sbt_block_277b,
	&sbt_exception,
	&sbt_block_277d,
	&sbt_exception,
	&sbt_block_277f,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2787,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_278a,
	&sbt_exception,
	&sbt_block_278c,
	&sbt_exception,
	&sbt_block_278e,
	&sbt_exception,
	&sbt_block_2790,
	&sbt_exception,
	&sbt_block_2792,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_279a,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_279d,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_27a3,
	&sbt_exception,
	&sbt_block_27a5,
	&sbt_exception,
	&sbt_block_27a7,
	&sbt_exception,
	&sbt_block_27a9,
	&sbt_exception,
	&sbt_block_27ab,
	&sbt_exception,
	&sbt_block_27ad,
	&sbt_exception,
	&sbt_block_27af,
	&sbt_exception,
	&sbt_block_27b1,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_27b9,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_27bc,
	&sbt_exception,
	&sbt_block_27be,
	&sbt_exception,
	&sbt_block_27c0,
	&sbt_exception,
	&sbt_block_27c2,
	&sbt_exception,
	&sbt_block_27c4,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_27cc,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_27cf,
	&sbt_exception,
	&sbt_block_27d1,
	&sbt_exception,
	&sbt_block_27d3,
	&sbt_exception,
	&sbt_block_27d5,
	&sbt_exception,
	&sbt_block_27d7,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_27df,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_27f0,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_27f3,
	&sbt_exception,
	&sbt_block_27f5,
	&sbt_exception,
	&sbt_block_27f7,
	&sbt_exception,
	&sbt_block_27f9,
	&sbt_exception,
	&sbt_block_27fb,
	&sbt_exception,
	&sbt_block_27fd,
	&sbt_exception,
	&sbt_block_27ff,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2802,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_280b,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2811,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2814,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2817,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_281b,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_281e,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2831,
	&sbt_block_2832,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2835,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2838,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_283b,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_283e,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2844,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2847,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_284a,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_284d,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2850,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2853,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2856,
	&sbt_exception,
	&sbt_block_2858,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2860,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2863,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2866,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2869,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_286c,
	&sbt_exception,
	&sbt_block_286e,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2876,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_287e,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2881,
	&sbt_exception,
	&sbt_block_2883,
	&sbt_exception,
	&sbt_block_2885,
	&sbt_block_2886,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2889,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_288f,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2892,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2895,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2898,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_289b,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_289e,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_28a1,
	&sbt_exception,
	&sbt_block_28a3,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_28ab,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_28ae,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_28b1,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_28b4,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_28b7,
	&sbt_exception,
	&sbt_block_28b9,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_28c1,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_28c4,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_28ca,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_28cd,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_28d0,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_28d3,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_28d6,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_28d9,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_28dc,
	&sbt_exception,
	&sbt_block_28de,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_28e6,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_28e9,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_28ec,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_28ef,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_28f2,
	&sbt_exception,
	&sbt_block_28f4,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_28fc,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_28ff,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2905,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2908,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_290b,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_290e,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2911,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2914,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2917,
	&sbt_exception,
	&sbt_block_2919,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2921,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2924,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2927,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_292a,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_292d,
	&sbt_exception,
	&sbt_block_292f,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2937,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2948,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_294b,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_294e,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2951,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2954,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2957,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_295a,
	&sbt_exception,
	&sbt_block_295c,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_295f,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2968,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_296e,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2971,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_297d,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2980,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2993,
	&sbt_block_2994,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2997,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_299a,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_299d,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_29a0,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_29a3,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_29a6,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_29a9,
	&sbt_exception,
	&sbt_block_29ab,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_29b3,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_29bb,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_29be,
	&sbt_exception,
	&sbt_block_29c0,
	&sbt_exception,
	&sbt_block_29c2,
	&sbt_block_29c3,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_29c6,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_29cc,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_29cf,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_29d2,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_29d5,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_29d8,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_29db,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_29de,
	&sbt_exception,
	&sbt_block_29e0,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_29e8,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_29eb,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_29ee,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_29f1,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_29f4,
	&sbt_exception,
	&sbt_block_29f6,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_29fe,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2a01,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2a07,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2a0a,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2a0d,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2a10,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2a13,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2a16,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2a19,
	&sbt_exception,
	&sbt_block_2a1b,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2a23,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2a26,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2a29,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2a2c,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2a2f,
	&sbt_exception,
	&sbt_block_2a31,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2a39,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2a3c,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2a42,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2a45,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2a48,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2a4b,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2a4e,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2a51,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2a54,
	&sbt_exception,
	&sbt_block_2a56,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2a5e,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2a61,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2a64,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2a67,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2a6a,
	&sbt_exception,
	&sbt_block_2a6c,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2a74,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2a77,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2a7a,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2a7d,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2a80,
	&sbt_exception,
	&sbt_block_2a82,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2a8a,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2a9b,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2a9e,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2aa1,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2aa4,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2aa7,
	&sbt_exception,
	&sbt_block_2aa9,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2aac,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2ab1,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2ab4,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2ab7,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2aba,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2abd,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2ac0,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2ac3,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2ac6,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2ac9,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2acc,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2acf,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2ad2,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2ad5,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2ad8,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2adb,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2ade,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2ae1,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2ae4,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2ae7,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2af7,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2b02,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2b05,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2b0d,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2b1a,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2b22,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2b25,
	&sbt_exception,
	&sbt_block_2b27,
	&sbt_block_2b28,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2b42,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2b46,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2b4b,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2b58,
	&sbt_exception,
	&sbt_block_2b5a,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2b5f,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2b63,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2b76,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2b79,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2b82,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2b8b,
	&sbt_block_2b8c,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2b8f,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2b9e,
	&sbt_exception,
	&sbt_block_2ba0,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2ba8,
	&sbt_block_2ba9,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2bb2,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2bb9,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2bbe,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2bcb,
	&sbt_exception,
	&sbt_block_2bcd,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2bdc,
	&sbt_exception,
	&sbt_block_2bde,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2be3,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2bf2,
	&sbt_exception,
	&sbt_block_2bf4,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2c03,
	&sbt_exception,
	&sbt_block_2c05,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2c0d,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2c10,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2c1b,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2c26,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2c31,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2c3c,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2c47,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2c52,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2c5d,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2c68,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2c6b,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2c7a,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2c89,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2c98,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2ca7,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2cb6,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2cc5,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2cd4,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2ce3,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2ce8,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2ced,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2cf2,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2cf7,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2cfc,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2d01,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2d06,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2d09,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2d0c,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2d0f,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2d1e,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2d21,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2d28,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2d2d,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2d3a,
	&sbt_exception,
	&sbt_block_2d3c,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2d4b,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2d52,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2d5d,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2d64,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2d69,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2d76,
	&sbt_exception,
	&sbt_block_2d78,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2d87,
	&sbt_exception,
	&sbt_block_2d89,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2d8e,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2d9d,
	&sbt_exception,
	&sbt_block_2d9f,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2dae,
	&sbt_exception,
	&sbt_block_2db0,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2dd6,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2ddb,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2ddf,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2de6,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2dea,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2df4,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2df7,
	&sbt_exception,
	&sbt_block_2df9,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2dfe,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2e01,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2e05,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2f00,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2f10,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2f20,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2f30,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2f40,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2f50,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2f60,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2f70,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2f80,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2f90,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2fa0,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2fb0,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2fc0,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2fd0,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2fe0,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2ff0,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
};

extern const uint8_t sbt_rom_data[] = {
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x01,0x02,0x01,0x02,0x02,0x03,
    0x01,0x02,0x02,0x03,0x02,0x03,0x03,0x04,0x01,0x01,0x01,0x11,0x93,0x04,0xb9,0xff,
    0x83,0x53,0x02,0xc6,0x31,0x03,0xb1,0x00,0x00,0x03,0xbf,0x04,0x38,0x05,0xc0,0x50,
    0x08,0x0c,0xca,0x02,0xcc,0x00,0x05,0xe3,0x08,0x00,0x04,0x10,0x04,0xb6,0x94,0x78,
    0x64,0x14,0xe0,0x00,0x74,0x71,0x0a,0xff,0x01,0x07,0x0f,0x06,0x01,0x60,0x30,0x77,
    0x0d,0xf0,0x0e,0x0a,0x08,0x0f,0x02,0x35,0x00,0x02,0x13,0x00,0x05,0x2a,0x00,0x00,
    0x00,0x7f,0x02,0x3a,0x05,0x00,0x01,0x29,0x00,0x00,0x02,0x3d,0x07,0x02,0x3c,0x01,
    0x02,0x22,0x01,0x02,0x21,0x01,0x02,0x31,0x20,0x01,0xe2,0x01,0xe1,0x02,0x23,0x03,
    0x02,0x26,0x0e,0x02,0x27,0x70,0x02,0x20,0x3f,0x02,0x25,0x02,0x00,0x20,0x4f,0x23,
    0x80,0x54,0x68,0x75,0x6e,0x64,0x65,0x72,0x00,0x63,0x72,0x61,0x63,0x6b,0x65,0x72,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x01,0x02,0x67,0x69,0x6b,0x02,
    0x03,0xff,0xc4,0x02,0xc6,0x00,0xca,0x02,0xcc,0x02,0xd1,0x02,0xd3,0x00,0x02,0x03,
    0xff,0xc8,0x02,0xc6,0x00,0xce,0x02,0xcc,0x02,0xd6,0x02,0xd3,0x00,0x02,0x03,0x00,
    0x00,0xbc,0x00,0xd0,0x00,0xd8,0x04,0x03,0x00,0x00,0xbc,0xbd,0xc7,0x00,0xbf,0x00,
    0x61,0x00,0xd8,0xd4,0xd5,0x05,0x03,0x00,0xbc,0xbd,0xbd,0xbd,0xbe,0xbf,0x00,0x00,
    0x00,0xc0,0xc1,0xc2,0xc2,0xc2,0xc3,0x0f,0x05,0xff,0x00,0x00,0x00,0x00,0x6d,0x08,
    0x6e,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x6f,0x06,0x71,0x06,0x73,0x0a,0x75,0x08,
    0x76,0x0a,0x00,0x00,0x78,0x06,0x7a,0x06,0x7c,0x06,0x7e,0x06,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x06,0x82,0x06,0x84,0x06,0x86,0x08,0x87,0x06,
    0x89,0x06,0x8b,0x06,0x8d,0x04,0x8e,0x06,0x90,0x06,0x92,0x06,0x94,0x04,0x95,0x06,
    0x89,0x04,0x97,0x06,0x00,0x00,0x99,0x06,0x9b,0x04,0x9c,0x06,0x9e,0x06,0xa0,0x06,
    0xa2,0x04,0xa3,0x04,0x00,0x00,0x63,0x04,0xa4,0x04,0xa5,0x04,0xa6,0x06,0x00,0x00,
    0x63,0x04,0x00,0x00,0xa8,0x04,0xa9,0x06,0xab,0x04,0xac,0x06,0xae,0x06,0xb0,0x06,
    0xb2,0x06,0x00,0x00,0xb4,0x06,0xb6,0x06,0x89,0x04,0xb8,0x06,0x89,0x04,0xba,0x06,
    0x78,0xff,0x7a,0x00,0x7b,0x00,0x7c,0x49,0x7d,0x4a,0x7e,0xb2,0x7f,0x94,0x22,0x00,
    0x78,0xff,0x7a,0xbf,0x7b,0x25,0x7c,0x80,0x7d,0xfc,0x7e,0xdf,0x7f,0xb6,0x22,0x00,
    0x78,0xff,0x7a,0x80,0x7b,0xfc,0x7c,0xbf,0x7d,0x25,0x7e,0xd5,0x7f,0xfe,0x22,0x00,
    0x78,0x50,0x7a,0x80,0x7b,0xfc,0x7c,0xbf,0x7d,0x25,0x7e,0xff,0x7f,0xff,0x22,0x00,
    0x78,0xff,0x7a,0x00,0x7b,0xb0,0x7c,0x08,0x7d,0xca,0x7e,0xf7,0x7f,0xed,0x22,0x00,
    0x78,0xff,0x7a,0xef,0x7b,0x7b,0x7c,0x14,0x7d,0xa5,0x7e,0x59,0x7f,0xce,0x22,0x00,
    0x78,0x00,0x7a,0xff,0x7b,0xff,0x7c,0xb2,0x7d,0x94,0x7e,0x49,0x7f,0x4a,0x22,0x00,
    0x78,0xef,0x7a,0xff,0x7b,0xff,0x7c,0x59,0x7d,0xce,0x7e,0x14,0x7f,0xa5,0x22,0x00,
    0x78,0xff,0x7a,0xdf,0x7b,0x96,0x7c,0x2f,0x7d,0xfe,0x7e,0x5f,0x7f,0xdf,0x22,0x00,
    0x78,0xff,0x7a,0x2f,0x7b,0xfe,0x7c,0xdf,0x7d,0x96,0x7e,0x5a,0x7f,0xff,0x22,0x00,
    0x78,0xff,0x7a,0xff,0x7b,0xff,0x7c,0xff,0x7d,0xff,0x7e,0xff,0x7f,0xff,0x22,0x00,
    0x78,0xff,0x7a,0xff,0x7b,0xff,0x7c,0xff,0x7d,0xff,0x7e,0xff,0x7f,0xff,0x22,0x00,
    0x78,0xff,0x7a,0xff,0x7b,0xff,0x7c,0xff,0x7d,0xff,0x7e,0xff,0x7f,0xff,0x22,0x00,
    0x78,0xff,0x7a,0xff,0x7b,0xff,0x7c,0xff,0x7d,0xff,0x7e,0xff,0x7f,0xff,0x22,0x00,
    0x78,0xff,0x7a,0xff,0x7b,0xff,0x7c,0xff,0x7d,0xff,0x7e,0xff,0x7f,0xff,0x22,0x00,
    0x78,0xff,0x7a,0xff,0x7b,0xff,0x7c,0xff,0x7d,0xff,0x7e,0xff,0x7f,0xff,0x22,0x00,
    0x00,0x00,0x08,0x08,0x14,0x14,0x14,0x14,0x08,0x3c,0x03,0x23,0x04,0x0a,0x08,0x08,
    0x10,0x08,0x08,0x10,0x08,0x2a,0x00,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,
    0x1c,0x22,0x08,0x0c,0x1c,0x22,0x3e,0x20,0x10,0x18,0x3e,0x02,0x38,0x04,0x3e,0x20,
    0x1c,0x22,0x1c,0x22,0x00,0x00,0x00,0x00,0x10,0x08,0x00,0x00,0x04,0x08,0x1c,0x22,
    0x1c,0x22,0x08,0x14,0x1e,0x22,0x1c,0x22,0x1e,0x22,0x3e,0x02,0x3e,0x02,0x3c,0x02,
    0x22,0x22,0x1c,0x08,0x20,0x20,0x22,0x12,0x02,0x02,0x22,0x36,0x22,0x22,0x1c,0x22,
    0x1e,0x22,0x1c,0x22,0x1e,0x22,0x1c,0x22,0x3e,0x08,0x22,0x22,0x22,0x22,0x22,0x22,
    0x22,0x22,0x22,0x22,0x3e,0x20,0x3e,0x06,0x00,0x02,0x3e,0x30,0x00,0x00,0x00,0x00,
    0x04,0x08,0x00,0x00,0x02,0x02,0x00,0x00,0x20,0x20,0x00,0x00,0x18,0x24,0x00,0x00,
    0x02,0x02,0x08,0x00,0x10,0x00,0x02,0x02,0x0c,0x08,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x04,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x38,0x0c,0x08,0x08,0x0e,0x18,0x00,0x00,0x63,0x77,
    0x01,0x01,0x03,0x03,0x07,0x07,0x0f,0x0f,0x1f,0x1f,0x3f,0x3f,0x7f,0x7f,0x00,0x00,
    0x00,0x00,0x00,0x04,0x00,0x1c,0x00,0x60,0x00,0x60,0x00,0x00,0x00,0x00,0xff,0xff,
    0x01,0x00,0x7f,0x7f,0x40,0x00,0x78,0x3c,0x00,0x00,0xe0,0xc0,0x01,0x03,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x08,0x08,0x14,0x00,0x3e,0x14,0x0a,0x1c,0x10,0x08,0x0a,0x04,0x08,0x00,
    0x04,0x04,0x20,0x20,0x1c,0x08,0x08,0x3e,0x00,0x00,0x00,0x3e,0x00,0x00,0x10,0x08,
    0x32,0x2a,0x08,0x08,0x20,0x18,0x10,0x18,0x14,0x12,0x1e,0x20,0x02,0x1e,0x10,0x08,
    0x22,0x1c,0x22,0x3c,0x08,0x00,0x08,0x00,0x04,0x02,0x3e,0x00,0x10,0x20,0x10,0x08,
    0x2a,0x3a,0x22,0x22,0x22,0x1e,0x02,0x02,0x22,0x22,0x02,0x1e,0x02,0x1e,0x02,0x02,
    0x22,0x3e,0x08,0x08,0x20,0x20,0x0a,0x06,0x02,0x02,0x2a,0x2a,0x26,0x2a,0x22,0x22,
    0x22,0x1e,0x22,0x22,0x22,0x1e,0x02,0x1c,0x08,0x08,0x22,0x22,0x22,0x22,0x22,0x2a,
    0x14,0x08,0x14,0x08,0x10,0x08,0x06,0x06,0x04,0x08,0x30,0x30,0x08,0x14,0x00,0x00,
    0x10,0x00,0x1c,0x20,0x1e,0x22,0x3c,0x02,0x3c,0x22,0x1c,0x22,0x04,0x1e,0x1c,0x22,
    0x1e,0x22,0x0c,0x08,0x18,0x10,0x22,0x12,0x08,0x08,0x36,0x2a,0x1e,0x22,0x1c,0x22,
    0x1e,0x22,0x3c,0x22,0x3a,0x06,0x3c,0x02,0x1e,0x04,0x22,0x22,0x22,0x22,0x22,0x22,
    0x22,0x14,0x22,0x22,0x3e,0x10,0x0c,0x06,0x08,0x08,0x18,0x30,0x06,0x49,0x3e,0x1c,
    0x01,0x01,0x03,0x03,0x07,0x07,0x0f,0x0f,0x1f,0x1f,0x3f,0x3f,0x7f,0x7f,0x00,0x40,
    0x00,0xc0,0x0e,0x8f,0x12,0x90,0x2c,0x08,0x3c,0x0f,0x00,0x00,0x06,0x0f,0xff,0x07,
    0x00,0x00,0x7f,0x70,0x00,0x00,0x1e,0x0f,0x00,0x01,0x80,0x00,0x07,0x0f,0x00,0x08,
    0x00,0x3c,0x00,0x24,0x00,0xf8,0x00,0x08,0x00,0x07,0x00,0x04,0x00,0x0f,0x00,0x09,
    0x07,0x07,0x00,0x00,0x70,0x70,0x00,0x00,0x00,0x00,0xe0,0xc0,0x79,0x3f,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x78,0x78,0x00,0x00,0x00,0x00,
    0x0f,0x0f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x80,0xc0,0x00,0x00,0xe7,0xc3,0x01,0x03,0x00,0x00,0x0f,0x0f,0x00,0x00,
    0x00,0x00,0x00,0x00,0x3c,0x3c,0x78,0x78,0x3c,0x3c,0xc0,0xc0,0xf3,0xf3,0x00,0x00,
    0xf0,0xe0,0x00,0x81,0x00,0x00,0x0f,0x07,0x00,0x00,0x00,0x00,0xf0,0xf0,0x00,0x00,
    0x3c,0x3c,0x00,0x00,0x78,0x78,0x00,0x00,0x0f,0x0f,0x00,0x00,0x3c,0x3c,0x00,0x00,
    0xf0,0xf0,0x00,0x00,0x0f,0x0f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x60,0x60,
    0x06,0x1e,0x60,0xe0,0x00,0xff,0x06,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0xc6,0xc6,0x00,0x00,0x60,0x60,0x01,0x00,0xc0,0xc0,0x00,0x00,
    0x60,0x60,0x0e,0x18,0x82,0x04,0xe3,0xc0,0xff,0xff,0x03,0x01,0x00,0x00,0x80,0x00,
    0xe0,0xc0,0x00,0x00,0x00,0x00,0x1e,0x1e,0x78,0xf8,0x00,0xff,0x00,0xff,0x1e,0x1f,
    0x00,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xf8,0x7c,0x7f,0xff,0x00,0x01,0x00,0x00,
    0x80,0xc0,0x07,0x03,0xc0,0x80,0x07,0x07,0x78,0xf8,0x00,0x00,0x00,0x00,0xf8,0x78,
    0xe0,0x80,0xbf,0xff,0x0f,0x07,0xbf,0xff,0x00,0x00,0x00,0x80,0xff,0xff,0x00,0x01,
    0x00,0x80,0x3f,0x1f,0xfc,0xf8,0x00,0x01,0xe0,0xc0,0x07,0x0f,0x00,0x00,0xe0,0xf0,
    0x07,0x07,0x00,0x00,0x70,0x70,0x00,0x00,0x00,0x00,0x80,0x00,0x1f,0x0f,0x00,0xff,
    0x00,0x01,0x00,0xff,0x00,0x80,0x00,0xbc,0x00,0xa4,0x78,0xff,0x00,0xf7,0x00,0x14,
    0x0f,0xff,0x00,0x80,0x00,0xfc,0x00,0x04,0x00,0xff,0x00,0xf3,0x00,0x12,0x00,0x0f,
    0x00,0x08,0xe0,0xf0,0x00,0x00,0x81,0x00,0x07,0x0f,0x00,0x00,0x0f,0xff,0x00,0x00,
    0x00,0xff,0x00,0x80,0x3c,0x3c,0x78,0x78,0x3c,0xfc,0xc0,0xff,0xf3,0xf3,0x00,0x00,
    0xc0,0x80,0xc3,0xe7,0x00,0x00,0x03,0x01,0x00,0xff,0x00,0x01,0xf0,0xff,0x00,0x00,
    0x3c,0x3c,0x00,0x00,0x78,0x78,0x00,0x00,0x0f,0xff,0x00,0x80,0x3c,0xfc,0x00,0x00,
    0xf0,0xf3,0x00,0x02,0x0f,0x0f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x60,0x60,
    0x1e,0x1e,0xc0,0x00,0xff,0x00,0x03,0x00,0x00,0x60,0x00,0x10,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0xc6,0xc6,0x00,0x00,0x68,0x6c,0x00,0x00,0xc0,0xc0,0x00,0x00,
    0x68,0x6c,0x30,0x60,0x08,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0xc0,0x00,0x03,0x1e,0x1e,0xf0,0xf0,0xff,0xff,0xff,0xff,0x0f,0x0f,
    0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x3c,0x1e,0xfc,0xf0,0x07,0x1f,0x00,0x00,
    0xc0,0xe0,0x03,0x01,0xc0,0xc0,0x07,0x03,0xf8,0xf0,0x03,0x0f,0x00,0x00,0x7c,0x3c,
    0x00,0x00,0xfe,0xf8,0x07,0x03,0xfe,0xf8,0x00,0x00,0xc0,0xe0,0xff,0xe7,0x03,0x07,
    0xc0,0xe0,0x0f,0x07,0xf0,0xe0,0x03,0x07,0x80,0x00,0x1f,0x3f,0x00,0x00,0xf8,0xfc,
    0x07,0x03,0xe7,0xff,0xff,0xff,0x07,0x01,0xff,0xff,0xff,0xff,0xe0,0x80,0xf8,0xf8,
    0x1f,0x1f,0x00,0x00,0x00,0x00,0xf8,0xf8,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x80,0xff,0xff,0xff,0xff,0xff,0xff,0x00,0x01,0xfc,0xfc,0xc0,0xc0,0x3f,0x3f,
    0x00,0x00,0xfc,0xfc,0x03,0x03,0xfe,0xf8,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0x7f,0x1f,0x00,0x00,0x00,0x00,0x00,0x00,0xe0,0xe0,0xff,0xff,0xff,0xff,0x3f,0xff,
    0x00,0x00,0xfe,0xfe,0x03,0x03,0xfc,0xf0,0x00,0x00,0x3f,0x3f,0xfc,0xf0,0x3f,0x3f,
    0x00,0x00,0x00,0x00,0xfc,0xfc,0x0f,0x0f,0x00,0x00,0x00,0x00,0xc0,0xc0,0xff,0xff,
    0xfe,0xfc,0xff,0xff,0x0f,0x3f,0x00,0x00,0xff,0xfc,0xcf,0xff,0xff,0xff,0x00,0x00,
    0xff,0xf8,0x07,0x01,0xff,0xf8,0x00,0x00,0x00,0x80,0xff,0xff,0xff,0xff,0x00,0x01,
    0x1f,0x0f,0xf8,0xf0,0x00,0x80,0x00,0x01,0xfe,0xfe,0x1f,0x0f,0xf8,0xf0,0x7f,0x7f,
    0xfc,0xfc,0x3f,0x7f,0x00,0x00,0x00,0x00,0xfc,0xfe,0x3f,0x3f,0xfe,0xfc,0x7f,0x3f,
    0x7f,0x3f,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0x01,0x00,0xff,0xff,0xff,0xff,0x01,0x00,0xff,0xff,0xff,0xff,0x80,0x00,0xf8,0xf8,
    0x1f,0xff,0x00,0x00,0x00,0xff,0xf8,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x80,0xc0,0xff,0xff,0xff,0xff,0xff,0xff,0x01,0x03,0xfc,0xfc,0xc0,0xc0,0xff,0xff,
    0xff,0xff,0xff,0xff,0x03,0x03,0x00,0x00,0x00,0x00,0xf8,0xfe,0x03,0x0f,0x00,0x00,
    0x00,0x00,0x00,0x00,0xf8,0xfe,0x03,0x0f,0xf0,0xf0,0xff,0x1f,0xff,0xff,0xff,0xff,
    0x00,0x00,0xff,0xff,0x01,0x01,0xc0,0x00,0x03,0x07,0x1f,0x1f,0xe0,0xe0,0x3f,0x3f,
    0x00,0x00,0x00,0x00,0xfe,0xfe,0x07,0x07,0x00,0x03,0x00,0x00,0xe0,0xe0,0x7f,0x7f,
    0xf0,0xc0,0xff,0xff,0xff,0xff,0x00,0x00,0xf0,0xc0,0xff,0xff,0x7f,0x7f,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xc0,0xe0,0xff,0xff,0xff,0xff,0x03,0x07,
    0x07,0x03,0xe0,0xc0,0xc0,0xe0,0x03,0x07,0xff,0xff,0x07,0x03,0xe0,0xc0,0xff,0xff,
    0xf8,0xf0,0xff,0xff,0x00,0x01,0x00,0x80,0xff,0xff,0x1f,0x0f,0xf8,0xf0,0x1f,0x0f,
    0x0f,0x03,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0x00,0x00,0x08,0x00,0x00,0x00,0x3e,0x14,0x28,0x1e,0x04,0x62,0x2a,0x12,0x00,0x00,
    0x04,0x08,0x20,0x10,0x1c,0x2a,0x08,0x08,0x10,0x10,0x00,0x00,0x00,0x00,0x04,0x02,
    0x26,0x22,0x08,0x08,0x04,0x02,0x20,0x22,0x3e,0x10,0x20,0x22,0x22,0x22,0x04,0x04,
    0x22,0x22,0x20,0x10,0x08,0x00,0x08,0x08,0x04,0x08,0x3e,0x00,0x10,0x08,0x08,0x00,
    0x1a,0x02,0x3e,0x22,0x22,0x22,0x02,0x22,0x22,0x22,0x02,0x02,0x02,0x02,0x32,0x22,
    0x22,0x22,0x08,0x08,0x20,0x22,0x0a,0x12,0x02,0x02,0x22,0x22,0x32,0x22,0x22,0x22,
    0x02,0x02,0x2a,0x12,0x0a,0x12,0x20,0x22,0x08,0x08,0x22,0x22,0x22,0x14,0x2a,0x36,
    0x14,0x22,0x08,0x08,0x04,0x02,0x06,0x06,0x10,0x20,0x30,0x30,0x22,0x00,0x00,0x00,
    0x00,0x00,0x3c,0x22,0x22,0x22,0x02,0x02,0x22,0x22,0x3e,0x02,0x04,0x04,0x22,0x3c,
    0x22,0x22,0x08,0x08,0x10,0x10,0x0e,0x12,0x08,0x08,0x2a,0x2a,0x22,0x22,0x22,0x22,
    0x22,0x1e,0x22,0x3c,0x02,0x02,0x1c,0x20,0x04,0x24,0x22,0x32,0x22,0x14,0x2a,0x2a,
    0x08,0x14,0x22,0x3c,0x08,0x04,0x0c,0x0c,0x08,0x08,0x18,0x18,0x30,0x00,0x3e,0x77,
    0x01,0x01,0x03,0x03,0x07,0x07,0x0f,0x0f,0x1f,0x1f,0x3f,0x3f,0x7f,0x7f,0x90,0x3c,
    0xf0,0x3c,0xd8,0x78,0x20,0x40,0x01,0x00,0x01,0x00,0x80,0xc0,0x1f,0x3f,0x07,0x07,
    0x00,0x00,0x70,0x70,0x00,0x00,0x1e,0x3c,0x00,0x00,0x80,0xc0,0x07,0x03,0x00,0x00,
    0x3c,0x3c,0x00,0x00,0xf8,0xf8,0x00,0x00,0x07,0x07,0x00,0x00,0x0f,0x0f,0x00,0x00,
    0x00,0x00,0x08,0x00,0x00,0x00,0x14,0x00,0x08,0x00,0x60,0x00,0x2c,0x00,0x00,0x00,
    0x10,0x00,0x08,0x00,0x08,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x08,0x00,0x00,0x00,
    0x1c,0x00,0x1c,0x00,0x3e,0x00,0x1c,0x00,0x10,0x00,0x1c,0x00,0x1c,0x00,0x04,0x00,
    0x1c,0x00,0x0e,0x00,0x00,0x00,0x04,0x00,0x10,0x00,0x00,0x00,0x04,0x00,0x08,0x00,
    0x3c,0x00,0x22,0x00,0x1e,0x00,0x1c,0x00,0x1e,0x00,0x3e,0x00,0x02,0x00,0x3c,0x00,
    0x22,0x00,0x1c,0x00,0x1c,0x00,0x22,0x00,0x3e,0x00,0x22,0x00,0x22,0x00,0x1c,0x00,
    0x02,0x00,0x2c,0x00,0x22,0x00,0x1c,0x00,0x08,0x00,0x1c,0x00,0x08,0x00,0x22,0x00,
    0x22,0x00,0x08,0x00,0x3e,0x00,0x3e,0x00,0x00,0x00,0x3e,0x00,0x00,0x00,0x00,0x7f,
    0x00,0x00,0x3c,0x00,0x1e,0x00,0x3c,0x00,0x3c,0x00,0x3c,0x00,0x04,0x00,0x20,0x1c,
    0x22,0x00,0x1c,0x00,0x12,0x0c,0x22,0x00,0x1c,0x00,0x22,0x00,0x22,0x00,0x1c,0x00,
    0x02,0x02,0x20,0x20,0x02,0x00,0x1e,0x00,0x18,0x00,0x2c,0x00,0x08,0x00,0x36,0x00,
    0x22,0x00,0x20,0x1c,0x3e,0x00,0x38,0x00,0x08,0x08,0x0e,0x00,0x00,0x00,0x63,0x00,
    0x01,0x01,0x03,0x03,0x07,0x07,0x0f,0x0f,0x1f,0x1f,0x3f,0x3f,0x7f,0x7f,0x00,0x00,
    0x00,0x00,0x10,0x00,0x18,0x00,0x00,0x00,0x00,0x00,0xe0,0xf0,0x79,0xf0,0x07,0x07,
    0x00,0x00,0x70,0x70,0x00,0x00,0x78,0xf0,0x00,0x00,0xe0,0xf0,0x01,0x00,0x00,0x00,
    0x3c,0x00,0x24,0x00,0xf8,0x78,0x00,0x00,0x07,0x00,0x04,0x00,0x0f,0x0f,0x00,0x00,
    0xff,0xff,0x00,0x00,0x7f,0x7f,0x00,0x00,0x18,0x3c,0x18,0x00,0x06,0x00,0xff,0xff,
    0x00,0x00,0xff,0xff,0x00,0x00,0xbc,0xbc,0x00,0x00,0xff,0xff,0xf7,0xf7,0x00,0x00,
    0xff,0xff,0x00,0x00,0xfc,0xfc,0x00,0x00,0xff,0xff,0xf3,0xf3,0x00,0x00,0x0f,0x0f,
    0x00,0x00,0x78,0x3c,0x00,0x04,0x00,0x00,0x1e,0x3c,0x00,0x20,0xff,0xff,0x00,0x00,
    0xff,0xff,0x00,0x00,0x3c,0x3c,0x78,0x78,0xfc,0xfc,0xff,0xff,0xf3,0xf3,0x00,0x00,
    0x00,0x00,0xff,0x7e,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0xff,0xff,0x00,0x00,
    0x3c,0x3c,0x00,0x00,0x78,0x78,0x00,0x00,0xff,0xff,0x00,0x00,0xfc,0xfc,0x00,0x00,
    0xf3,0xf3,0x00,0x00,0x0f,0x0f,0x00,0x00,0x00,0xc0,0x00,0xff,0x00,0x03,0x60,0x60,
    0x1e,0x1e,0x00,0x00,0x00,0x00,0x00,0x00,0x30,0x18,0x08,0x04,0x00,0xc0,0x00,0x01,
    0x00,0x00,0x00,0x00,0xc6,0xc6,0x00,0x00,0x68,0x60,0x00,0x00,0xc0,0xc0,0x00,0x00,
    0x68,0x60,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0xf0,0xf0,0x0f,0x0f,0x1e,0x1e,0xc0,0x00,0xff,0xe0,0xff,0x01,0x03,0x00,
    0xff,0x00,0x00,0xe0,0x00,0x01,0x00,0x00,0x1e,0x0f,0xc0,0x00,0x7f,0xff,0x00,0x01,
    0xe0,0xf0,0x01,0x00,0xe0,0xe0,0x03,0x01,0xe0,0x80,0x3f,0xff,0x00,0x00,0x3e,0x1e,
    0x00,0x00,0xe0,0x00,0x01,0x00,0xe0,0x00,0x00,0x00,0xf0,0xf8,0xc3,0x81,0x0f,0x1f,
    0xe0,0xf0,0x03,0x01,0xc0,0x80,0x07,0x0f,0x00,0x00,0x7e,0xfc,0x00,0x00,0x7e,0x3f,
    0xff,0x00,0x01,0x00,0x7f,0x00,0x40,0x00,0x7e,0xff,0x00,0x00,0x00,0x00,0xff,0x0f,
    0x00,0x00,0xff,0x00,0x80,0x00,0xbc,0x3c,0x80,0x00,0xff,0x78,0xf7,0x00,0x14,0x00,
    0xff,0x0f,0x80,0x00,0xfc,0x3c,0x00,0x00,0xff,0xc0,0xf3,0xf3,0x00,0x00,0x0f,0x0f,
    0x00,0x00,0x3c,0x78,0x04,0x00,0x00,0x00,0x3c,0x1e,0x20,0x00,0xff,0x00,0x01,0x00,
    0xff,0xf0,0x00,0x00,0x3c,0x3c,0x78,0x78,0xfc,0x3c,0xff,0x00,0xf3,0xf0,0x02,0x00,
    0x00,0x00,0x3c,0x18,0x00,0x18,0x00,0x00,0xff,0x00,0x01,0x00,0xff,0x00,0x80,0x00,
    0x3c,0x00,0x24,0x00,0x78,0x00,0x48,0x00,0xff,0x00,0x81,0x00,0xfc,0x00,0x04,0x00,
    0xf3,0x00,0x12,0x00,0x0f,0x00,0x08,0x00,0xe0,0x60,0xff,0x00,0x07,0x06,0x60,0x60,
    0x1e,0x06,0x00,0x00,0x00,0x00,0x00,0x00,0x0e,0xc6,0x82,0x48,0xe3,0x61,0x03,0x03,
    0x00,0xc0,0x80,0x40,0xc6,0xc6,0x00,0x48,0x60,0x61,0x01,0x00,0xc0,0xc0,0x00,0x40,
    0x60,0x60,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0xf8,0x78,0x1f,0x1e,0x1e,0x1e,0x00,0x00,0xf0,0xf8,0x07,0x1f,0x00,0x00,
    0x00,0x00,0xf0,0xf8,0x07,0x1f,0x00,0x80,0x0f,0x07,0x00,0x00,0xfc,0xf0,0x03,0x07,
    0xf0,0xf8,0x00,0x00,0xf0,0xf0,0x01,0x00,0x00,0x00,0xfe,0xf8,0x03,0x0f,0x1f,0x0f,
    0x00,0x00,0x18,0x7e,0x00,0x00,0x00,0x00,0x18,0x7e,0xfc,0x7e,0x00,0x00,0x3f,0x7e,
    0xf0,0xe0,0x01,0x03,0x80,0xc0,0x0f,0x07,0x00,0x00,0xf8,0xf0,0x81,0xc3,0x1f,0x0f,
    0x00,0x00,0x7e,0x18,0xff,0x1f,0x00,0x00,0xff,0x00,0xff,0xf8,0x00,0x00,0xf8,0xf8,
    0xff,0xff,0x00,0x01,0xff,0xff,0xff,0xff,0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x00,
    0xc0,0xc0,0xff,0xff,0xff,0xff,0xff,0xff,0x03,0x03,0xfc,0xfc,0xc0,0x80,0xff,0xff,
    0xff,0xff,0xff,0xff,0x03,0x01,0x00,0x00,0x00,0x80,0xff,0xff,0x3f,0xff,0x00,0x00,
    0x00,0x00,0x00,0x80,0xff,0xff,0x3f,0xff,0xf8,0xf8,0x1f,0x0f,0xfc,0xf0,0xff,0xff,
    0x80,0x80,0xff,0xff,0x00,0x00,0x00,0x00,0x0f,0x1f,0x0f,0x0f,0xf0,0xf0,0x3f,0x1f,
    0x80,0x80,0x00,0x00,0xff,0xff,0x03,0x03,0x0f,0x3f,0x00,0x00,0xf0,0xf0,0x3f,0x3f,
    0x00,0x00,0xff,0xfc,0xff,0xff,0x00,0x00,0x00,0x00,0xff,0xff,0x3f,0x3f,0xc0,0xf0,
    0x03,0x0f,0x00,0x00,0x00,0x00,0x03,0x0f,0xf0,0xf8,0xff,0xff,0xff,0xff,0x0f,0x1f,
    0x01,0x00,0x80,0x00,0xf0,0xf8,0x0f,0x1f,0xff,0xff,0x03,0x07,0xc0,0xe0,0xff,0xff,
    0xe0,0xc0,0xff,0xff,0x03,0x07,0xc0,0xe0,0xff,0xff,0x07,0x03,0xe0,0xc0,0x07,0x03,
    0x00,0x00,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0x00,0x00,0x00,0x00,0x1f,0x1f,0x00,0x00,0x00,0x00,0xf8,0xf8,0x00,0x00,0xf8,0xf8,
    0xff,0xff,0x01,0x07,0xff,0xff,0xff,0xff,0x80,0xe0,0xf8,0xfe,0xff,0xff,0x1f,0x7f,
    0xc0,0xc0,0x3f,0x3f,0x00,0x00,0xfc,0xfc,0x03,0x03,0xfc,0xfc,0x80,0x00,0xff,0xff,
    0xff,0xff,0xff,0xff,0x01,0x00,0x00,0x00,0xc0,0xc0,0xff,0xff,0xff,0xff,0x03,0x0f,
    0x00,0x00,0xc0,0xc0,0xff,0xff,0xff,0xff,0xfc,0xfc,0x07,0x07,0xc0,0x00,0xff,0xff,
    0xc0,0xc0,0x7f,0x7f,0x00,0x00,0x00,0x00,0x1f,0x3f,0x07,0x07,0xf8,0xf8,0x1f,0x1f,
    0x80,0xc0,0x80,0x80,0xff,0xff,0x01,0x01,0xff,0xff,0x00,0x03,0xf8,0xf8,0x1f,0x1f,
    0x00,0x00,0xf0,0xc0,0xff,0xff,0x80,0x83,0x00,0x00,0xff,0xff,0x1f,0x0f,0xfc,0xfe,
    0x3f,0x7f,0x00,0x00,0x00,0x00,0x3f,0x7f,0xfc,0xfe,0x7f,0x3f,0xfe,0xfc,0x3f,0x7f,
    0x00,0x00,0x00,0x00,0xfc,0xfc,0x3f,0x3f,0xfe,0xfe,0x0f,0x1f,0xf0,0xf8,0x7f,0x7f,
    0x80,0x00,0xff,0xff,0x0f,0x1f,0xf0,0xf8,0xff,0xff,0x01,0x00,0x80,0x00,0x01,0x00,
    0x00,0x00,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
};
};  // namespace CPU
};  // namespace Cube
