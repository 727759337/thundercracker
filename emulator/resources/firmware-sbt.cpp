/* -*- mode: C; c-basic-offset: 4; intent-tabs-mode: nil -*-
 *
 * Data for the Thundercracker emulator.
 * This file is AUTOMATICALLY GENERATED.
 *
 * Copyright <c> 2011 Sifteo, Inc. All rights reserved.
 */

#include <stdint.h>
#include <cube_cpu_opcodes.h>

namespace Cube {
namespace CPU {

static int FASTCALL sbt_exception(em8051 *aCPU) {
	except(aCPU, EXCEPTION_SBT);
	return 1;
}

static int FASTCALL sbt_block_0000(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0000;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x81,0xd9);
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x00,0xc7);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0003(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0003;
	clk += Opcodes::reti                (aCPU, pc, 0x32,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_000b(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x000b;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x13,0xd0);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0013(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0013;
	clk += Opcodes::reti                (aCPU, pc, 0x32,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_001b(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x001b;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x14,0x3f);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0023(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0023;
	clk += Opcodes::reti                (aCPU, pc, 0x32,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_002b(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x002b;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x14,0x4d);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0033(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0033;
	clk += Opcodes::reti                (aCPU, pc, 0x32,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_003b(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x003b;
	clk += Opcodes::reti                (aCPU, pc, 0x32,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0043(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0043;
	clk += Opcodes::reti                (aCPU, pc, 0x32,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_004b(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x004b;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x10,0x4d);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0053(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0053;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x13,0x42);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_005b(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x005b;
	clk += Opcodes::reti                (aCPU, pc, 0x32,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0063(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0063;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x15,0xab);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0066(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0066;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x00,0xc7);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0069(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0069;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0xfe,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_00c4(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x00c4;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x00,0x66);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_00c7(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x00c7;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x00,0xeb);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_00ca(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x00ca;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x13,0x17);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_00cd(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x00cd;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x18,0x18);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_00d0(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x00d0;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x15,0x36);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_00d3(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x00d3;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x1c,0x6a);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_00d6(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x00d6;
	clk += Opcodes::setb_bitaddr        (aCPU, pc, 0xd2,0xaf,0x00);
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x1d,0x83);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_00db(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x00db;
	clk += Opcodes::clr_bitaddr         (aCPU, pc, 0xc2,0x00,0x00);
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x01,0x10);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_00e0(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x00e0;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x18,0x33);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_00e3(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x00e3;
	clk += Opcodes::jb_bitaddr_offset   (aCPU, pc, 0x20,0x00,0xf5);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_00e6(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x00e6;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x16,0x4c);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_00e9(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x00e9;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0xf0,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_00eb(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x00eb;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x95,0xff);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x80,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x90,0x0c);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_00f4(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x00f4;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x79);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x93,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x94,0xf3);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_00fd(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x00fd;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x96,0x80);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x9f,0x04);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x9f,0x60);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x9f,0x61);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x9f,0x65);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x9f,0x67);
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0110(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0110;
	clk += Opcodes::mov_dptr_imm        (aCPU, pc, 0x90,0x03,0xff);
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::jb_bitaddr_offset   (aCPU, pc, 0x20,0xe3,0x06);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0117(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0117;
	clk += Opcodes::rr_a                (aCPU, pc, 0x03,0x00,0x00);
	clk += Opcodes::xrl_a_mem           (aCPU, pc, 0x65,0x48,0x00);
	clk += Opcodes::rrc_a               (aCPU, pc, 0x13,0x00,0x00);
	clk += Opcodes::jnc_offset          (aCPU, pc, 0x50,0x4b,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_011d(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x011d;
	clk += Opcodes::setb_bitaddr        (aCPU, pc, 0xd2,0x00,0x00);
	clk += Opcodes::mov_dptr_imm        (aCPU, pc, 0x90,0x03,0xfe);
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0x3c,0x00);
	clk += Opcodes::mov_dptr_imm        (aCPU, pc, 0x90,0x01,0x29);
	clk += Opcodes::jmp_indir_a_dptr    (aCPU, pc, 0x73,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0129(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0129;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x0f,0x1c);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_012c(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x012c;
	clk += Opcodes::nop                 (aCPU, pc, 0x00,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_012d(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x012d;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x2d,0xea);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0130(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0130;
	clk += Opcodes::nop                 (aCPU, pc, 0x00,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0131(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0131;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x0e,0xc4);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0134(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0134;
	clk += Opcodes::nop                 (aCPU, pc, 0x00,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0135(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0135;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x0d,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0138(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0138;
	clk += Opcodes::nop                 (aCPU, pc, 0x00,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0139(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0139;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x0d,0xe0);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_013c(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x013c;
	clk += Opcodes::nop                 (aCPU, pc, 0x00,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_013d(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x013d;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x0e,0x7a);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0140(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0140;
	clk += Opcodes::nop                 (aCPU, pc, 0x00,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0141(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0141;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x02,0xb9);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0144(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0144;
	clk += Opcodes::nop                 (aCPU, pc, 0x00,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0145(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0145;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x02,0xd7);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0148(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0148;
	clk += Opcodes::nop                 (aCPU, pc, 0x00,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0149(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0149;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x04,0x76);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_014c(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x014c;
	clk += Opcodes::nop                 (aCPU, pc, 0x00,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_014d(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x014d;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x0a,0xe0);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0150(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0150;
	clk += Opcodes::nop                 (aCPU, pc, 0x00,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0151(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0151;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x0f,0x1c);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0154(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0154;
	clk += Opcodes::nop                 (aCPU, pc, 0x00,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0155(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0155;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x0f,0x1c);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0158(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0158;
	clk += Opcodes::nop                 (aCPU, pc, 0x00,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0159(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0159;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x0f,0x1c);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_015c(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x015c;
	clk += Opcodes::nop                 (aCPU, pc, 0x00,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_015d(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x015d;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x0f,0x1c);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0160(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0160;
	clk += Opcodes::nop                 (aCPU, pc, 0x00,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0161(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0161;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x0f,0x1c);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0164(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0164;
	clk += Opcodes::nop                 (aCPU, pc, 0x00,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0165(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0165;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x0f,0x1c);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0168(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0168;
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0169(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0169;
	clk += Opcodes::push_mem            (aCPU, pc, 0xc0,0x92,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x92,0x00);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x82,0x00);
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0xdc,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x82,0x00);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x83,0x00);
	clk += Opcodes::addc_a_imm          (aCPU, pc, 0x34,0xff,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x83,0x00);
	clk += Opcodes::pop_mem             (aCPU, pc, 0xd0,0x92,0x00);
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_017d(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x017d;
	clk += Opcodes::mov_rx_mem          (aCPU, pc, 0xaa,0x26,0x00);
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0x28,0x82);
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0x29,0x83);
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x80,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x3d);
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x80,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x3b);
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xda,0x0c,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0195(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0195;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x82,0x00);
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0xdc,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x82,0x00);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x83,0x00);
	clk += Opcodes::addc_a_imm          (aCPU, pc, 0x34,0xff,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x83,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_01a1(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x01a1;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x25,0x00);
	clk += Opcodes::add_a_mem           (aCPU, pc, 0x25,0x27,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x80,0x00);
	clk += Opcodes::mov_rx_mem          (aCPU, pc, 0xab,0x23,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_01a9(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x01a9;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xdb,0xf6,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_01b3(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x01b3;
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7b,0x0f,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8a,0x04,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_01b7(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x01b7;
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x80,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x3d);
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x80,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x3b);
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xdc,0x0c,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_01c7(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x01c7;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x82,0x00);
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0xdc,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x82,0x00);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x83,0x00);
	clk += Opcodes::addc_a_imm          (aCPU, pc, 0x34,0xff,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x83,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_01d3(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x01d3;
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0x27,0x80);
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x20,0xc4);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_01d9(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x01d9;
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xdb,0xdc,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_01db(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x01db;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x24,0x00);
	clk += Opcodes::jz_offset           (aCPU, pc, 0x60,0x2e,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_01df(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x01df;
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x80,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x3d);
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x80,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x3b);
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xec,0x00,0x00);
	clk += Opcodes::dec_a               (aCPU, pc, 0x14,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfa,0x00,0x00);
	clk += Opcodes::jnz_offset          (aCPU, pc, 0x70,0x0c,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_01f2(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x01f2;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x82,0x00);
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0xdc,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x82,0x00);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x83,0x00);
	clk += Opcodes::addc_a_imm          (aCPU, pc, 0x34,0xff,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x83,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_01fe(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x01fe;
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0x27,0x80);
	clk += Opcodes::mov_rx_mem          (aCPU, pc, 0xaa,0x24,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0203(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0203;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xda,0xf6,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_020d(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x020d;
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_020e(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x020e;
	clk += Opcodes::clr_bitaddr         (aCPU, pc, 0xc2,0xb9,0x00);
	clk += Opcodes::mov_dptr_imm        (aCPU, pc, 0x90,0x03,0xfa);
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfa,0x00,0x00);
	clk += Opcodes::mov_dptr_imm        (aCPU, pc, 0x90,0x03,0xfb);
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfb,0x00,0x00);
	clk += Opcodes::setb_bitaddr        (aCPU, pc, 0xd2,0xb9,0x00);
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xea,0x00,0x00);
	clk += Opcodes::swap_a              (aCPU, pc, 0xc4,0x00,0x00);
	clk += Opcodes::rl_a                (aCPU, pc, 0x23,0x00,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0x1f,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfc,0x00,0x00);
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xeb,0x00,0x00);
	clk += Opcodes::swap_a              (aCPU, pc, 0xc4,0x00,0x00);
	clk += Opcodes::rl_a                (aCPU, pc, 0x23,0x00,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0x1f,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfd,0x00,0x00);
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xeb,0x00,0x00);
	clk += Opcodes::swap_a              (aCPU, pc, 0xc4,0x00,0x00);
	clk += Opcodes::rl_a                (aCPU, pc, 0x23,0x00,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0xe0,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x27,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7b,0x00,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8d,0x28,0x00);
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xeb,0x00,0x00);
	clk += Opcodes::xch_a_mem           (aCPU, pc, 0xc5,0x28,0x00);
	clk += Opcodes::add_a_mem           (aCPU, pc, 0x25,0xe0,0x00);
	clk += Opcodes::xch_a_mem           (aCPU, pc, 0xc5,0x28,0x00);
	clk += Opcodes::rlc_a               (aCPU, pc, 0x33,0x00,0x00);
	clk += Opcodes::xch_a_mem           (aCPU, pc, 0xc5,0x28,0x00);
	clk += Opcodes::add_a_mem           (aCPU, pc, 0x25,0xe0,0x00);
	clk += Opcodes::xch_a_mem           (aCPU, pc, 0xc5,0x28,0x00);
	clk += Opcodes::rlc_a               (aCPU, pc, 0x33,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x29,0x00);
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xeb,0x00,0x00);
	clk += Opcodes::swap_a              (aCPU, pc, 0xc4,0x00,0x00);
	clk += Opcodes::rl_a                (aCPU, pc, 0x23,0x00,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0xe0,0x00);
	clk += Opcodes::xch_a_rx            (aCPU, pc, 0xcd,0x00,0x00);
	clk += Opcodes::swap_a              (aCPU, pc, 0xc4,0x00,0x00);
	clk += Opcodes::rl_a                (aCPU, pc, 0x23,0x00,0x00);
	clk += Opcodes::xch_a_rx            (aCPU, pc, 0xcd,0x00,0x00);
	clk += Opcodes::xrl_a_rx            (aCPU, pc, 0x6d,0x00,0x00);
	clk += Opcodes::xch_a_rx            (aCPU, pc, 0xcd,0x00,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0xe0,0x00);
	clk += Opcodes::xch_a_rx            (aCPU, pc, 0xcd,0x00,0x00);
	clk += Opcodes::xrl_a_rx            (aCPU, pc, 0x6d,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfb,0x00,0x00);
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xed,0x00,0x00);
	clk += Opcodes::add_a_mem           (aCPU, pc, 0x25,0x28,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x28,0x00);
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xeb,0x00,0x00);
	clk += Opcodes::addc_a_mem          (aCPU, pc, 0x35,0x29,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x29,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8c,0x03,0x00);
	clk += Opcodes::clr_a               (aCPU, pc, 0xe4,0x00,0x00);
	clk += Opcodes::xch_a_rx            (aCPU, pc, 0xcb,0x00,0x00);
	clk += Opcodes::add_a_mem           (aCPU, pc, 0x25,0xe0,0x00);
	clk += Opcodes::xch_a_rx            (aCPU, pc, 0xcb,0x00,0x00);
	clk += Opcodes::rlc_a               (aCPU, pc, 0x33,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfd,0x00,0x00);
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xeb,0x00,0x00);
	clk += Opcodes::add_a_mem           (aCPU, pc, 0x25,0x28,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x28,0x00);
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xed,0x00,0x00);
	clk += Opcodes::addc_a_mem          (aCPU, pc, 0x35,0x29,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x29,0x00);
	clk += Opcodes::mov_a_imm           (aCPU, pc, 0x74,0x07,0x00);
	clk += Opcodes::anl_a_rx            (aCPU, pc, 0x5a,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x24,0x00);
	clk += Opcodes::mov_a_imm           (aCPU, pc, 0x74,0x08,0x00);
	clk += Opcodes::clr_c               (aCPU, pc, 0xc3,0x00,0x00);
	clk += Opcodes::subb_a_mem          (aCPU, pc, 0x95,0x24,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x23,0x00);
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xea,0x00,0x00);
	clk += Opcodes::add_a_rx            (aCPU, pc, 0x2a,0x00,0x00);
	clk += Opcodes::add_a_mem           (aCPU, pc, 0x25,0xe0,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfa,0x00,0x00);
	clk += Opcodes::mov_a_imm           (aCPU, pc, 0x74,0x1c,0x00);
	clk += Opcodes::anl_a_rx            (aCPU, pc, 0x5a,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x25,0x00);
	clk += Opcodes::mov_a_imm           (aCPU, pc, 0x74,0x12,0x00);
	clk += Opcodes::clr_c               (aCPU, pc, 0xc3,0x00,0x00);
	clk += Opcodes::subb_a_rx           (aCPU, pc, 0x9c,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x26,0x00);
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_028e(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x028e;
	clk += Opcodes::mov_a_imm           (aCPU, pc, 0x74,0x20,0x00);
	clk += Opcodes::add_a_mem           (aCPU, pc, 0x25,0x27,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x27,0x00);
	clk += Opcodes::jnz_offset          (aCPU, pc, 0x70,0x22,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0296(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0296;
	clk += Opcodes::mov_a_imm           (aCPU, pc, 0x74,0x24,0x00);
	clk += Opcodes::add_a_mem           (aCPU, pc, 0x25,0x28,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x28,0x00);
	clk += Opcodes::clr_a               (aCPU, pc, 0xe4,0x00,0x00);
	clk += Opcodes::addc_a_mem          (aCPU, pc, 0x35,0x29,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x29,0x00);
	clk += Opcodes::clr_c               (aCPU, pc, 0xc3,0x00,0x00);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x28,0x00);
	clk += Opcodes::subb_a_imm          (aCPU, pc, 0x94,0x88,0x00);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x29,0x00);
	clk += Opcodes::subb_a_imm          (aCPU, pc, 0x94,0x02,0x00);
	clk += Opcodes::jc_offset           (aCPU, pc, 0x40,0x0c,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_02ac(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x02ac;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x28,0x00);
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0x78,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x28,0x00);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x29,0x00);
	clk += Opcodes::addc_a_imm          (aCPU, pc, 0x34,0xfd,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x29,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_02b8(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x02b8;
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_02b9(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x02b9;
	clk += Opcodes::mov_dptr_imm        (aCPU, pc, 0x90,0x03,0xfd);
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfa,0x00,0x00);
	clk += Opcodes::push_mem            (aCPU, pc, 0xc0,0x02,0x00);
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x0f,0x26);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_02c3(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x02c3;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x02,0x0e);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_02c6(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x02c6;
	clk += Opcodes::pop_mem             (aCPU, pc, 0xd0,0x02,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_02c8(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x02c8;
	clk += Opcodes::push_mem            (aCPU, pc, 0xc0,0x02,0x00);
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x01,0x7d);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_02cd(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x02cd;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x02,0x8e);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_02d0(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x02d0;
	clk += Opcodes::pop_mem             (aCPU, pc, 0xd0,0x02,0x00);
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xda,0xf4,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_02d4(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x02d4;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x0f,0xa7);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_02d7(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x02d7;
	clk += Opcodes::mov_dptr_imm        (aCPU, pc, 0x90,0x03,0xfd);
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfa,0x00,0x00);
	clk += Opcodes::push_mem            (aCPU, pc, 0xc0,0x02,0x00);
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x0f,0x26);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_02e1(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x02e1;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x02,0x0e);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_02e4(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x02e4;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x03,0x9f);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_02e7(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x02e7;
	clk += Opcodes::pop_mem             (aCPU, pc, 0xd0,0x02,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_02e9(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x02e9;
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0x06,0x09);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_02ec(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x02ec;
	clk += Opcodes::push_mem            (aCPU, pc, 0xc0,0x02,0x00);
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x01,0x7d);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_02f1(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x02f1;
	clk += Opcodes::pop_mem             (aCPU, pc, 0xd0,0x02,0x00);
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x07,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_02f5(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x02f5;
	clk += Opcodes::push_mem            (aCPU, pc, 0xc0,0x02,0x00);
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x2b,0x28);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_02fa(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x02fa;
	clk += Opcodes::pop_mem             (aCPU, pc, 0xd0,0x02,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_02fc(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x02fc;
	clk += Opcodes::push_mem            (aCPU, pc, 0xc0,0x02,0x00);
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x02,0x8e);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0301(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0301;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x04,0x49);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0304(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0304;
	clk += Opcodes::pop_mem             (aCPU, pc, 0xd0,0x02,0x00);
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xda,0xe1,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0308(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0308;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x0f,0xa7);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_030b(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x030b;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x33,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0xf0,0x00);
	clk += Opcodes::jnz_offset          (aCPU, pc, 0x70,0x5c,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0311(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0311;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x33,0x00);
	clk += Opcodes::rl_a                (aCPU, pc, 0x23,0x00,0x00);
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0xa8,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x82,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x83,0x03);
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0xe9,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::jnz_offset          (aCPU, pc, 0x70,0x03,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0321(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0321;
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::jz_offset           (aCPU, pc, 0x60,0x49,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0324(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0324;
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0xea,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xeb,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xec,0x00);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0x01,0x1f);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0330(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0330;
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0x2d,0x84);
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0x2e,0x85);
	clk += Opcodes::mov_rx_mem          (aCPU, pc, 0xa8,0x2f,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x92,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_033a(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x033a;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0xe9,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0xe9,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xef,0x21);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xe0,0x02);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0344(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0344;
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0346(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0346;
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xd8,0xf2,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0348(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0348;
	clk += Opcodes::dec_mem             (aCPU, pc, 0x15,0x92,0x00);
	clk += Opcodes::anl_mem_imm         (aCPU, pc, 0x53,0x85,0x03);
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x0e,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_034f(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x034f;
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0x02,0x05);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0352(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0352;
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0x2f,0xef);
	clk += Opcodes::nop                 (aCPU, pc, 0x00,0x00,0x00);
	clk += Opcodes::nop                 (aCPU, pc, 0x00,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0357(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0357;
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0x2d,0x84);
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0x2e,0x85);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_035d(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x035d;
	clk += Opcodes::clr_bitaddr         (aCPU, pc, 0xc2,0x06,0x00);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0xe9,0x00);
	clk += Opcodes::jnz_offset          (aCPU, pc, 0x70,0x0c,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0363(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0363;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0xea,0x00);
	clk += Opcodes::jnz_offset          (aCPU, pc, 0x70,0x08,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0367(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0367;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0xeb,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0x01,0x00);
	clk += Opcodes::jnz_offset          (aCPU, pc, 0x70,0x02,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_036d(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x036d;
	clk += Opcodes::setb_bitaddr        (aCPU, pc, 0xd2,0x06,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_036f(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x036f;
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0370(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0370;
	clk += Opcodes::push_mem            (aCPU, pc, 0xc0,0x00,0x00);
	clk += Opcodes::push_mem            (aCPU, pc, 0xc0,0x01,0x00);
	clk += Opcodes::push_mem            (aCPU, pc, 0xc0,0x02,0x00);
	clk += Opcodes::mov_rx_mem          (aCPU, pc, 0xa8,0x82,0x00);
	clk += Opcodes::mov_rx_mem          (aCPU, pc, 0xa9,0x83,0x00);
	clk += Opcodes::mov_dptr_imm        (aCPU, pc, 0x90,0x1d,0xf5);
	clk += Opcodes::mov_a_imm           (aCPU, pc, 0x74,0x0f,0x00);
	clk += Opcodes::anl_a_rx            (aCPU, pc, 0x58,0x00,0x00);
	clk += Opcodes::movc_a_indir_a_dptr (aCPU, pc, 0x93,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfa,0x00,0x00);
	clk += Opcodes::mov_a_imm           (aCPU, pc, 0x74,0xf0,0x00);
	clk += Opcodes::anl_a_rx            (aCPU, pc, 0x58,0x00,0x00);
	clk += Opcodes::swap_a              (aCPU, pc, 0xc4,0x00,0x00);
	clk += Opcodes::movc_a_indir_a_dptr (aCPU, pc, 0x93,0x00,0x00);
	clk += Opcodes::add_a_rx            (aCPU, pc, 0x2a,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfa,0x00,0x00);
	clk += Opcodes::mov_a_imm           (aCPU, pc, 0x74,0x0f,0x00);
	clk += Opcodes::anl_a_rx            (aCPU, pc, 0x59,0x00,0x00);
	clk += Opcodes::movc_a_indir_a_dptr (aCPU, pc, 0x93,0x00,0x00);
	clk += Opcodes::add_a_rx            (aCPU, pc, 0x2a,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfa,0x00,0x00);
	clk += Opcodes::mov_a_imm           (aCPU, pc, 0x74,0xf0,0x00);
	clk += Opcodes::anl_a_rx            (aCPU, pc, 0x59,0x00,0x00);
	clk += Opcodes::swap_a              (aCPU, pc, 0xc4,0x00,0x00);
	clk += Opcodes::movc_a_indir_a_dptr (aCPU, pc, 0x93,0x00,0x00);
	clk += Opcodes::add_a_rx            (aCPU, pc, 0x2a,0x00,0x00);
	clk += Opcodes::rl_a                (aCPU, pc, 0x23,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x82,0x00);
	clk += Opcodes::pop_mem             (aCPU, pc, 0xd0,0x02,0x00);
	clk += Opcodes::pop_mem             (aCPU, pc, 0xd0,0x01,0x00);
	clk += Opcodes::pop_mem             (aCPU, pc, 0xd0,0x00,0x00);
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_039f(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x039f;
	clk += Opcodes::clr_bitaddr         (aCPU, pc, 0xc2,0xb9,0x00);
	clk += Opcodes::mov_dptr_imm        (aCPU, pc, 0x90,0x03,0xf8);
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfa,0x00,0x00);
	clk += Opcodes::mov_dptr_imm        (aCPU, pc, 0x90,0x03,0xf9);
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfb,0x00,0x00);
	clk += Opcodes::setb_bitaddr        (aCPU, pc, 0xd2,0xb9,0x00);
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xea,0x00,0x00);
	clk += Opcodes::swap_a              (aCPU, pc, 0xc4,0x00,0x00);
	clk += Opcodes::rl_a                (aCPU, pc, 0x23,0x00,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0x1f,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfc,0x00,0x00);
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xeb,0x00,0x00);
	clk += Opcodes::swap_a              (aCPU, pc, 0xc4,0x00,0x00);
	clk += Opcodes::rl_a                (aCPU, pc, 0x23,0x00,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0x1f,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x33,0x00);
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xeb,0x00,0x00);
	clk += Opcodes::swap_a              (aCPU, pc, 0xc4,0x00,0x00);
	clk += Opcodes::rl_a                (aCPU, pc, 0x23,0x00,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0xe0,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x32,0x00);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x24,0x00);
	clk += Opcodes::clr_c               (aCPU, pc, 0xc3,0x00,0x00);
	clk += Opcodes::subb_a_rx           (aCPU, pc, 0x9a,0x00,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0x07,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfb,0x00,0x00);
	clk += Opcodes::rrc_a               (aCPU, pc, 0x13,0x00,0x00);
	clk += Opcodes::mov_bitaddr_c       (aCPU, pc, 0x92,0x03,0x00);
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xeb,0x00,0x00);
	clk += Opcodes::mov_c_bitaddr       (aCPU, pc, 0xa2,0xe1,0x00);
	clk += Opcodes::mov_bitaddr_c       (aCPU, pc, 0x92,0x04,0x00);
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xeb,0x00,0x00);
	clk += Opcodes::mov_c_bitaddr       (aCPU, pc, 0xa2,0xe2,0x00);
	clk += Opcodes::mov_bitaddr_c       (aCPU, pc, 0x92,0x05,0x00);
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xea,0x00,0x00);
	clk += Opcodes::add_a_rx            (aCPU, pc, 0x2a,0x00,0x00);
	clk += Opcodes::add_a_mem           (aCPU, pc, 0x25,0xe0,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfa,0x00,0x00);
	clk += Opcodes::mov_a_imm           (aCPU, pc, 0x74,0x1c,0x00);
	clk += Opcodes::anl_a_rx            (aCPU, pc, 0x5a,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x30,0x00);
	clk += Opcodes::mov_a_imm           (aCPU, pc, 0x74,0x08,0x00);
	clk += Opcodes::clr_c               (aCPU, pc, 0xc3,0x00,0x00);
	clk += Opcodes::subb_a_rx           (aCPU, pc, 0x9b,0x00,0x00);
	clk += Opcodes::add_a_mem           (aCPU, pc, 0x25,0xe0,0x00);
	clk += Opcodes::add_a_mem           (aCPU, pc, 0x25,0xe0,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfb,0x00,0x00);
	clk += Opcodes::mov_a_imm           (aCPU, pc, 0x74,0x1c,0x00);
	clk += Opcodes::anl_a_rx            (aCPU, pc, 0x5b,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x31,0x00);
	clk += Opcodes::clr_bitaddr         (aCPU, pc, 0xc2,0x02,0x00);
	clk += Opcodes::clr_bitaddr         (aCPU, pc, 0xc2,0x01,0x00);
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xec,0x00,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0xf0,0x00);
	clk += Opcodes::jz_offset           (aCPU, pc, 0x60,0x0a,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_03f6(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x03f6;
	clk += Opcodes::mov_a_imm           (aCPU, pc, 0x74,0x20,0x00);
	clk += Opcodes::clr_c               (aCPU, pc, 0xc3,0x00,0x00);
	clk += Opcodes::subb_a_rx           (aCPU, pc, 0x9c,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x2f,0x00);
	clk += Opcodes::setb_bitaddr        (aCPU, pc, 0xd2,0x02,0x00);
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x07,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0400(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0400;
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xec,0x00,0x00);
	clk += Opcodes::jz_offset           (aCPU, pc, 0x60,0x04,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0403(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0403;
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8c,0x2f,0x00);
	clk += Opcodes::setb_bitaddr        (aCPU, pc, 0xd2,0x01,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0407(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0407;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x2d,0x88);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x2e,0x02);
	clk += Opcodes::mov_a_imm           (aCPU, pc, 0x74,0xf0,0x00);
	clk += Opcodes::add_a_mem           (aCPU, pc, 0x25,0x33,0x00);
	clk += Opcodes::jc_offset           (aCPU, pc, 0x40,0x33,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0413(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0413;
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7a,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0415(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0415;
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xea,0x00,0x00);
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0x33,0x02);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0419(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0419;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x28,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_041b(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x041b;
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xea,0x00,0x00);
	clk += Opcodes::add_a_rx            (aCPU, pc, 0x2a,0x00,0x00);
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0xa8,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x82,0x00);
	clk += Opcodes::clr_a               (aCPU, pc, 0xe4,0x00,0x00);
	clk += Opcodes::addc_a_imm          (aCPU, pc, 0x34,0x03,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x83,0x00);
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfb,0x00,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfc,0x00,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8b,0x82,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8c,0x83,0x00);
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x03,0x70);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0432(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0432;
	clk += Opcodes::mov_rx_mem          (aCPU, pc, 0xab,0x82,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7c,0x00,0x00);
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xeb,0x00,0x00);
	clk += Opcodes::add_a_mem           (aCPU, pc, 0x25,0x2d,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x2d,0x00);
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xec,0x00,0x00);
	clk += Opcodes::addc_a_mem          (aCPU, pc, 0x35,0x2e,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x2e,0x00);
	clk += Opcodes::inc_rx              (aCPU, pc, 0x0a,0x00,0x00);
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0xd2,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0443(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0443;
	clk += Opcodes::anl_mem_imm         (aCPU, pc, 0x53,0x2e,0x03);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0446(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0446;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x03,0x0b);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0449(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0449;
	clk += Opcodes::mov_a_imm           (aCPU, pc, 0x74,0x20,0x00);
	clk += Opcodes::add_a_mem           (aCPU, pc, 0x25,0x32,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x32,0x00);
	clk += Opcodes::jz_offset           (aCPU, pc, 0x60,0x03,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0451(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0451;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x04,0x73);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0454(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0454;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x33,0x00);
	clk += Opcodes::inc_a               (aCPU, pc, 0x04,0x00,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0x1f,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x33,0x00);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0x06,0x03);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_045e(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x045e;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x04,0x73);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0461(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0461;
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0xe9,0x82);
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0xea,0x83);
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x03,0x70);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_046a(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x046a;
	clk += Opcodes::add_a_mem           (aCPU, pc, 0x25,0x84,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x2d,0x00);
	clk += Opcodes::clr_a               (aCPU, pc, 0xe4,0x00,0x00);
	clk += Opcodes::addc_a_mem          (aCPU, pc, 0x35,0x85,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x2e,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0473(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0473;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x03,0x0b);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0476(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0476;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x0f,0x26);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0479(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0479;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x02,0x0e);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_047c(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x047c;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x03,0x9f);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_047f(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x047f;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x04,0xaf);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0482(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0482;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x2c,0x00);
	clk += Opcodes::jz_offset           (aCPU, pc, 0x60,0x0d,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0486(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0486;
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0x06,0x05);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0489(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0489;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x0a,0xa3);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_048c(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x048c;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x10,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_048e(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x048e;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x0a,0xc4);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0491(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0491;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x0b,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0493(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0493;
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0x06,0x05);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0496(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0496;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x01,0x7d);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0499(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0499;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x03,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_049b(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x049b;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x2b,0x28);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_049e(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x049e;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x02,0x8e);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_04a1(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x04a1;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x04,0x49);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_04a4(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x04a4;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x04,0xbb);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_04a7(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x04a7;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x2b,0x00);
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0x2a,0xd6);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_04ac(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x04ac;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x0f,0xa7);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_04af(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x04af;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x2a,0xff);
	clk += Opcodes::mov_dptr_imm        (aCPU, pc, 0x90,0x03,0xfd);
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x2b,0x00);
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x04,0xbb);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_04bb(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x04bb;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x2a,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x2c,0x00);
	clk += Opcodes::mov_dptr_imm        (aCPU, pc, 0x90,0x03,0xc8);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x78,0x34,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7a,0x08,0x00);
	clk += Opcodes::mov_rx_mem          (aCPU, pc, 0xab,0x2a,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_04c9(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x04c9;
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::jz_offset           (aCPU, pc, 0x60,0x6d,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_04cc(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x04cc;
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfc,0x00,0x00);
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfd,0x00,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::add_a_rx            (aCPU, pc, 0x2b,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfe,0x00,0x00);
	clk += Opcodes::anl_a_rx            (aCPU, pc, 0x5c,0x00,0x00);
	clk += Opcodes::jnz_offset          (aCPU, pc, 0x70,0x6a,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_04d7(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x04d7;
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xff,0x00,0x00);
	clk += Opcodes::anl_a_rx            (aCPU, pc, 0x5d,0x00,0x00);
	clk += Opcodes::jz_offset           (aCPU, pc, 0x60,0x05,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_04dd(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x04dd;
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xef,0x00,0x00);
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0x7f,0x00);
	clk += Opcodes::jnc_offset          (aCPU, pc, 0x50,0x67,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_04e2(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x04e2;
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xed,0x00,0x00);
	clk += Opcodes::mov_indir_rx_a      (aCPU, pc, 0xf6,0x00,0x00);
	clk += Opcodes::inc_rx              (aCPU, pc, 0x08,0x00,0x00);
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xef,0x00,0x00);
	clk += Opcodes::mov_indir_rx_a      (aCPU, pc, 0xf6,0x00,0x00);
	clk += Opcodes::inc_rx              (aCPU, pc, 0x08,0x00,0x00);
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xee,0x00,0x00);
	clk += Opcodes::swap_a              (aCPU, pc, 0xc4,0x00,0x00);
	clk += Opcodes::rl_a                (aCPU, pc, 0x23,0x00,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0x1f,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8d,0xf0,0x00);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xf6,0x0b);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_04f3(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x04f3;
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xf5,0x09);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_04f6(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x04f6;
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xf4,0x07);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_04f9(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x04f9;
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xf3,0x05);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_04fc(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x04fc;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x04,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_04fe(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x04fe;
	clk += Opcodes::rl_a                (aCPU, pc, 0x23,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_04ff(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x04ff;
	clk += Opcodes::rl_a                (aCPU, pc, 0x23,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0500(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0500;
	clk += Opcodes::rl_a                (aCPU, pc, 0x23,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0501(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0501;
	clk += Opcodes::rl_a                (aCPU, pc, 0x23,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0502(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0502;
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xf9,0x00,0x00);
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xef,0x00,0x00);
	clk += Opcodes::anl_a_rx            (aCPU, pc, 0x5d,0x00,0x00);
	clk += Opcodes::jnz_offset          (aCPU, pc, 0x70,0x07,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0507(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0507;
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xef,0x00,0x00);
	clk += Opcodes::swap_a              (aCPU, pc, 0xc4,0x00,0x00);
	clk += Opcodes::rl_a                (aCPU, pc, 0x23,0x00,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0x1f,0x00);
	clk += Opcodes::add_a_rx            (aCPU, pc, 0x29,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xf9,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_050e(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x050e;
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::add_a_rx            (aCPU, pc, 0x29,0x00,0x00);
	clk += Opcodes::mov_bitaddr_c       (aCPU, pc, 0x92,0xf0,0x00);
	clk += Opcodes::add_a_rx            (aCPU, pc, 0x29,0x00,0x00);
	clk += Opcodes::mov_bitaddr_c       (aCPU, pc, 0x92,0xf1,0x00);
	clk += Opcodes::mov_indir_rx_a      (aCPU, pc, 0xf6,0x00,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::inc_rx              (aCPU, pc, 0x08,0x00,0x00);
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xf0,0x02);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_051c(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x051c;
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0x02,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_051e(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x051e;
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xf1,0x02);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0521(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0521;
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0x02,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0523(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0523;
	clk += Opcodes::mov_indir_rx_a      (aCPU, pc, 0xf6,0x00,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::inc_rx              (aCPU, pc, 0x08,0x00,0x00);
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xee,0x00,0x00);
	clk += Opcodes::swap_a              (aCPU, pc, 0xc4,0x00,0x00);
	clk += Opcodes::rl_a                (aCPU, pc, 0x23,0x00,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0xe0,0x00);
	clk += Opcodes::mov_indir_rx_a      (aCPU, pc, 0xf6,0x00,0x00);
	clk += Opcodes::inc_rx              (aCPU, pc, 0x08,0x00,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x2c,0x00);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x2c,0x00);
	clk += Opcodes::xrl_a_imm           (aCPU, pc, 0x64,0x04,0x00);
	clk += Opcodes::jz_offset           (aCPU, pc, 0x60,0x1c,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0535(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0535;
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xda,0x92,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0537(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0537;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x18,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0539(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0539;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x82,0x00);
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0x06,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x82,0x00);
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0xf4,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0541(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0541;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x82,0x00);
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0x04,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x82,0x00);
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0xec,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0549(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0549;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x82,0x00);
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0x03,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x82,0x00);
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0xe4,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0551(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0551;
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0552(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0552;
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0x36,0x80);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x3d);
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0x37,0x80);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x3b);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x35,0x00);
	clk += Opcodes::dec_a               (aCPU, pc, 0x14,0x00,0x00);
	clk += Opcodes::rl_a                (aCPU, pc, 0x23,0x00,0x00);
	clk += Opcodes::rl_a                (aCPU, pc, 0x23,0x00,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0x1c,0x00);
	clk += Opcodes::cjne_a_imm_offset   (aCPU, pc, 0xb4,0x1c,0x13);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0568(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0568;
	clk += Opcodes::add_a_mem           (aCPU, pc, 0x25,0x38,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x80,0x00);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x36,0x00);
	clk += Opcodes::inc_a               (aCPU, pc, 0x04,0x00,0x00);
	clk += Opcodes::inc_a               (aCPU, pc, 0x04,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x36,0x00);
	clk += Opcodes::jnz_offset          (aCPU, pc, 0x70,0x04,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0574(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0574;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x37,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x37,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0578(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0578;
	clk += Opcodes::mov_a_imm           (aCPU, pc, 0x74,0x4f,0x00);
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_057b(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x057b;
	clk += Opcodes::add_a_mem           (aCPU, pc, 0x25,0x38,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x80,0x00);
	clk += Opcodes::mov_a_imm           (aCPU, pc, 0x74,0x4f,0x00);
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0582(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0582;
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0x3b,0x80);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x3d);
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0x3c,0x80);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x3b);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x3a,0x00);
	clk += Opcodes::dec_a               (aCPU, pc, 0x14,0x00,0x00);
	clk += Opcodes::rl_a                (aCPU, pc, 0x23,0x00,0x00);
	clk += Opcodes::rl_a                (aCPU, pc, 0x23,0x00,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0x1c,0x00);
	clk += Opcodes::cjne_a_imm_offset   (aCPU, pc, 0xb4,0x1c,0x13);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0598(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0598;
	clk += Opcodes::add_a_mem           (aCPU, pc, 0x25,0x3d,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x80,0x00);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x3b,0x00);
	clk += Opcodes::inc_a               (aCPU, pc, 0x04,0x00,0x00);
	clk += Opcodes::inc_a               (aCPU, pc, 0x04,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x3b,0x00);
	clk += Opcodes::jnz_offset          (aCPU, pc, 0x70,0x04,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_05a4(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x05a4;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x3c,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x3c,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_05a8(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x05a8;
	clk += Opcodes::mov_a_imm           (aCPU, pc, 0x74,0x4f,0x00);
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_05ab(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x05ab;
	clk += Opcodes::add_a_mem           (aCPU, pc, 0x25,0x3d,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x80,0x00);
	clk += Opcodes::mov_a_imm           (aCPU, pc, 0x74,0x4f,0x00);
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_05b2(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x05b2;
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0x40,0x80);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x3d);
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0x41,0x80);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x3b);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x3f,0x00);
	clk += Opcodes::dec_a               (aCPU, pc, 0x14,0x00,0x00);
	clk += Opcodes::rl_a                (aCPU, pc, 0x23,0x00,0x00);
	clk += Opcodes::rl_a                (aCPU, pc, 0x23,0x00,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0x1c,0x00);
	clk += Opcodes::cjne_a_imm_offset   (aCPU, pc, 0xb4,0x1c,0x13);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_05c8(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x05c8;
	clk += Opcodes::add_a_mem           (aCPU, pc, 0x25,0x42,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x80,0x00);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x40,0x00);
	clk += Opcodes::inc_a               (aCPU, pc, 0x04,0x00,0x00);
	clk += Opcodes::inc_a               (aCPU, pc, 0x04,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x40,0x00);
	clk += Opcodes::jnz_offset          (aCPU, pc, 0x70,0x04,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_05d4(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x05d4;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x41,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x41,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_05d8(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x05d8;
	clk += Opcodes::mov_a_imm           (aCPU, pc, 0x74,0x4f,0x00);
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_05db(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x05db;
	clk += Opcodes::add_a_mem           (aCPU, pc, 0x25,0x42,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x80,0x00);
	clk += Opcodes::mov_a_imm           (aCPU, pc, 0x74,0x4f,0x00);
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_05e2(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x05e2;
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0x45,0x80);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x3d);
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0x46,0x80);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x3b);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x44,0x00);
	clk += Opcodes::dec_a               (aCPU, pc, 0x14,0x00,0x00);
	clk += Opcodes::rl_a                (aCPU, pc, 0x23,0x00,0x00);
	clk += Opcodes::rl_a                (aCPU, pc, 0x23,0x00,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0x1c,0x00);
	clk += Opcodes::cjne_a_imm_offset   (aCPU, pc, 0xb4,0x1c,0x13);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_05f8(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x05f8;
	clk += Opcodes::add_a_mem           (aCPU, pc, 0x25,0x47,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x80,0x00);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x45,0x00);
	clk += Opcodes::inc_a               (aCPU, pc, 0x04,0x00,0x00);
	clk += Opcodes::inc_a               (aCPU, pc, 0x04,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x45,0x00);
	clk += Opcodes::jnz_offset          (aCPU, pc, 0x70,0x04,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0604(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0604;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x46,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x46,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0608(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0608;
	clk += Opcodes::mov_a_imm           (aCPU, pc, 0x74,0x4f,0x00);
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_060b(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x060b;
	clk += Opcodes::add_a_mem           (aCPU, pc, 0x25,0x47,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x80,0x00);
	clk += Opcodes::mov_a_imm           (aCPU, pc, 0x74,0x4f,0x00);
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0612(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0612;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x34,0x00);
	clk += Opcodes::anl_a_mem           (aCPU, pc, 0x55,0x35,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x35,0x00);
	clk += Opcodes::jz_offset           (aCPU, pc, 0x60,0x01,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_061a(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x061a;
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_061b(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x061b;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x35,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0x07,0x00);
	clk += Opcodes::jnz_offset          (aCPU, pc, 0x70,0xf9,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0621(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0621;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x36,0x00);
	clk += Opcodes::inc_a               (aCPU, pc, 0x04,0x00,0x00);
	clk += Opcodes::inc_a               (aCPU, pc, 0x04,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x36,0x00);
	clk += Opcodes::jnz_offset          (aCPU, pc, 0x70,0xf1,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0629(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0629;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x37,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x37,0x00);
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_062e(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x062e;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x39,0x00);
	clk += Opcodes::anl_a_mem           (aCPU, pc, 0x55,0x3a,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x3a,0x00);
	clk += Opcodes::jz_offset           (aCPU, pc, 0x60,0x01,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0636(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0636;
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0637(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0637;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x3a,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0x07,0x00);
	clk += Opcodes::jnz_offset          (aCPU, pc, 0x70,0xf9,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_063d(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x063d;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x3b,0x00);
	clk += Opcodes::inc_a               (aCPU, pc, 0x04,0x00,0x00);
	clk += Opcodes::inc_a               (aCPU, pc, 0x04,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x3b,0x00);
	clk += Opcodes::jnz_offset          (aCPU, pc, 0x70,0xf1,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0645(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0645;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x3c,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x3c,0x00);
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_064a(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x064a;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x3e,0x00);
	clk += Opcodes::anl_a_mem           (aCPU, pc, 0x55,0x3f,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x3f,0x00);
	clk += Opcodes::jz_offset           (aCPU, pc, 0x60,0x01,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0652(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0652;
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0653(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0653;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x3f,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0x07,0x00);
	clk += Opcodes::jnz_offset          (aCPU, pc, 0x70,0xf9,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0659(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0659;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x40,0x00);
	clk += Opcodes::inc_a               (aCPU, pc, 0x04,0x00,0x00);
	clk += Opcodes::inc_a               (aCPU, pc, 0x04,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x40,0x00);
	clk += Opcodes::jnz_offset          (aCPU, pc, 0x70,0xf1,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0661(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0661;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x41,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x41,0x00);
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0666(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0666;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x43,0x00);
	clk += Opcodes::anl_a_mem           (aCPU, pc, 0x55,0x44,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x44,0x00);
	clk += Opcodes::jz_offset           (aCPU, pc, 0x60,0x01,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_066e(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x066e;
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_066f(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x066f;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x44,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0x07,0x00);
	clk += Opcodes::jnz_offset          (aCPU, pc, 0x70,0xf9,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0675(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0675;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x45,0x00);
	clk += Opcodes::inc_a               (aCPU, pc, 0x04,0x00,0x00);
	clk += Opcodes::inc_a               (aCPU, pc, 0x04,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x45,0x00);
	clk += Opcodes::jnz_offset          (aCPU, pc, 0x70,0xf1,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_067d(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x067d;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x46,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x46,0x00);
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0682(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0682;
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xeb,0x00,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0x1f,0x00);
	clk += Opcodes::jnz_offset          (aCPU, pc, 0x70,0x03,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0687(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0687;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x07,0x38);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_068a(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x068a;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x34,0x00);
	clk += Opcodes::anl_a_mem           (aCPU, pc, 0x55,0x35,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x35,0x00);
	clk += Opcodes::jz_offset           (aCPU, pc, 0x60,0x2c,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0692(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0692;
	clk += Opcodes::cjne_rx_imm_offset  (aCPU, pc, 0xbe,0x01,0x03);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0695(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0695;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x07,0x0b);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0698(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0698;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x39,0x00);
	clk += Opcodes::anl_a_mem           (aCPU, pc, 0x55,0x3a,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x3a,0x00);
	clk += Opcodes::jz_offset           (aCPU, pc, 0x60,0x2a,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_06a0(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x06a0;
	clk += Opcodes::cjne_rx_imm_offset  (aCPU, pc, 0xbe,0x02,0x03);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_06a3(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x06a3;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x07,0x0b);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_06a6(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x06a6;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x3e,0x00);
	clk += Opcodes::anl_a_mem           (aCPU, pc, 0x55,0x3f,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x3f,0x00);
	clk += Opcodes::jz_offset           (aCPU, pc, 0x60,0x28,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_06ae(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x06ae;
	clk += Opcodes::cjne_rx_imm_offset  (aCPU, pc, 0xbe,0x03,0x03);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_06b1(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x06b1;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x07,0x0b);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_06b4(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x06b4;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x43,0x00);
	clk += Opcodes::anl_a_mem           (aCPU, pc, 0x55,0x44,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x44,0x00);
	clk += Opcodes::jz_offset           (aCPU, pc, 0x60,0x26,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_06bc(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x06bc;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x4d,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_06be(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x06be;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x05,0x52);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_06c1(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x06c1;
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0xa0,0x03);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_06c4(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x06c4;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x06,0x92);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_06c7(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x06c7;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x06,0xee);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_06ca(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x06ca;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x05,0x82);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_06cd(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x06cd;
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0xa0,0x03);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_06d0(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x06d0;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x06,0xa0);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_06d3(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x06d3;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x06,0xf7);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_06d6(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x06d6;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x05,0xb2);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_06d9(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x06d9;
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0xa0,0x03);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_06dc(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x06dc;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x06,0xae);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_06df(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x06df;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x07,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_06e2(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x06e2;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x05,0xe2);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_06e5(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x06e5;
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0xa0,0x03);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_06e8(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x06e8;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x07,0x0b);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_06eb(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x06eb;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x07,0x1c);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_06ee(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x06ee;
	clk += Opcodes::cjne_rx_imm_offset  (aCPU, pc, 0xbe,0x01,0x03);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_06f1(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x06f1;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x07,0x1c);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_06f4(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x06f4;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x06,0x2e);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_06f7(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x06f7;
	clk += Opcodes::cjne_rx_imm_offset  (aCPU, pc, 0xbe,0x02,0x03);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_06fa(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x06fa;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x07,0x1c);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_06fd(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x06fd;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x06,0x4a);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0700(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0700;
	clk += Opcodes::cjne_rx_imm_offset  (aCPU, pc, 0xbe,0x03,0x03);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0703(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0703;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x07,0x1c);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0706(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0706;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x06,0x66);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0709(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0709;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x11,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_070b(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x070b;
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x80,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x3d);
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x80,0x00);
	clk += Opcodes::dec_mem             (aCPU, pc, 0x15,0x82,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x3b);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8b,0x80,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_071c(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x071c;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::dec_rx              (aCPU, pc, 0x1d,0x00,0x00);
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xeb,0x00,0x00);
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0x04,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfb,0x00,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0x1f,0x00);
	clk += Opcodes::jnz_offset          (aCPU, pc, 0x70,0x52,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_072d(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x072d;
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xeb,0x00,0x00);
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0xe0,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfb,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0731(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0731;
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xd9,0x03,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0735(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0735;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x01,0x69);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0738(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0738;
	clk += Opcodes::mov_rx_mem          (aCPU, pc, 0xa8,0x35,0x00);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x34,0x00);
	clk += Opcodes::anl_a_rx            (aCPU, pc, 0x58,0x00,0x00);
	clk += Opcodes::jz_offset           (aCPU, pc, 0x60,0x40,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_073f(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x073f;
	clk += Opcodes::mov_a_imm           (aCPU, pc, 0x74,0x08,0x00);
	clk += Opcodes::add_a_rx            (aCPU, pc, 0x28,0x00,0x00);
	clk += Opcodes::jc_offset           (aCPU, pc, 0x40,0x3b,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0744(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0744;
	clk += Opcodes::cjne_rx_imm_offset  (aCPU, pc, 0xbe,0x01,0x03);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0747(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0747;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x07,0x7a);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_074a(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x074a;
	clk += Opcodes::mov_rx_mem          (aCPU, pc, 0xa8,0x3a,0x00);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x39,0x00);
	clk += Opcodes::anl_a_rx            (aCPU, pc, 0x58,0x00,0x00);
	clk += Opcodes::jz_offset           (aCPU, pc, 0x60,0x2e,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0751(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0751;
	clk += Opcodes::mov_a_imm           (aCPU, pc, 0x74,0x08,0x00);
	clk += Opcodes::add_a_rx            (aCPU, pc, 0x28,0x00,0x00);
	clk += Opcodes::jc_offset           (aCPU, pc, 0x40,0x29,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0756(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0756;
	clk += Opcodes::cjne_rx_imm_offset  (aCPU, pc, 0xbe,0x02,0x03);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0759(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0759;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x07,0x7a);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_075c(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x075c;
	clk += Opcodes::mov_rx_mem          (aCPU, pc, 0xa8,0x3f,0x00);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x3e,0x00);
	clk += Opcodes::anl_a_rx            (aCPU, pc, 0x58,0x00,0x00);
	clk += Opcodes::jz_offset           (aCPU, pc, 0x60,0x1c,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0763(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0763;
	clk += Opcodes::mov_a_imm           (aCPU, pc, 0x74,0x08,0x00);
	clk += Opcodes::add_a_rx            (aCPU, pc, 0x28,0x00,0x00);
	clk += Opcodes::jc_offset           (aCPU, pc, 0x40,0x17,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0768(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0768;
	clk += Opcodes::cjne_rx_imm_offset  (aCPU, pc, 0xbe,0x03,0x03);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_076b(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x076b;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x07,0x7a);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_076e(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x076e;
	clk += Opcodes::mov_rx_mem          (aCPU, pc, 0xa8,0x44,0x00);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x43,0x00);
	clk += Opcodes::anl_a_rx            (aCPU, pc, 0x58,0x00,0x00);
	clk += Opcodes::jz_offset           (aCPU, pc, 0x60,0x0a,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0775(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0775;
	clk += Opcodes::mov_a_imm           (aCPU, pc, 0x74,0x08,0x00);
	clk += Opcodes::add_a_rx            (aCPU, pc, 0x28,0x00,0x00);
	clk += Opcodes::jc_offset           (aCPU, pc, 0x40,0x05,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_077a(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x077a;
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xed,0x00,0x00);
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0xf8,0x00);
	clk += Opcodes::jc_offset           (aCPU, pc, 0x40,0x07,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_077f(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x077f;
	clk += Opcodes::cjne_rx_imm_offset  (aCPU, pc, 0xbd,0x00,0x01);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0782(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0782;
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0783(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0783;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x06,0x8a);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0786(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0786;
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfd,0x00,0x00);
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x80,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x3d);
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x80,0x00);
	clk += Opcodes::dec_mem             (aCPU, pc, 0x15,0x82,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x3b);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8b,0x80,0x00);
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x20,0xc4);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_079b(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x079b;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x35,0x00);
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0x08,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x35,0x00);
	clk += Opcodes::cjne_rx_imm_offset  (aCPU, pc, 0xbe,0x01,0x03);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_07a4(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x07a4;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x07,0xc5);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_07a7(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x07a7;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x3a,0x00);
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0x08,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x3a,0x00);
	clk += Opcodes::cjne_rx_imm_offset  (aCPU, pc, 0xbe,0x02,0x03);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_07b0(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x07b0;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x07,0xc5);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_07b3(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x07b3;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x3f,0x00);
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0x08,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x3f,0x00);
	clk += Opcodes::cjne_rx_imm_offset  (aCPU, pc, 0xbe,0x03,0x03);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_07bc(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x07bc;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x07,0xc5);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_07bf(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x07bf;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x44,0x00);
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0x08,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x44,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_07c5(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x07c5;
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xed,0x00,0x00);
	clk += Opcodes::jz_offset           (aCPU, pc, 0x60,0xba,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_07c8(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x07c8;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x07,0x31);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_07cb(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x07cb;
	clk += Opcodes::mov_rx_mem          (aCPU, pc, 0xaf,0x35,0x00);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x34,0x00);
	clk += Opcodes::anl_a_rx            (aCPU, pc, 0x5f,0x00,0x00);
	clk += Opcodes::jnz_offset          (aCPU, pc, 0x70,0x12,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_07d2(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x07d2;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x34,0x00);
	clk += Opcodes::add_a_rx            (aCPU, pc, 0x2f,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xf8,0x00,0x00);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x35,0x00);
	clk += Opcodes::rl_a                (aCPU, pc, 0x23,0x00,0x00);
	clk += Opcodes::rl_a                (aCPU, pc, 0x23,0x00,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0x1c,0x00);
	clk += Opcodes::add_a_mem           (aCPU, pc, 0x25,0x38,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfc,0x00,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7f,0x80,0x00);
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x08,0x59);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_07e4(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x07e4;
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xef,0x00,0x00);
	clk += Opcodes::cpl_a               (aCPU, pc, 0xf4,0x00,0x00);
	clk += Opcodes::inc_a               (aCPU, pc, 0x04,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xf8,0x00,0x00);
	clk += Opcodes::mov_a_imm           (aCPU, pc, 0x74,0x80,0x00);
	clk += Opcodes::clr_c               (aCPU, pc, 0xc3,0x00,0x00);
	clk += Opcodes::subb_a_rx           (aCPU, pc, 0x98,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xff,0x00,0x00);
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x80,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x3d);
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x80,0x00);
	clk += Opcodes::dec_mem             (aCPU, pc, 0x15,0x82,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x3b);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8b,0x80,0x00);
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xe8,0x00,0x00);
	clk += Opcodes::clr_c               (aCPU, pc, 0xc3,0x00,0x00);
	clk += Opcodes::subb_a_mem          (aCPU, pc, 0x95,0x23,0x00);
	clk += Opcodes::jnc_offset          (aCPU, pc, 0x50,0x0c,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0804(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0804;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xd8,0xf6,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_080e(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x080e;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x40,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0810(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0810;
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xf8,0x00,0x00);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x23,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0813(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0813;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::djnz_mem_offset     (aCPU, pc, 0xd5,0xe0,0xf5);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_081e(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x081e;
	clk += Opcodes::mov_rx_mem          (aCPU, pc, 0xab,0x27,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0820(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0820;
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xd9,0x03,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0824(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0824;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x01,0x69);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0827(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0827;
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x80,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x3d);
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x80,0x00);
	clk += Opcodes::dec_mem             (aCPU, pc, 0x15,0x82,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x3b);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8b,0x80,0x00);
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xe8,0x00,0x00);
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0xf8,0x00);
	clk += Opcodes::jnc_offset          (aCPU, pc, 0x50,0x06,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_083d(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x083d;
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xf8,0x00,0x00);
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x20,0xc4);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0841(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0841;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0xdd,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0843(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0843;
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xe8,0x00,0x00);
	clk += Opcodes::jz_offset           (aCPU, pc, 0x60,0x0a,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0846(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0846;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xd8,0xf6,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0850(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0850;
	clk += Opcodes::mov_rx_mem          (aCPU, pc, 0xab,0x80,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x35,0x00);
	clk += Opcodes::mov_rx_mem          (aCPU, pc, 0xa8,0x34,0x00);
	clk += Opcodes::mov_rx_mem          (aCPU, pc, 0xac,0x38,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0859(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0859;
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0x36,0x80);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x3d);
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0x37,0x80);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x3b);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8c,0x80,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0867(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0867;
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8c,0x80,0x00);
	clk += Opcodes::mov_a_imm           (aCPU, pc, 0x74,0x4f,0x00);
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0xa0,0x2a);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_086e(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x086e;
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x80,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x3d);
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x80,0x00);
	clk += Opcodes::dec_mem             (aCPU, pc, 0x15,0x82,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x3b);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8b,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0x36,0x80);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x3d);
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0x37,0x80);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x3b);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8c,0x80,0x00);
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xdf,0x0c,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0897(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0897;
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0898(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0898;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xdf,0x01,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_08a2(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x08a2;
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_08a3(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x08a3;
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xeb,0x00,0x00);
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0x04,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfb,0x00,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0x1f,0x00);
	clk += Opcodes::jnz_offset          (aCPU, pc, 0x70,0x0b,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_08ab(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x08ab;
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xeb,0x00,0x00);
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0xe0,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfb,0x00,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xd9,0x03,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_08b3(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x08b3;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x01,0x69);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_08b6(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x08b6;
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xec,0x00,0x00);
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0x04,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfc,0x00,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0x1f,0x00);
	clk += Opcodes::jnz_offset          (aCPU, pc, 0x70,0x1c,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_08be(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x08be;
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xec,0x00,0x00);
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0xe0,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfc,0x00,0x00);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x36,0x00);
	clk += Opcodes::inc_a               (aCPU, pc, 0x04,0x00,0x00);
	clk += Opcodes::inc_a               (aCPU, pc, 0x04,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x36,0x00);
	clk += Opcodes::jnz_offset          (aCPU, pc, 0x70,0x04,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_08ca(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x08ca;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x37,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x37,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_08ce(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x08ce;
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0x36,0x80);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x3d);
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0x37,0x80);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x3b);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_08da(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x08da;
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xe8,0x00,0x00);
	clk += Opcodes::inc_a               (aCPU, pc, 0x04,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xf8,0x00,0x00);
	clk += Opcodes::jnz_offset          (aCPU, pc, 0x70,0x88,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_08df(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x08df;
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xeb,0x00,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0x1f,0x00);
	clk += Opcodes::jz_offset           (aCPU, pc, 0x60,0x29,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_08e4(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x08e4;
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x80,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x3d);
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x80,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x3b);
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xd9,0x03,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_08f4(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x08f4;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x01,0x69);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_08f7(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x08f7;
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8b,0x80,0x00);
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xeb,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_08fa(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x08fa;
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0x1f,0x00);
	clk += Opcodes::jz_offset           (aCPU, pc, 0x60,0x0f,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_08fe(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x08fe;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xdf,0x01,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0908(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0908;
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0909(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0909;
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0x04,0x00);
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0xed,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_090d(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x090d;
	clk += Opcodes::mov_rx_mem          (aCPU, pc, 0xab,0x27,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_090f(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x090f;
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x80,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x3d);
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x80,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x3b);
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xd9,0x03,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_091f(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x091f;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x01,0x69);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0922(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0922;
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8b,0x80,0x00);
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xef,0x00,0x00);
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0xf8,0x00);
	clk += Opcodes::jnc_offset          (aCPU, pc, 0x50,0x06,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0929(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0929;
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xff,0x00,0x00);
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x20,0xc4);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_092d(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x092d;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0xe0,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_092f(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x092f;
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xef,0x00,0x00);
	clk += Opcodes::jz_offset           (aCPU, pc, 0x60,0x0a,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0932(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0932;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xdf,0xf6,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_093c(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x093c;
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_093d(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x093d;
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xeb,0x00,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0x1f,0x00);
	clk += Opcodes::jnz_offset          (aCPU, pc, 0x70,0x03,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0942(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0942;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x0a,0x15);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0945(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0945;
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xf0,0x06);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0948(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0948;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x20,0x14);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_094b(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x094b;
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0xa0,0x65);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_094e(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x094e;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x34,0x00);
	clk += Opcodes::anl_a_mem           (aCPU, pc, 0x55,0x35,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x35,0x00);
	clk += Opcodes::jz_offset           (aCPU, pc, 0x60,0x2d,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0956(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0956;
	clk += Opcodes::cjne_rx_imm_offset  (aCPU, pc, 0xbe,0x01,0x03);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0959(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0959;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x09,0xd3);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_095c(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x095c;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x39,0x00);
	clk += Opcodes::anl_a_mem           (aCPU, pc, 0x55,0x3a,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x3a,0x00);
	clk += Opcodes::jz_offset           (aCPU, pc, 0x60,0x2b,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0964(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0964;
	clk += Opcodes::cjne_rx_imm_offset  (aCPU, pc, 0xbe,0x02,0x03);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0967(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0967;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x09,0xd3);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_096a(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x096a;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x3e,0x00);
	clk += Opcodes::anl_a_mem           (aCPU, pc, 0x55,0x3f,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x3f,0x00);
	clk += Opcodes::jz_offset           (aCPU, pc, 0x60,0x29,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0972(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0972;
	clk += Opcodes::cjne_rx_imm_offset  (aCPU, pc, 0xbe,0x03,0x03);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0975(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0975;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x09,0xd3);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0978(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0978;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x43,0x00);
	clk += Opcodes::anl_a_mem           (aCPU, pc, 0x55,0x44,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x44,0x00);
	clk += Opcodes::jz_offset           (aCPU, pc, 0x60,0x27,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0980(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0980;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x09,0xd3);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0983(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0983;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x05,0x52);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0986(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0986;
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0xa0,0x03);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0989(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0989;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x09,0x56);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_098c(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x098c;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x09,0xb6);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_098f(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x098f;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x05,0x82);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0992(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0992;
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0xa0,0x03);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0995(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0995;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x09,0x64);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0998(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0998;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x09,0xbf);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_099b(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x099b;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x05,0xb2);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_099e(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x099e;
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0xa0,0x03);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_09a1(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x09a1;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x09,0x72);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_09a4(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x09a4;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x09,0xc8);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_09a7(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x09a7;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x05,0xe2);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_09aa(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x09aa;
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0xa0,0x03);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_09ad(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x09ad;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x09,0xd3);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_09b0(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x09b0;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x09,0xd6);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_09b3(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x09b3;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x06,0x12);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_09b6(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x09b6;
	clk += Opcodes::cjne_rx_imm_offset  (aCPU, pc, 0xbe,0x01,0x03);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_09b9(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x09b9;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x09,0xd6);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_09bc(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x09bc;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x06,0x2e);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_09bf(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x09bf;
	clk += Opcodes::cjne_rx_imm_offset  (aCPU, pc, 0xbe,0x02,0x03);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_09c2(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x09c2;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x09,0xd6);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_09c5(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x09c5;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x06,0x4a);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_09c8(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x09c8;
	clk += Opcodes::cjne_rx_imm_offset  (aCPU, pc, 0xbe,0x03,0x03);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_09cb(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x09cb;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x09,0xd6);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_09ce(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x09ce;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x06,0x66);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_09d1(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x09d1;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x03,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_09d3(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x09d3;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x20,0x7e);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_09d6(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x09d6;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::dec_rx              (aCPU, pc, 0x1d,0x00,0x00);
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xec,0x00,0x00);
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0x04,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfc,0x00,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0x1f,0x00);
	clk += Opcodes::jnz_offset          (aCPU, pc, 0x70,0x18,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_09e7(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x09e7;
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0xf0,0xe9);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xef,0x21);
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xec,0x00,0x00);
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0xe0,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfc,0x00,0x00);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xf0,0x08);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_09f4(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x09f4;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x92,0x01);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::anl_mem_imm         (aCPU, pc, 0x53,0x85,0x03);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_09fc(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x09fc;
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0xe9,0xf0);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_09ff(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x09ff;
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xeb,0x00,0x00);
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0x04,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfb,0x00,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0x1f,0x00);
	clk += Opcodes::jnz_offset          (aCPU, pc, 0x70,0x55,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0a07(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0a07;
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xeb,0x00,0x00);
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0xe0,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfb,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0a0b(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0a0b;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x92,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xd9,0x03,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0a12(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0a12;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x01,0x69);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0a15(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0a15;
	clk += Opcodes::mov_rx_mem          (aCPU, pc, 0xa8,0x35,0x00);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x34,0x00);
	clk += Opcodes::anl_a_rx            (aCPU, pc, 0x58,0x00,0x00);
	clk += Opcodes::jz_offset           (aCPU, pc, 0x60,0x40,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0a1c(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0a1c;
	clk += Opcodes::mov_a_imm           (aCPU, pc, 0x74,0x08,0x00);
	clk += Opcodes::add_a_rx            (aCPU, pc, 0x28,0x00,0x00);
	clk += Opcodes::jc_offset           (aCPU, pc, 0x40,0x3b,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0a21(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0a21;
	clk += Opcodes::cjne_rx_imm_offset  (aCPU, pc, 0xbe,0x01,0x03);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0a24(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0a24;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x0a,0x57);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0a27(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0a27;
	clk += Opcodes::mov_rx_mem          (aCPU, pc, 0xa8,0x3a,0x00);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x39,0x00);
	clk += Opcodes::anl_a_rx            (aCPU, pc, 0x58,0x00,0x00);
	clk += Opcodes::jz_offset           (aCPU, pc, 0x60,0x2e,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0a2e(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0a2e;
	clk += Opcodes::mov_a_imm           (aCPU, pc, 0x74,0x08,0x00);
	clk += Opcodes::add_a_rx            (aCPU, pc, 0x28,0x00,0x00);
	clk += Opcodes::jc_offset           (aCPU, pc, 0x40,0x29,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0a33(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0a33;
	clk += Opcodes::cjne_rx_imm_offset  (aCPU, pc, 0xbe,0x02,0x03);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0a36(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0a36;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x0a,0x57);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0a39(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0a39;
	clk += Opcodes::mov_rx_mem          (aCPU, pc, 0xa8,0x3f,0x00);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x3e,0x00);
	clk += Opcodes::anl_a_rx            (aCPU, pc, 0x58,0x00,0x00);
	clk += Opcodes::jz_offset           (aCPU, pc, 0x60,0x1c,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0a40(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0a40;
	clk += Opcodes::mov_a_imm           (aCPU, pc, 0x74,0x08,0x00);
	clk += Opcodes::add_a_rx            (aCPU, pc, 0x28,0x00,0x00);
	clk += Opcodes::jc_offset           (aCPU, pc, 0x40,0x17,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0a45(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0a45;
	clk += Opcodes::cjne_rx_imm_offset  (aCPU, pc, 0xbe,0x03,0x03);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0a48(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0a48;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x0a,0x57);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0a4b(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0a4b;
	clk += Opcodes::mov_rx_mem          (aCPU, pc, 0xa8,0x44,0x00);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x43,0x00);
	clk += Opcodes::anl_a_rx            (aCPU, pc, 0x58,0x00,0x00);
	clk += Opcodes::jz_offset           (aCPU, pc, 0x60,0x0a,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0a52(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0a52;
	clk += Opcodes::mov_a_imm           (aCPU, pc, 0x74,0x08,0x00);
	clk += Opcodes::add_a_rx            (aCPU, pc, 0x28,0x00,0x00);
	clk += Opcodes::jc_offset           (aCPU, pc, 0x40,0x05,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0a57(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0a57;
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xed,0x00,0x00);
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0xf8,0x00);
	clk += Opcodes::jc_offset           (aCPU, pc, 0x40,0x0a,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0a5c(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0a5c;
	clk += Opcodes::cjne_rx_imm_offset  (aCPU, pc, 0xbd,0x00,0x04);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0a5f(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0a5f;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x92,0x00);
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0a63(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0a63;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x09,0x45);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0a66(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0a66;
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xf8,0x00,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7d,0x01,0x00);
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x2a,0xa9);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0a6c(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0a6c;
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xe8,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfd,0x00,0x00);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x32,0x00);
	clk += Opcodes::add_a_mem           (aCPU, pc, 0x25,0x31,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfc,0x00,0x00);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x35,0x00);
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0x08,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x35,0x00);
	clk += Opcodes::cjne_rx_imm_offset  (aCPU, pc, 0xbe,0x01,0x03);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0a7c(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0a7c;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x0a,0x9d);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0a7f(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0a7f;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x3a,0x00);
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0x08,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x3a,0x00);
	clk += Opcodes::cjne_rx_imm_offset  (aCPU, pc, 0xbe,0x02,0x03);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0a88(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0a88;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x0a,0x9d);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0a8b(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0a8b;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x3f,0x00);
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0x08,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x3f,0x00);
	clk += Opcodes::cjne_rx_imm_offset  (aCPU, pc, 0xbe,0x03,0x03);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0a94(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0a94;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x0a,0x9d);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0a97(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0a97;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x44,0x00);
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0x08,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x44,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0a9d(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0a9d;
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xed,0x00,0x00);
	clk += Opcodes::jz_offset           (aCPU, pc, 0x60,0xbf,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0aa0(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0aa0;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x0a,0x15);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0aa3(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0aa3;
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0x28,0x82);
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0x29,0x83);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x25,0x00);
	clk += Opcodes::add_a_mem           (aCPU, pc, 0x25,0x27,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfb,0x00,0x00);
	clk += Opcodes::mov_rx_mem          (aCPU, pc, 0xa9,0x26,0x00);
	clk += Opcodes::mov_a_imm           (aCPU, pc, 0x74,0x01,0x00);
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0x2c,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0ab5(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0ab5;
	clk += Opcodes::jc_offset           (aCPU, pc, 0x40,0x03,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0ab7(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0ab7;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x0a,0xc1);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0aba(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0aba;
	clk += Opcodes::mov_rx_mem          (aCPU, pc, 0xae,0x2c,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7d,0x80,0x00);
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x06,0x82);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0ac1(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0ac1;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x07,0xcb);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0ac4(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0ac4;
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0x28,0x82);
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0x29,0x83);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x27,0x00);
	clk += Opcodes::add_a_mem           (aCPU, pc, 0x25,0x25,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfb,0x00,0x00);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x32,0x00);
	clk += Opcodes::add_a_mem           (aCPU, pc, 0x25,0x30,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfc,0x00,0x00);
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0xe9,0xf0);
	clk += Opcodes::mov_rx_mem          (aCPU, pc, 0xa9,0x26,0x00);
	clk += Opcodes::mov_rx_mem          (aCPU, pc, 0xae,0x2c,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7d,0x80,0x00);
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x09,0x3d);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0ae0(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0ae0;
	clk += Opcodes::clr_bitaddr         (aCPU, pc, 0xc2,0xb9,0x00);
	clk += Opcodes::mov_dptr_imm        (aCPU, pc, 0x90,0x02,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x78,0x34,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x79,0x0e,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0ae9(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0ae9;
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_indir_rx_a      (aCPU, pc, 0xf6,0x00,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::inc_rx              (aCPU, pc, 0x08,0x00,0x00);
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xd9,0xfa,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0aef(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0aef;
	clk += Opcodes::setb_bitaddr        (aCPU, pc, 0xd2,0xb9,0x00);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x34,0x00);
	clk += Opcodes::clr_c               (aCPU, pc, 0xc3,0x00,0x00);
	clk += Opcodes::subb_a_mem          (aCPU, pc, 0x95,0x38,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfa,0x00,0x00);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x35,0x00);
	clk += Opcodes::subb_a_mem          (aCPU, pc, 0x95,0x39,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfb,0x00,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8a,0x34,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8b,0x35,0x00);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x36,0x00);
	clk += Opcodes::clr_c               (aCPU, pc, 0xc3,0x00,0x00);
	clk += Opcodes::subb_a_mem          (aCPU, pc, 0x95,0x3a,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfa,0x00,0x00);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x37,0x00);
	clk += Opcodes::subb_a_mem          (aCPU, pc, 0x95,0x3b,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfb,0x00,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8a,0x36,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8b,0x37,0x00);
	clk += Opcodes::mov_dptr_imm        (aCPU, pc, 0x90,0x03,0xfd);
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfa,0x00,0x00);
	clk += Opcodes::push_mem            (aCPU, pc, 0xc0,0x02,0x00);
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x0f,0x26);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0b19(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0b19;
	clk += Opcodes::pop_mem             (aCPU, pc, 0xd0,0x02,0x00);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x16,0x00);
	clk += Opcodes::clr_c               (aCPU, pc, 0xc3,0x00,0x00);
	clk += Opcodes::rlc_a               (aCPU, pc, 0x33,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x82,0x00);
	clk += Opcodes::clr_a               (aCPU, pc, 0xe4,0x00,0x00);
	clk += Opcodes::rlc_a               (aCPU, pc, 0x33,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x83,0x00);
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x80,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x3d);
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x80,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x3b);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0b32(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0b32;
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0x34,0x10);
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0x35,0x11);
	clk += Opcodes::mov_rx_mem          (aCPU, pc, 0xab,0x36,0x00);
	clk += Opcodes::mov_rx_mem          (aCPU, pc, 0xac,0x37,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8b,0x12,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8c,0x13,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x17,0x80);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xd0,0x10);
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xe8,0x00,0x00);
	clk += Opcodes::add_a_mem           (aCPU, pc, 0x25,0x38,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xf8,0x00,0x00);
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xe9,0x00,0x00);
	clk += Opcodes::addc_a_mem          (aCPU, pc, 0x35,0x39,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xf9,0x00,0x00);
	clk += Opcodes::rlc_a               (aCPU, pc, 0x33,0x00,0x00);
	clk += Opcodes::jc_offset           (aCPU, pc, 0x40,0x48,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0b51(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0b51;
	clk += Opcodes::swap_a              (aCPU, pc, 0xc4,0x00,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0x0f,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfc,0x00,0x00);
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xea,0x00,0x00);
	clk += Opcodes::add_a_mem           (aCPU, pc, 0x25,0x3a,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfa,0x00,0x00);
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xeb,0x00,0x00);
	clk += Opcodes::addc_a_mem          (aCPU, pc, 0x35,0x3b,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfb,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0b5d(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0b5d;
	clk += Opcodes::rlc_a               (aCPU, pc, 0x33,0x00,0x00);
	clk += Opcodes::jc_offset           (aCPU, pc, 0x40,0x3c,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0b60(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0b60;
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0xf0,0x00);
	clk += Opcodes::orl_a_rx            (aCPU, pc, 0x4c,0x00,0x00);
	clk += Opcodes::xrl_a_rx            (aCPU, pc, 0x6e,0x00,0x00);
	clk += Opcodes::jz_offset           (aCPU, pc, 0x60,0x17,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0b66(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0b66;
	clk += Opcodes::xrl_a_rx            (aCPU, pc, 0x6e,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfe,0x00,0x00);
	clk += Opcodes::clr_c               (aCPU, pc, 0xc3,0x00,0x00);
	clk += Opcodes::rlc_a               (aCPU, pc, 0x33,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x82,0x00);
	clk += Opcodes::clr_a               (aCPU, pc, 0xe4,0x00,0x00);
	clk += Opcodes::rlc_a               (aCPU, pc, 0x33,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x83,0x00);
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x80,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x3d);
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x80,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x3b);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0b7d(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0b7d;
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xeb,0x00,0x00);
	clk += Opcodes::swap_a              (aCPU, pc, 0xc4,0x00,0x00);
	clk += Opcodes::rl_a                (aCPU, pc, 0x23,0x00,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0xe0,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfd,0x00,0x00);
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xe9,0x00,0x00);
	clk += Opcodes::rl_a                (aCPU, pc, 0x23,0x00,0x00);
	clk += Opcodes::rl_a                (aCPU, pc, 0x23,0x00,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0x1c,0x00);
	clk += Opcodes::orl_a_rx            (aCPU, pc, 0x4d,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfd,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xdf,0x09,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0b96(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0b96;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x0c,0x51);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0b99(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0b99;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x0c,0x0b);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0b9c(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0b9c;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x0c,0x13);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0b9f(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0b9f;
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xe8,0x00,0x00);
	clk += Opcodes::add_a_mem           (aCPU, pc, 0x25,0x38,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xf8,0x00,0x00);
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xe9,0x00,0x00);
	clk += Opcodes::addc_a_mem          (aCPU, pc, 0x35,0x39,0x00);
	clk += Opcodes::xrl_a_rx            (aCPU, pc, 0x69,0x00,0x00);
	clk += Opcodes::jz_offset           (aCPU, pc, 0x60,0x4c,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0ba9(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0ba9;
	clk += Opcodes::xrl_a_rx            (aCPU, pc, 0x69,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xf9,0x00,0x00);
	clk += Opcodes::rlc_a               (aCPU, pc, 0x33,0x00,0x00);
	clk += Opcodes::jc_offset           (aCPU, pc, 0x40,0x5d,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0bae(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0bae;
	clk += Opcodes::swap_a              (aCPU, pc, 0xc4,0x00,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0x0f,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfc,0x00,0x00);
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xea,0x00,0x00);
	clk += Opcodes::add_a_mem           (aCPU, pc, 0x25,0x3a,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfa,0x00,0x00);
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xeb,0x00,0x00);
	clk += Opcodes::addc_a_mem          (aCPU, pc, 0x35,0x3b,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfb,0x00,0x00);
	clk += Opcodes::rlc_a               (aCPU, pc, 0x33,0x00,0x00);
	clk += Opcodes::jc_offset           (aCPU, pc, 0x40,0x56,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0bbd(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0bbd;
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0xf0,0x00);
	clk += Opcodes::orl_a_rx            (aCPU, pc, 0x4c,0x00,0x00);
	clk += Opcodes::xrl_a_rx            (aCPU, pc, 0x6e,0x00,0x00);
	clk += Opcodes::jz_offset           (aCPU, pc, 0x60,0x17,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0bc3(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0bc3;
	clk += Opcodes::xrl_a_rx            (aCPU, pc, 0x6e,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfe,0x00,0x00);
	clk += Opcodes::clr_c               (aCPU, pc, 0xc3,0x00,0x00);
	clk += Opcodes::rlc_a               (aCPU, pc, 0x33,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x82,0x00);
	clk += Opcodes::clr_a               (aCPU, pc, 0xe4,0x00,0x00);
	clk += Opcodes::rlc_a               (aCPU, pc, 0x33,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x83,0x00);
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x80,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x3d);
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x80,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x3b);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0bda(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0bda;
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xeb,0x00,0x00);
	clk += Opcodes::swap_a              (aCPU, pc, 0xc4,0x00,0x00);
	clk += Opcodes::rl_a                (aCPU, pc, 0x23,0x00,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0xe0,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfd,0x00,0x00);
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xe9,0x00,0x00);
	clk += Opcodes::rl_a                (aCPU, pc, 0x23,0x00,0x00);
	clk += Opcodes::rl_a                (aCPU, pc, 0x23,0x00,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0x1c,0x00);
	clk += Opcodes::orl_a_rx            (aCPU, pc, 0x4d,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfd,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xdf,0xac,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0bf3(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0bf3;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x5c,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0bf5(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0bf5;
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xea,0x00,0x00);
	clk += Opcodes::add_a_mem           (aCPU, pc, 0x25,0x3a,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfa,0x00,0x00);
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xeb,0x00,0x00);
	clk += Opcodes::addc_a_mem          (aCPU, pc, 0x35,0x3b,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfb,0x00,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8d,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xdf,0x96,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0c09(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0c09;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x46,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0c0b(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0c0b;
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xea,0x00,0x00);
	clk += Opcodes::add_a_mem           (aCPU, pc, 0x25,0x3a,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfa,0x00,0x00);
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xeb,0x00,0x00);
	clk += Opcodes::addc_a_mem          (aCPU, pc, 0x35,0x3b,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfb,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0c13(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0c13;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x79);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x95,0x00);
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x24,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0c1b(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0c1b;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x95,0xff);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x39);
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xe9,0x00,0x00);
	clk += Opcodes::rlc_a               (aCPU, pc, 0x33,0x00,0x00);
	clk += Opcodes::swap_a              (aCPU, pc, 0xc4,0x00,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0x0f,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfc,0x00,0x00);
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xeb,0x00,0x00);
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x0b,0x5d);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0c2b(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0c2b;
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xe8,0x00,0x00);
	clk += Opcodes::add_a_mem           (aCPU, pc, 0x25,0x38,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xf8,0x00,0x00);
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xe9,0x00,0x00);
	clk += Opcodes::addc_a_mem          (aCPU, pc, 0x35,0x39,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xf9,0x00,0x00);
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xea,0x00,0x00);
	clk += Opcodes::add_a_mem           (aCPU, pc, 0x25,0x3a,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfa,0x00,0x00);
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xeb,0x00,0x00);
	clk += Opcodes::addc_a_mem          (aCPU, pc, 0x35,0x3b,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfb,0x00,0x00);
	clk += Opcodes::orl_a_rx            (aCPU, pc, 0x49,0x00,0x00);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xe7,0xdc);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0c3f(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0c3f;
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0x41,0xa0);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0x40,0xa0);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xdf,0xdc,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0c4f(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0c4f;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0c51(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0c51;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x95,0xff);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xd0,0x00);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x3c,0x00);
	clk += Opcodes::add_a_mem           (aCPU, pc, 0x25,0x34,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfd,0x00,0x00);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x3d,0x00);
	clk += Opcodes::addc_a_mem          (aCPU, pc, 0x35,0x35,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfe,0x00,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8d,0x34,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8e,0x35,0x00);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x3e,0x00);
	clk += Opcodes::add_a_rx            (aCPU, pc, 0x2b,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfb,0x00,0x00);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x3f,0x00);
	clk += Opcodes::addc_a_rx           (aCPU, pc, 0x3c,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfc,0x00,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8b,0x36,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8c,0x37,0x00);
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xda,0x02,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0c73(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0c73;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x03,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0c75(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0c75;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x0b,0x32);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0c78(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0c78;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x0f,0xa7);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0c7b(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0c7b;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x85,0x03);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7c,0x10,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0c80(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0c80;
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfd,0x00,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x92,0x01);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0x0f,0x00);
	clk += Opcodes::rl_a                (aCPU, pc, 0x23,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x84,0x00);
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xf8,0x00,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0xa0,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x88,0xa0,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0xa0,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x88,0xa0,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0xa0,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x88,0xa0,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0xa0,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x88,0xa0,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xed,0x00,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0xf0,0x00);
	clk += Opcodes::swap_a              (aCPU, pc, 0xc4,0x00,0x00);
	clk += Opcodes::rl_a                (aCPU, pc, 0x23,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x84,0x00);
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xf8,0x00,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0xa0,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x88,0xa0,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0xa0,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x88,0xa0,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0xa0,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x88,0xa0,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0xa0,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x88,0xa0,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x92,0x00);
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xdc,0x81,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0cff(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0cff;
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0d00(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0d00;
	clk += Opcodes::mov_dptr_imm        (aCPU, pc, 0x90,0x03,0xfd);
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfa,0x00,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7b,0x00,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7c,0x00,0x00);
	clk += Opcodes::push_mem            (aCPU, pc, 0xc0,0x02,0x00);
	clk += Opcodes::push_mem            (aCPU, pc, 0xc0,0x03,0x00);
	clk += Opcodes::push_mem            (aCPU, pc, 0xc0,0x04,0x00);
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x0f,0x26);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0d12(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0d12;
	clk += Opcodes::pop_mem             (aCPU, pc, 0xd0,0x04,0x00);
	clk += Opcodes::pop_mem             (aCPU, pc, 0xd0,0x03,0x00);
	clk += Opcodes::pop_mem             (aCPU, pc, 0xd0,0x02,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x95,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0d1b(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0d1b;
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8b,0x82,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8c,0x83,0x00);
	clk += Opcodes::push_mem            (aCPU, pc, 0xc0,0x02,0x00);
	clk += Opcodes::push_mem            (aCPU, pc, 0xc0,0x03,0x00);
	clk += Opcodes::push_mem            (aCPU, pc, 0xc0,0x04,0x00);
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x0c,0x7b);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0d28(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0d28;
	clk += Opcodes::pop_mem             (aCPU, pc, 0xd0,0x04,0x00);
	clk += Opcodes::pop_mem             (aCPU, pc, 0xd0,0x03,0x00);
	clk += Opcodes::pop_mem             (aCPU, pc, 0xd0,0x02,0x00);
	clk += Opcodes::dec_rx              (aCPU, pc, 0x1a,0x00,0x00);
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xea,0x00,0x00);
	clk += Opcodes::jz_offset           (aCPU, pc, 0x60,0x50,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0d32(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0d32;
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8b,0x82,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8c,0x83,0x00);
	clk += Opcodes::push_mem            (aCPU, pc, 0xc0,0x02,0x00);
	clk += Opcodes::push_mem            (aCPU, pc, 0xc0,0x03,0x00);
	clk += Opcodes::push_mem            (aCPU, pc, 0xc0,0x04,0x00);
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x0c,0x7b);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0d3f(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0d3f;
	clk += Opcodes::pop_mem             (aCPU, pc, 0xd0,0x04,0x00);
	clk += Opcodes::pop_mem             (aCPU, pc, 0xd0,0x03,0x00);
	clk += Opcodes::pop_mem             (aCPU, pc, 0xd0,0x02,0x00);
	clk += Opcodes::dec_rx              (aCPU, pc, 0x1a,0x00,0x00);
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xea,0x00,0x00);
	clk += Opcodes::jz_offset           (aCPU, pc, 0x60,0x39,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0d49(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0d49;
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8b,0x82,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8c,0x83,0x00);
	clk += Opcodes::push_mem            (aCPU, pc, 0xc0,0x02,0x00);
	clk += Opcodes::push_mem            (aCPU, pc, 0xc0,0x03,0x00);
	clk += Opcodes::push_mem            (aCPU, pc, 0xc0,0x04,0x00);
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x0c,0x7b);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0d56(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0d56;
	clk += Opcodes::pop_mem             (aCPU, pc, 0xd0,0x04,0x00);
	clk += Opcodes::pop_mem             (aCPU, pc, 0xd0,0x03,0x00);
	clk += Opcodes::pop_mem             (aCPU, pc, 0xd0,0x02,0x00);
	clk += Opcodes::dec_rx              (aCPU, pc, 0x1a,0x00,0x00);
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xea,0x00,0x00);
	clk += Opcodes::jz_offset           (aCPU, pc, 0x60,0x22,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0d60(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0d60;
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8b,0x82,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8c,0x83,0x00);
	clk += Opcodes::push_mem            (aCPU, pc, 0xc0,0x02,0x00);
	clk += Opcodes::push_mem            (aCPU, pc, 0xc0,0x03,0x00);
	clk += Opcodes::push_mem            (aCPU, pc, 0xc0,0x04,0x00);
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x0c,0x7b);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0d6d(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0d6d;
	clk += Opcodes::pop_mem             (aCPU, pc, 0xd0,0x04,0x00);
	clk += Opcodes::pop_mem             (aCPU, pc, 0xd0,0x03,0x00);
	clk += Opcodes::pop_mem             (aCPU, pc, 0xd0,0x02,0x00);
	clk += Opcodes::mov_a_imm           (aCPU, pc, 0x74,0x10,0x00);
	clk += Opcodes::add_a_rx            (aCPU, pc, 0x2b,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfb,0x00,0x00);
	clk += Opcodes::clr_a               (aCPU, pc, 0xe4,0x00,0x00);
	clk += Opcodes::addc_a_rx           (aCPU, pc, 0x3c,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfc,0x00,0x00);
	clk += Opcodes::anl_mem_imm         (aCPU, pc, 0x53,0x03,0xf0);
	clk += Opcodes::anl_mem_imm         (aCPU, pc, 0x53,0x04,0x01);
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xda,0x99,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0d82(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0d82;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x95,0xff);
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x0f,0xa7);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0d88(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0d88;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x92,0x01);
	clk += Opcodes::mov_dptr_imm        (aCPU, pc, 0x90,0x03,0x00);
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfc,0x00,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfd,0x00,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfe,0x00,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xff,0x00,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x92,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7a,0x08,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0d9e(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0d9e;
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7b,0x08,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0da2(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0da2;
	clk += Opcodes::rrc_a               (aCPU, pc, 0x13,0x00,0x00);
	clk += Opcodes::jc_offset           (aCPU, pc, 0x40,0x1e,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0da5(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0da5;
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8d,0xa0,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8c,0xa0,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8d,0xa0,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8c,0xa0,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xdb,0xe3,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0dbf(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0dbf;
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xda,0xdd,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0dc1(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0dc1;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x1c,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0dc3(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0dc3;
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8f,0xa0,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8e,0xa0,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8f,0xa0,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8e,0xa0,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xdb,0xc5,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0ddd(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0ddd;
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xda,0xbf,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0ddf(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0ddf;
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0de0(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0de0;
	clk += Opcodes::mov_dptr_imm        (aCPU, pc, 0x90,0x03,0xfd);
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfa,0x00,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7b,0x00,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7c,0x00,0x00);
	clk += Opcodes::push_mem            (aCPU, pc, 0xc0,0x02,0x00);
	clk += Opcodes::push_mem            (aCPU, pc, 0xc0,0x03,0x00);
	clk += Opcodes::push_mem            (aCPU, pc, 0xc0,0x04,0x00);
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x0f,0x26);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0df2(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0df2;
	clk += Opcodes::pop_mem             (aCPU, pc, 0xd0,0x04,0x00);
	clk += Opcodes::pop_mem             (aCPU, pc, 0xd0,0x03,0x00);
	clk += Opcodes::pop_mem             (aCPU, pc, 0xd0,0x02,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x95,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0dfb(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0dfb;
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8b,0x82,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8c,0x83,0x00);
	clk += Opcodes::push_mem            (aCPU, pc, 0xc0,0x02,0x00);
	clk += Opcodes::push_mem            (aCPU, pc, 0xc0,0x03,0x00);
	clk += Opcodes::push_mem            (aCPU, pc, 0xc0,0x04,0x00);
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x0d,0x88);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0e08(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0e08;
	clk += Opcodes::pop_mem             (aCPU, pc, 0xd0,0x04,0x00);
	clk += Opcodes::pop_mem             (aCPU, pc, 0xd0,0x03,0x00);
	clk += Opcodes::pop_mem             (aCPU, pc, 0xd0,0x02,0x00);
	clk += Opcodes::dec_rx              (aCPU, pc, 0x1a,0x00,0x00);
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xea,0x00,0x00);
	clk += Opcodes::jz_offset           (aCPU, pc, 0x60,0x22,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0e12(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0e12;
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8b,0x82,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8c,0x83,0x00);
	clk += Opcodes::push_mem            (aCPU, pc, 0xc0,0x02,0x00);
	clk += Opcodes::push_mem            (aCPU, pc, 0xc0,0x03,0x00);
	clk += Opcodes::push_mem            (aCPU, pc, 0xc0,0x04,0x00);
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x0d,0x88);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0e1f(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0e1f;
	clk += Opcodes::pop_mem             (aCPU, pc, 0xd0,0x04,0x00);
	clk += Opcodes::pop_mem             (aCPU, pc, 0xd0,0x03,0x00);
	clk += Opcodes::pop_mem             (aCPU, pc, 0xd0,0x02,0x00);
	clk += Opcodes::mov_a_imm           (aCPU, pc, 0x74,0x08,0x00);
	clk += Opcodes::add_a_rx            (aCPU, pc, 0x2b,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfb,0x00,0x00);
	clk += Opcodes::clr_a               (aCPU, pc, 0xe4,0x00,0x00);
	clk += Opcodes::addc_a_rx           (aCPU, pc, 0x3c,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfc,0x00,0x00);
	clk += Opcodes::anl_mem_imm         (aCPU, pc, 0x53,0x03,0xf8);
	clk += Opcodes::anl_mem_imm         (aCPU, pc, 0x53,0x04,0x01);
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xda,0xc7,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0e34(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0e34;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x95,0xff);
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x0f,0xa7);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0e3a(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0e3a;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x92,0x01);
	clk += Opcodes::mov_dptr_imm        (aCPU, pc, 0x90,0x03,0x00);
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfc,0x00,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfd,0x00,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfe,0x00,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xff,0x00,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x92,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7a,0x10,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0e50(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0e50;
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7b,0x08,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0e54(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0e54;
	clk += Opcodes::rrc_a               (aCPU, pc, 0x13,0x00,0x00);
	clk += Opcodes::jc_offset           (aCPU, pc, 0x40,0x12,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0e57(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0e57;
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8d,0xa0,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8c,0xa0,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xdb,0xef,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0e65(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0e65;
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xda,0xe9,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0e67(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0e67;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x10,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0e69(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0e69;
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8f,0xa0,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8e,0xa0,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xdb,0xdd,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0e77(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0e77;
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xda,0xd7,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0e79(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0e79;
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0e7a(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0e7a;
	clk += Opcodes::mov_dptr_imm        (aCPU, pc, 0x90,0x03,0xfd);
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfa,0x00,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7b,0x00,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7c,0x00,0x00);
	clk += Opcodes::push_mem            (aCPU, pc, 0xc0,0x02,0x00);
	clk += Opcodes::push_mem            (aCPU, pc, 0xc0,0x03,0x00);
	clk += Opcodes::push_mem            (aCPU, pc, 0xc0,0x04,0x00);
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x0f,0x26);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0e8c(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0e8c;
	clk += Opcodes::pop_mem             (aCPU, pc, 0xd0,0x04,0x00);
	clk += Opcodes::pop_mem             (aCPU, pc, 0xd0,0x03,0x00);
	clk += Opcodes::pop_mem             (aCPU, pc, 0xd0,0x02,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x95,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0e95(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0e95;
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8b,0x82,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8c,0x83,0x00);
	clk += Opcodes::push_mem            (aCPU, pc, 0xc0,0x02,0x00);
	clk += Opcodes::push_mem            (aCPU, pc, 0xc0,0x03,0x00);
	clk += Opcodes::push_mem            (aCPU, pc, 0xc0,0x04,0x00);
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x0e,0x3a);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0ea2(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0ea2;
	clk += Opcodes::pop_mem             (aCPU, pc, 0xd0,0x04,0x00);
	clk += Opcodes::pop_mem             (aCPU, pc, 0xd0,0x03,0x00);
	clk += Opcodes::pop_mem             (aCPU, pc, 0xd0,0x02,0x00);
	clk += Opcodes::mov_a_imm           (aCPU, pc, 0x74,0x10,0x00);
	clk += Opcodes::add_a_rx            (aCPU, pc, 0x2b,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfb,0x00,0x00);
	clk += Opcodes::clr_a               (aCPU, pc, 0xe4,0x00,0x00);
	clk += Opcodes::addc_a_rx           (aCPU, pc, 0x3c,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfc,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfd,0x00,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7e,0x00,0x00);
	clk += Opcodes::cjne_rx_imm_offset  (aCPU, pc, 0xbd,0x03,0x07);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0eb5(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0eb5;
	clk += Opcodes::cjne_rx_imm_offset  (aCPU, pc, 0xbe,0x00,0x04);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0eb8(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0eb8;
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7b,0x00,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7c,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0ebc(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0ebc;
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xda,0xd7,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0ebe(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0ebe;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x95,0xff);
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x0f,0xa7);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0ec4(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0ec4;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x0f,0x26);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0ec7(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0ec7;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x95,0x00);
	clk += Opcodes::mov_dptr_imm        (aCPU, pc, 0x90,0x03,0xfd);
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xf9,0x00,0x00);
	clk += Opcodes::mov_dptr_imm        (aCPU, pc, 0x90,0x03,0x00);
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xf8,0x00,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0ed6(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0ed6;
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7a,0x80,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0ed8(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0ed8;
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0xa0,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x88,0xa0,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xda,0xf2,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0ee6(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0ee6;
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xd9,0xee,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0ee8(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0ee8;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x95,0xff);
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x0f,0xa7);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0eee(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0eee;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x95,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0ef1(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0ef1;
	clk += Opcodes::clr_a               (aCPU, pc, 0xe4,0x00,0x00);
	clk += Opcodes::movc_a_indir_a_dptr (aCPU, pc, 0x93,0x00,0x00);
	clk += Opcodes::jz_offset           (aCPU, pc, 0x60,0x17,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0ef5(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0ef5;
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::jb_bitaddr_offset   (aCPU, pc, 0x20,0xe7,0x17);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0ef9(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0ef9;
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xf8,0x00,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x78);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0efd(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0efd;
	clk += Opcodes::clr_a               (aCPU, pc, 0xe4,0x00,0x00);
	clk += Opcodes::movc_a_indir_a_dptr (aCPU, pc, 0x93,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0xa0,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x21,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0f05(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0f05;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x79);
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xd8,0xf3,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0f0a(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0f0a;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0xe5,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0f0c(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0f0c;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x95,0xff);
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0f10(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0f10;
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0x82,0x00);
	clk += Opcodes::add_a_mem           (aCPU, pc, 0x25,0x55,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xf8,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0f15(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0f15;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x55,0x00);
	clk += Opcodes::xrl_a_rx            (aCPU, pc, 0x68,0x00,0x00);
	clk += Opcodes::jnz_offset          (aCPU, pc, 0x70,0xfb,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0f1a(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0f1a;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0xd5,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0f1c(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0f1c;
	clk += Opcodes::jbc_bitaddr_offset  (aCPU, pc, 0x10,0x07,0x01);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0f1f(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0f1f;
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0f20(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0f20;
	clk += Opcodes::mov_dptr_imm        (aCPU, pc, 0x90,0x1e,0x62);
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x0e,0xee);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0f26(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0f26;
	clk += Opcodes::mov_dptr_imm        (aCPU, pc, 0x90,0x03,0xff);
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfa,0x00,0x00);
	clk += Opcodes::mov_dptr_imm        (aCPU, pc, 0x90,0x03,0xfe);
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_dptr_imm        (aCPU, pc, 0x90,0x03,0xfc);
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfb,0x00,0x00);
	clk += Opcodes::jb_bitaddr_offset   (aCPU, pc, 0x20,0x07,0x0b);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0f37(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0f37;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x79);
	clk += Opcodes::setb_bitaddr        (aCPU, pc, 0xd2,0x07,0x00);
	clk += Opcodes::mov_dptr_imm        (aCPU, pc, 0x90,0x1e,0x05);
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x0e,0xee);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0f42(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0f42;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x95,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x78);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xa0,0x36);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x79);
	clk += Opcodes::mov_a_imm           (aCPU, pc, 0x74,0xe0,0x00);
	clk += Opcodes::anl_a_rx            (aCPU, pc, 0x5a,0x00,0x00);
	clk += Opcodes::xrl_a_imm           (aCPU, pc, 0x64,0x08,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0xa0,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x78);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xa0,0x2b);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x79);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xa0,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8b,0xa0,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xa0,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xa0,0x7f);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x78);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xa0,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x80,0x01);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xa0,0x2c);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x79);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x95,0xff);
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xea,0x00,0x00);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xe2,0x03);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0fa3(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0fa3;
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xa0,0xfd);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0fa6(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0fa6;
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0fa7(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0fa7;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x79);
	clk += Opcodes::mov_dptr_imm        (aCPU, pc, 0x90,0x1e,0x69);
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x0e,0xee);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0fb0(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0fb0;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x48,0x00);
	clk += Opcodes::orl_mem_imm         (aCPU, pc, 0x43,0x52,0x01);
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0fb6(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0fb6;
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xeb,0x00,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0x03,0x00);
	clk += Opcodes::jz_offset           (aCPU, pc, 0x60,0x36,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0fbb(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0fbb;
	clk += Opcodes::dec_a               (aCPU, pc, 0x14,0x00,0x00);
	clk += Opcodes::jz_offset           (aCPU, pc, 0x60,0x23,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0fbe(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0fbe;
	clk += Opcodes::dec_a               (aCPU, pc, 0x14,0x00,0x00);
	clk += Opcodes::jz_offset           (aCPU, pc, 0x60,0x10,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0fc1(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0fc1;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x84,0x00);
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0xda,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x82,0x00);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x85,0x00);
	clk += Opcodes::addc_a_imm          (aCPU, pc, 0x34,0xff,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0x03,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x83,0x00);
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x2e,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0fd1(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0fd1;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x84,0x00);
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0xdc,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x82,0x00);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x85,0x00);
	clk += Opcodes::addc_a_imm          (aCPU, pc, 0x34,0xff,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0x03,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x83,0x00);
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x1e,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0fe1(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0fe1;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x84,0x00);
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0xfc,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x82,0x00);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x85,0x00);
	clk += Opcodes::addc_a_imm          (aCPU, pc, 0x34,0xff,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0x03,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x83,0x00);
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x0e,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0ff1(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0ff1;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x84,0x00);
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0xfe,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x82,0x00);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x85,0x00);
	clk += Opcodes::addc_a_imm          (aCPU, pc, 0x34,0xff,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0x03,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x83,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0fff(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0fff;
	clk += Opcodes::inc_rx              (aCPU, pc, 0x09,0x00,0x00);
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xec,0x00,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0x0f,0x00);
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0xf9,0x00);
	clk += Opcodes::clr_c               (aCPU, pc, 0xc3,0x00,0x00);
	clk += Opcodes::rlc_a               (aCPU, pc, 0x33,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfd,0x00,0x00);
	clk += Opcodes::jb_bitaddr_offset   (aCPU, pc, 0x20,0xe7,0x21);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_100b(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x100b;
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::add_a_rx            (aCPU, pc, 0x2d,0x00,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x92,0x01);
	clk += Opcodes::movx_indir_dptr_a   (aCPU, pc, 0xf0,0x00,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x92,0x00);
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::jnc_offset          (aCPU, pc, 0x50,0x02,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_101a(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x101a;
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0x02,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_101c(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x101c;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x92,0x01);
	clk += Opcodes::movx_indir_dptr_a   (aCPU, pc, 0xf0,0x00,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x92,0x00);
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xd9,0xe5,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1026(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1026;
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7d,0x00,0x00);
	clk += Opcodes::mov_dptr_imm        (aCPU, pc, 0x90,0x10,0xea);
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_102c(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x102c;
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::add_a_rx            (aCPU, pc, 0x2d,0x00,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x92,0x01);
	clk += Opcodes::movx_indir_dptr_a   (aCPU, pc, 0xf0,0x00,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x92,0x00);
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::jc_offset           (aCPU, pc, 0x40,0x02,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_103b(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x103b;
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0xfe,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_103d(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x103d;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x92,0x01);
	clk += Opcodes::movx_indir_dptr_a   (aCPU, pc, 0xf0,0x00,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x92,0x00);
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xd9,0xe5,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1047(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1047;
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7d,0x00,0x00);
	clk += Opcodes::mov_dptr_imm        (aCPU, pc, 0x90,0x10,0xea);
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_104d(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x104d;
	clk += Opcodes::push_mem            (aCPU, pc, 0xc0,0xe0,0x00);
	clk += Opcodes::push_mem            (aCPU, pc, 0xc0,0x82,0x00);
	clk += Opcodes::push_mem            (aCPU, pc, 0xc0,0x83,0x00);
	clk += Opcodes::push_mem            (aCPU, pc, 0xc0,0x92,0x00);
	clk += Opcodes::push_mem            (aCPU, pc, 0xc0,0x84,0x00);
	clk += Opcodes::push_mem            (aCPU, pc, 0xc0,0x85,0x00);
	clk += Opcodes::push_mem            (aCPU, pc, 0xc0,0xd0,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xd0,0x08);
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0x53,0x84);
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0x54,0x85);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1064(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1064;
	clk += Opcodes::jb_bitaddr_offset   (aCPU, pc, 0x20,0x08,0x0a);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1067(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1067;
	clk += Opcodes::setb_bitaddr        (aCPU, pc, 0xd2,0x08,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7d,0x00,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x84,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x85,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1071(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1071;
	clk += Opcodes::clr_bitaddr         (aCPU, pc, 0xc2,0xe9,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xe7,0x60);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xe7,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1079(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1079;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0xe6,0x00);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xe2,0xfb);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_107e(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x107e;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0xe7,0x00);
	clk += Opcodes::orl_a_imm           (aCPU, pc, 0x44,0xf1,0x00);
	clk += Opcodes::inc_a               (aCPU, pc, 0x04,0x00,0x00);
	clk += Opcodes::jnz_offset          (aCPU, pc, 0x70,0x0c,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1085(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1085;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0xe6,0x00);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xe2,0xfb);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_108a(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x108a;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0xe7,0x00);
	clk += Opcodes::setb_bitaddr        (aCPU, pc, 0xd2,0xe9,0x00);
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x12,0xc8);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1091(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1091;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0xe6,0x00);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xe2,0xfb);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1096(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1096;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0xe7,0x00);
	clk += Opcodes::setb_bitaddr        (aCPU, pc, 0xd2,0xe9,0x00);
	clk += Opcodes::jz_offset           (aCPU, pc, 0x60,0x06,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_109c(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x109c;
	clk += Opcodes::rl_a                (aCPU, pc, 0x23,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xff,0x00,0x00);
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0xbf,0x00);
	clk += Opcodes::jnc_offset          (aCPU, pc, 0x50,0x11,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_10a2(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x10a2;
	clk += Opcodes::clr_bitaddr         (aCPU, pc, 0xc2,0x08,0x00);
	clk += Opcodes::clr_bitaddr         (aCPU, pc, 0xc2,0xe9,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xe7,0xe2);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_10a9(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x10a9;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0xe6,0x00);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xe2,0xfb);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_10ae(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x10ae;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0xe7,0x00);
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x12,0x5c);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_10b3(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x10b3;
	clk += Opcodes::inc_a               (aCPU, pc, 0x04,0x00,0x00);
	clk += Opcodes::jz_offset           (aCPU, pc, 0x60,0x02,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_10b6(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x10b6;
	clk += Opcodes::clr_bitaddr         (aCPU, pc, 0xc2,0x08,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_10b8(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x10b8;
	clk += Opcodes::clr_bitaddr         (aCPU, pc, 0xc2,0xe9,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xe7,0x61);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xe7,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_10c0(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x10c0;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0xe6,0x00);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xe2,0xfb);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_10c5(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x10c5;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0xe7,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x92,0x00);
	clk += Opcodes::mov_dptr_imm        (aCPU, pc, 0x90,0x10,0xea);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_10cd(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x10cd;
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xef,0x00,0x00);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xe0,0x04);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_10d1(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x10d1;
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xee,0x00,0x00);
	clk += Opcodes::swap_a              (aCPU, pc, 0xc4,0x00,0x00);
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x0a,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_10d5(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x10d5;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0xe6,0x00);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xe2,0xfb);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_10da(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x10da;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0xe7,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xe7,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_10df(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x10df;
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfe,0x00,0x00);
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xed,0x00,0x00);
	clk += Opcodes::jmp_indir_a_dptr    (aCPU, pc, 0x73,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_10e2(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x10e2;
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfc,0x00,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x79,0x00,0x00);
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x0f,0xb6);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_10e8(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x10e8;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x37,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_10ea(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x10ea;
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xee,0x00,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0x0c,0x00);
	clk += Opcodes::jnz_offset          (aCPU, pc, 0x70,0x09,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_10ef(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x10ef;
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8e,0x09,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7d,0x71,0x00);
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xdf,0xd8,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_10f5(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x10f5;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x12,0x55);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_10f8(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x10f8;
	clk += Opcodes::cjne_a_imm_offset   (aCPU, pc, 0xb4,0x04,0x0e);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_10fb(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x10fb;
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8e,0x0b,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7c,0x07,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x79,0x00,0x00);
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x0f,0xb6);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1104(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1104;
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xdf,0xc7,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1106(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1106;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x12,0x55);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1109(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1109;
	clk += Opcodes::cjne_a_imm_offset   (aCPU, pc, 0xb4,0x08,0x09);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_110c(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x110c;
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8e,0x0b,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7d,0x3c,0x00);
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xdf,0xbb,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1112(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1112;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x12,0x55);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1115(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1115;
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xee,0x00,0x00);
	clk += Opcodes::rr_a                (aCPU, pc, 0x03,0x00,0x00);
	clk += Opcodes::rr_a                (aCPU, pc, 0x03,0x00,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0xc0,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfa,0x00,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7b,0x00,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7c,0x07,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7d,0x45,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1121(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1121;
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xdf,0xaa,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1123(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1123;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x12,0x55);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1126(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1126;
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xee,0x00,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0x0f,0x00);
	clk += Opcodes::cjne_a_imm_offset   (aCPU, pc, 0xb4,0x07,0xb6);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_112c(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x112c;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x12,0x13);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_112f(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x112f;
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xee,0x00,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0x0f,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xf9,0x00,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7d,0x4d,0x00);
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0xea,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1137(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1137;
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xee,0x00,0x00);
	clk += Opcodes::swap_a              (aCPU, pc, 0xc4,0x00,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0xf0,0x00);
	clk += Opcodes::orl_mem_a           (aCPU, pc, 0x42,0x09,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7d,0x57,0x00);
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0xe0,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1141(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1141;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x92,0x01);
	clk += Opcodes::clr_c               (aCPU, pc, 0xc3,0x00,0x00);
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xe9,0x00,0x00);
	clk += Opcodes::rlc_a               (aCPU, pc, 0x33,0x00,0x00);
	clk += Opcodes::movx_indir_dptr_a   (aCPU, pc, 0xf0,0x00,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xee,0x00,0x00);
	clk += Opcodes::rlc_a               (aCPU, pc, 0x33,0x00,0x00);
	clk += Opcodes::rlc_a               (aCPU, pc, 0x33,0x00,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0x3e,0x00);
	clk += Opcodes::orl_a_rx            (aCPU, pc, 0x4a,0x00,0x00);
	clk += Opcodes::movx_indir_dptr_a   (aCPU, pc, 0xf0,0x00,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::anl_mem_imm         (aCPU, pc, 0x53,0x85,0x03);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x92,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7d,0x00,0x00);
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0xc6,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_115b(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x115b;
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xee,0x00,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0x0c,0x00);
	clk += Opcodes::jz_offset           (aCPU, pc, 0x60,0x09,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1160(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1160;
	clk += Opcodes::anl_mem_imm         (aCPU, pc, 0x53,0x09,0x0f);
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x0f,0xb6);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1166(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1166;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x10,0xea);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1169(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1169;
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xe9,0x00,0x00);
	clk += Opcodes::jb_bitaddr_offset   (aCPU, pc, 0x20,0xe1,0x1f);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_116d(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x116d;
	clk += Opcodes::rrc_a               (aCPU, pc, 0x13,0x00,0x00);
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xee,0x00,0x00);
	clk += Opcodes::rlc_a               (aCPU, pc, 0x33,0x00,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0x07,0x00);
	clk += Opcodes::inc_a               (aCPU, pc, 0x04,0x00,0x00);
	clk += Opcodes::rl_a                (aCPU, pc, 0x23,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xf9,0x00,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x92,0x01);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x84,0x00);
	clk += Opcodes::add_a_rx            (aCPU, pc, 0x29,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x84,0x00);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x85,0x00);
	clk += Opcodes::addc_a_imm          (aCPU, pc, 0x34,0x00,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0x03,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x85,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x92,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7d,0x00,0x00);
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x95,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_118c(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x118c;
	clk += Opcodes::jb_bitaddr_offset   (aCPU, pc, 0x20,0xe0,0x0b);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_118f(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x118f;
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xee,0x00,0x00);
	clk += Opcodes::swap_a              (aCPU, pc, 0xc4,0x00,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0x30,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xf9,0x00,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7d,0xae,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1196(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1196;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x89,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1198(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1198;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x6d,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_119a(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x119a;
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xee,0x00,0x00);
	clk += Opcodes::jb_bitaddr_offset   (aCPU, pc, 0x20,0xe1,0x27);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_119e(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x119e;
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xee,0x00,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0x01,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfa,0x00,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7d,0xbc,0x00);
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0xf0,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_11a6(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x11a6;
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xee,0x00,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0x0f,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xf9,0x00,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7d,0xc4,0x00);
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0xe8,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_11ae(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x11ae;
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xee,0x00,0x00);
	clk += Opcodes::swap_a              (aCPU, pc, 0xc4,0x00,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0xf0,0x00);
	clk += Opcodes::orl_a_rx            (aCPU, pc, 0x49,0x00,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x92,0x01);
	clk += Opcodes::clr_c               (aCPU, pc, 0xc3,0x00,0x00);
	clk += Opcodes::rlc_a               (aCPU, pc, 0x33,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x84,0x00);
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xea,0x00,0x00);
	clk += Opcodes::rlc_a               (aCPU, pc, 0x33,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x85,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x92,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7d,0x00,0x00);
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0xd1,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_11c5(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x11c5;
	clk += Opcodes::jb_bitaddr_offset   (aCPU, pc, 0x20,0xe0,0x3b);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_11c8(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x11c8;
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7d,0xe2,0x00);
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0xca,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_11cc(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x11cc;
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xee,0x00,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0x0f,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xf9,0x00,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7d,0xea,0x00);
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0xc2,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_11d4(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x11d4;
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xee,0x00,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0x0f,0x00);
	clk += Opcodes::swap_a              (aCPU, pc, 0xc4,0x00,0x00);
	clk += Opcodes::orl_mem_a           (aCPU, pc, 0x42,0x09,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7d,0xf4,0x00);
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0xb8,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_11de(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x11de;
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xee,0x00,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0x0f,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfa,0x00,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7d,0xfc,0x00);
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0xb0,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_11e6(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x11e6;
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xee,0x00,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0x0f,0x00);
	clk += Opcodes::swap_a              (aCPU, pc, 0xc4,0x00,0x00);
	clk += Opcodes::orl_mem_a           (aCPU, pc, 0x42,0x0a,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x92,0x01);
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xe9,0x00,0x00);
	clk += Opcodes::movx_indir_dptr_a   (aCPU, pc, 0xf0,0x00,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xea,0x00,0x00);
	clk += Opcodes::movx_indir_dptr_a   (aCPU, pc, 0xf0,0x00,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::anl_mem_imm         (aCPU, pc, 0x53,0x85,0x03);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x92,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7b,0x00,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7c,0x07,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7d,0x00,0x00);
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x93,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1203(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1203;
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7d,0x00,0x00);
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x29,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1207(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1207;
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xee,0x00,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0x0f,0x00);
	clk += Opcodes::orl_a_rx            (aCPU, pc, 0x49,0x00,0x00);
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0x04,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xf9,0x00,0x00);
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x0f,0xb6);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1211(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1211;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x83,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1213(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1213;
	clk += Opcodes::anl_mem_imm         (aCPU, pc, 0x53,0x0b,0x03);
	clk += Opcodes::cjne_rx_imm_offset  (aCPU, pc, 0xbb,0x00,0x15);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1219(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1219;
	clk += Opcodes::clr_bitaddr         (aCPU, pc, 0xc2,0x8c,0x00);
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0xe7,0x8a);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xe7,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1221(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1221;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0xe6,0x00);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xe2,0xfb);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1226(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1226;
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0xe7,0x8c);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xe7,0x00);
	clk += Opcodes::setb_bitaddr        (aCPU, pc, 0xd2,0x8c,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_122e(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x122e;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x25,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1230(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1230;
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xef,0x00,0x00);
	clk += Opcodes::dec_a               (aCPU, pc, 0x14,0x00,0x00);
	clk += Opcodes::clr_c               (aCPU, pc, 0xc3,0x00,0x00);
	clk += Opcodes::rrc_a               (aCPU, pc, 0x13,0x00,0x00);
	clk += Opcodes::jz_offset           (aCPU, pc, 0x60,0x1c,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1236(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1236;
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xff,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1237(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1237;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0xe6,0x00);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xe2,0xfb);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_123c(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x123c;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x62,0x00);
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0x77,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xf8,0x00,0x00);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0xe7,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xe7,0x00);
	clk += Opcodes::mov_indir_rx_a      (aCPU, pc, 0xf6,0x00,0x00);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x62,0x00);
	clk += Opcodes::inc_a               (aCPU, pc, 0x04,0x00,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0x3f,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x62,0x00);
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xdf,0xec,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1250(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1250;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x03,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1252(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1252;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x62,0xff);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1255(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1255;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0xe6,0x00);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xe2,0xfb);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_125a(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x125a;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0xe7,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_125c(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x125c;
	clk += Opcodes::setb_bitaddr        (aCPU, pc, 0xd2,0xe9,0x00);
	clk += Opcodes::clr_bitaddr         (aCPU, pc, 0xc2,0xe9,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xe7,0x27);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xe7,0x40);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1266(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1266;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0xe6,0x00);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xe2,0xfb);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_126b(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x126b;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0xe7,0x00);
	clk += Opcodes::orl_a_imm           (aCPU, pc, 0x44,0xf1,0x00);
	clk += Opcodes::inc_a               (aCPU, pc, 0x04,0x00,0x00);
	clk += Opcodes::jz_offset           (aCPU, pc, 0x60,0x0c,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1272(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1272;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0xe6,0x00);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xe2,0xfb);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1277(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1277;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0xe7,0x00);
	clk += Opcodes::setb_bitaddr        (aCPU, pc, 0xd2,0xe9,0x00);
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x10,0x64);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_127e(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x127e;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0xe6,0x00);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xe2,0xfb);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1283(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1283;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0xe7,0x00);
	clk += Opcodes::setb_bitaddr        (aCPU, pc, 0xd2,0xe9,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1287(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1287;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x52,0x00);
	clk += Opcodes::jz_offset           (aCPU, pc, 0x60,0x3d,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_128b(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x128b;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x52,0x00);
	clk += Opcodes::clr_bitaddr         (aCPU, pc, 0xc2,0xe9,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xe7,0xa8);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x78,0x48,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfe,0x00,0x00);
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0xf5,0x00);
	clk += Opcodes::jnc_offset          (aCPU, pc, 0x50,0x02,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_129a(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x129a;
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7e,0x0a,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_129c(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x129c;
	clk += Opcodes::mov_mem_indir_rx    (aCPU, pc, 0x86,0xe7,0x00);
	clk += Opcodes::inc_rx              (aCPU, pc, 0x08,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_129f(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x129f;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0xe6,0x00);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xe2,0xfb);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_12a4(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x12a4;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0xe7,0x00);
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xde,0xf4,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_12a8(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x12a8;
	clk += Opcodes::jnc_offset          (aCPU, pc, 0x50,0x15,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_12aa(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x12aa;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x92,0x00);
	clk += Opcodes::mov_dptr_imm        (aCPU, pc, 0x90,0xfc,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7e,0x06,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_12b2(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x12b2;
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0xe7,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_12b6(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x12b6;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0xe6,0x00);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xe2,0xfb);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_12bb(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x12bb;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0xe7,0x00);
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xde,0xf3,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_12bf(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x12bf;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0xe6,0x00);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xe2,0xfb);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_12c4(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x12c4;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0xe7,0x00);
	clk += Opcodes::setb_bitaddr        (aCPU, pc, 0xd2,0xe9,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_12c8(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x12c8;
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0x84,0x53);
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0x85,0x54);
	clk += Opcodes::pop_mem             (aCPU, pc, 0xd0,0xd0,0x00);
	clk += Opcodes::pop_mem             (aCPU, pc, 0xd0,0x85,0x00);
	clk += Opcodes::pop_mem             (aCPU, pc, 0xd0,0x84,0x00);
	clk += Opcodes::pop_mem             (aCPU, pc, 0xd0,0x92,0x00);
	clk += Opcodes::pop_mem             (aCPU, pc, 0xd0,0x83,0x00);
	clk += Opcodes::pop_mem             (aCPU, pc, 0xd0,0x82,0x00);
	clk += Opcodes::pop_mem             (aCPU, pc, 0xd0,0xe0,0x00);
	clk += Opcodes::reti                (aCPU, pc, 0x32,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_12dd(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x12dd;
	clk += Opcodes::mov_rx_mem          (aCPU, pc, 0xaa,0x82,0x00);
	clk += Opcodes::mov_rx_mem          (aCPU, pc, 0xab,0x83,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_12e1(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x12e1;
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8a,0x82,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8b,0x83,0x00);
	clk += Opcodes::clr_a               (aCPU, pc, 0xe4,0x00,0x00);
	clk += Opcodes::movc_a_indir_a_dptr (aCPU, pc, 0x93,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfc,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfd,0x00,0x00);
	clk += Opcodes::jz_offset           (aCPU, pc, 0x60,0x2b,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_12eb(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x12eb;
	clk += Opcodes::inc_rx              (aCPU, pc, 0x0a,0x00,0x00);
	clk += Opcodes::cjne_rx_imm_offset  (aCPU, pc, 0xba,0x00,0x01);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_12ef(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x12ef;
	clk += Opcodes::inc_rx              (aCPU, pc, 0x0b,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_12f0(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x12f0;
	clk += Opcodes::clr_bitaddr         (aCPU, pc, 0xc2,0xe9,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8d,0x04,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8a,0x05,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8b,0x06,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_12f8(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x12f8;
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8d,0x82,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8e,0x83,0x00);
	clk += Opcodes::clr_a               (aCPU, pc, 0xe4,0x00,0x00);
	clk += Opcodes::movc_a_indir_a_dptr (aCPU, pc, 0x93,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0xe7,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::mov_rx_mem          (aCPU, pc, 0xad,0x82,0x00);
	clk += Opcodes::mov_rx_mem          (aCPU, pc, 0xae,0x83,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1305(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1305;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0xe6,0x00);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xe2,0xfb);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_130a(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x130a;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0xe7,0x00);
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xdc,0xea,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_130e(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x130e;
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8d,0x02,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8e,0x03,0x00);
	clk += Opcodes::setb_bitaddr        (aCPU, pc, 0xd2,0xe9,0x00);
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0xcb,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1316(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1316;
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1317(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1317;
	clk += Opcodes::setb_bitaddr        (aCPU, pc, 0xd2,0xea,0x00);
	clk += Opcodes::mov_dptr_imm        (aCPU, pc, 0x90,0x1e,0x6d);
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x12,0xdd);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_131f(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x131f;
	clk += Opcodes::setb_bitaddr        (aCPU, pc, 0xd2,0xb9,0x00);
	clk += Opcodes::setb_bitaddr        (aCPU, pc, 0xd2,0xe8,0x00);
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1324(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1324;
	clk += Opcodes::clr_bitaddr         (aCPU, pc, 0xc2,0xb9,0x00);
	clk += Opcodes::clr_bitaddr         (aCPU, pc, 0xc2,0xe9,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xe7,0x10);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xe7,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_132e(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x132e;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0xe6,0x00);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xe2,0xfb);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1333(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1333;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0xe7,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1335(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1335;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0xe6,0x00);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xe2,0xfb);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_133a(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x133a;
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0xe7,0x82);
	clk += Opcodes::setb_bitaddr        (aCPU, pc, 0xd2,0xe9,0x00);
	clk += Opcodes::setb_bitaddr        (aCPU, pc, 0xd2,0xb9,0x00);
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1342(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1342;
	clk += Opcodes::push_mem            (aCPU, pc, 0xc0,0xe0,0x00);
	clk += Opcodes::push_mem            (aCPU, pc, 0xc0,0xd0,0x00);
	clk += Opcodes::push_mem            (aCPU, pc, 0xc0,0x82,0x00);
	clk += Opcodes::push_mem            (aCPU, pc, 0xc0,0x83,0x00);
	clk += Opcodes::push_mem            (aCPU, pc, 0xc0,0x92,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x92,0x00);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0xe1,0x00);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xe0,0x71);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1354(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1354;
	clk += Opcodes::jb_bitaddr_offset   (aCPU, pc, 0x20,0xe1,0x66);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1357(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1357;
	clk += Opcodes::mov_dptr_imm        (aCPU, pc, 0x90,0x13,0x5d);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x57,0x00);
	clk += Opcodes::jmp_indir_a_dptr    (aCPU, pc, 0x73,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_135d(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x135d;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xda,0xa8);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1360(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1360;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x57,0x08);
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x60,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1365(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1365;
	clk += Opcodes::orl_mem_imm         (aCPU, pc, 0x43,0xe2,0x10);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xda,0x31);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_136b(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x136b;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x57,0x13);
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x55,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1370(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1370;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x57,0x18);
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x50,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1375(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1375;
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0xda,0x58);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1378(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1378;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x57,0x20);
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x48,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_137d(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x137d;
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0xda,0x59);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1380(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1380;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x57,0x28);
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x40,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1385(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1385;
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0xda,0x5a);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1388(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1388;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x57,0x30);
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x38,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_138d(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x138d;
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0xda,0x5b);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1390(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1390;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x57,0x38);
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x30,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1395(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1395;
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0xda,0x5c);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1398(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1398;
	clk += Opcodes::orl_mem_imm         (aCPU, pc, 0x43,0xe2,0x20);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x57,0x43);
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x25,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_13a0(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x13a0;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0xda,0x00);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x59,0x00);
	clk += Opcodes::xrl_a_mem           (aCPU, pc, 0x65,0x49,0x00);
	clk += Opcodes::jz_offset           (aCPU, pc, 0x60,0x05,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_13a8(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x13a8;
	clk += Opcodes::xrl_mem_a           (aCPU, pc, 0x62,0x49,0x00);
	clk += Opcodes::orl_mem_imm         (aCPU, pc, 0x43,0x52,0x03);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_13ad(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x13ad;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x5b,0x00);
	clk += Opcodes::xrl_a_mem           (aCPU, pc, 0x65,0x4a,0x00);
	clk += Opcodes::jz_offset           (aCPU, pc, 0x60,0x05,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_13b3(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x13b3;
	clk += Opcodes::xrl_mem_a           (aCPU, pc, 0x62,0x4a,0x00);
	clk += Opcodes::orl_mem_imm         (aCPU, pc, 0x43,0x52,0x03);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_13b8(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x13b8;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x57,0x00);
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x08,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_13bd(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x13bd;
	clk += Opcodes::orl_mem_imm         (aCPU, pc, 0x43,0xe2,0x20);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x57,0x00);
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_13c5(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x13c5;
	clk += Opcodes::pop_mem             (aCPU, pc, 0xd0,0x92,0x00);
	clk += Opcodes::pop_mem             (aCPU, pc, 0xd0,0x83,0x00);
	clk += Opcodes::pop_mem             (aCPU, pc, 0xd0,0x82,0x00);
	clk += Opcodes::pop_mem             (aCPU, pc, 0xd0,0xd0,0x00);
	clk += Opcodes::pop_mem             (aCPU, pc, 0xd0,0xe0,0x00);
	clk += Opcodes::reti                (aCPU, pc, 0x32,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_13d0(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x13d0;
	clk += Opcodes::push_mem            (aCPU, pc, 0xc0,0xe0,0x00);
	clk += Opcodes::push_mem            (aCPU, pc, 0xc0,0xd0,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xd0,0x00);
	clk += Opcodes::push_mem            (aCPU, pc, 0xc0,0x00,0x00);
	clk += Opcodes::push_mem            (aCPU, pc, 0xc0,0x01,0x00);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x8c,0x00);
	clk += Opcodes::jnz_offset          (aCPU, pc, 0x70,0x16,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_13df(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x13df;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x8a,0x00);
	clk += Opcodes::addc_a_imm          (aCPU, pc, 0x34,0xc0,0x00);
	clk += Opcodes::jc_offset           (aCPU, pc, 0x40,0x10,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_13e5(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x13e5;
	clk += Opcodes::setb_bitaddr        (aCPU, pc, 0xd2,0x09,0x00);
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0x60,0x5e);
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0x61,0x5f);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x5d,0x12);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xcc,0xc0);
	clk += Opcodes::setb_bitaddr        (aCPU, pc, 0xd2,0xc8,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_13f5(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x13f5;
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x78,0x6f,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_13f7(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x13f7;
	clk += Opcodes::mov_a_indir_rx      (aCPU, pc, 0xe6,0x00,0x00);
	clk += Opcodes::mov_indir_rx_imm    (aCPU, pc, 0x76,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xf9,0x00,0x00);
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xe8,0x00,0x00);
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0x04,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xf8,0x00,0x00);
	clk += Opcodes::mov_a_indir_rx      (aCPU, pc, 0xe6,0x00,0x00);
	clk += Opcodes::mov_indir_rx_mem    (aCPU, pc, 0xa6,0x01,0x00);
	clk += Opcodes::xrl_a_rx            (aCPU, pc, 0x69,0x00,0x00);
	clk += Opcodes::jz_offset           (aCPU, pc, 0x60,0x09,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1405(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1405;
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xe8,0x00,0x00);
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0xfd,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xf8,0x00,0x00);
	clk += Opcodes::cjne_a_imm_offset   (aCPU, pc, 0xb4,0x73,0xeb);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_140c(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x140c;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x1c,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_140e(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x140e;
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xe8,0x00,0x00);
	clk += Opcodes::clr_c               (aCPU, pc, 0xc3,0x00,0x00);
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0x4b,0x00);
	clk += Opcodes::subb_a_imm          (aCPU, pc, 0x94,0x73,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xf8,0x00,0x00);
	clk += Opcodes::mov_a_indir_rx      (aCPU, pc, 0xe6,0x00,0x00);
	clk += Opcodes::xrl_a_rx            (aCPU, pc, 0x69,0x00,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0x9f,0x00);
	clk += Opcodes::jz_offset           (aCPU, pc, 0x60,0x05,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_141b(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x141b;
	clk += Opcodes::xrl_a_indir_rx      (aCPU, pc, 0x66,0x00,0x00);
	clk += Opcodes::mov_indir_rx_a      (aCPU, pc, 0xf6,0x00,0x00);
	clk += Opcodes::orl_mem_imm         (aCPU, pc, 0x43,0x52,0x07);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1420(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1420;
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xe8,0x00,0x00);
	clk += Opcodes::clr_c               (aCPU, pc, 0xc3,0x00,0x00);
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0x6d,0x00);
	clk += Opcodes::subb_a_imm          (aCPU, pc, 0x94,0x48,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xf8,0x00,0x00);
	clk += Opcodes::cjne_a_imm_offset   (aCPU, pc, 0xb4,0x73,0xcd);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_142a(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x142a;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x55,0x00);
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0x01,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x55,0x00);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x56,0x00);
	clk += Opcodes::addc_a_imm          (aCPU, pc, 0x34,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x56,0x00);
	clk += Opcodes::pop_mem             (aCPU, pc, 0xd0,0x01,0x00);
	clk += Opcodes::pop_mem             (aCPU, pc, 0xd0,0x00,0x00);
	clk += Opcodes::pop_mem             (aCPU, pc, 0xd0,0xd0,0x00);
	clk += Opcodes::pop_mem             (aCPU, pc, 0xd0,0xe0,0x00);
	clk += Opcodes::reti                (aCPU, pc, 0x32,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_143f(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x143f;
	clk += Opcodes::anl_mem_imm         (aCPU, pc, 0x53,0x94,0xfc);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xcc,0xbe);
	clk += Opcodes::setb_bitaddr        (aCPU, pc, 0xd2,0xc8,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x5d,0x0f);
	clk += Opcodes::setb_bitaddr        (aCPU, pc, 0xd2,0x0a,0x00);
	clk += Opcodes::reti                (aCPU, pc, 0x32,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_144d(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x144d;
	clk += Opcodes::push_mem            (aCPU, pc, 0xc0,0xe0,0x00);
	clk += Opcodes::push_mem            (aCPU, pc, 0xc0,0xd0,0x00);
	clk += Opcodes::jb_bitaddr_offset   (aCPU, pc, 0x20,0x09,0x21);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1454(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1454;
	clk += Opcodes::anl_mem_imm         (aCPU, pc, 0x53,0x94,0x5c);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x8b,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x8b,0x00);
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0xff,0x00);
	clk += Opcodes::orl_mem_imm         (aCPU, pc, 0x43,0x94,0xa3);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0x0a,0x05);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1464(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1464;
	clk += Opcodes::anl_mem_imm         (aCPU, pc, 0x53,0x94,0xde);
	clk += Opcodes::clr_bitaddr         (aCPU, pc, 0xc2,0x0a,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1469(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1469;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x5f,0x00);
	clk += Opcodes::rlc_a               (aCPU, pc, 0x33,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x5f,0x00);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x5e,0x00);
	clk += Opcodes::rlc_a               (aCPU, pc, 0x33,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x5e,0x00);
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x21,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1475(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1475;
	clk += Opcodes::clr_bitaddr         (aCPU, pc, 0xc2,0x8e,0x00);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x5e,0x00);
	clk += Opcodes::rlc_a               (aCPU, pc, 0x33,0x00,0x00);
	clk += Opcodes::jnc_offset          (aCPU, pc, 0x50,0x06,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_147c(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x147c;
	clk += Opcodes::orl_mem_imm         (aCPU, pc, 0x43,0x90,0xa3);
	clk += Opcodes::anl_mem_imm         (aCPU, pc, 0x53,0x94,0x5c);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1482(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1482;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x5f,0x00);
	clk += Opcodes::clr_c               (aCPU, pc, 0xc3,0x00,0x00);
	clk += Opcodes::rlc_a               (aCPU, pc, 0x33,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x5f,0x00);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x5e,0x00);
	clk += Opcodes::rlc_a               (aCPU, pc, 0x33,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x5e,0x00);
	clk += Opcodes::mov_a_imm           (aCPU, pc, 0x74,0x02,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_148f(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x148f;
	clk += Opcodes::djnz_mem_offset     (aCPU, pc, 0xd5,0xe0,0xfd);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1492(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1492;
	clk += Opcodes::nop                 (aCPU, pc, 0x00,0x00,0x00);
	clk += Opcodes::anl_mem_imm         (aCPU, pc, 0x53,0x90,0x5c);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1496(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1496;
	clk += Opcodes::djnz_mem_offset     (aCPU, pc, 0xd5,0x5d,0x51);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1499(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1499;
	clk += Opcodes::clr_bitaddr         (aCPU, pc, 0xc2,0xc8,0x00);
	clk += Opcodes::orl_mem_imm         (aCPU, pc, 0x43,0x94,0xa3);
	clk += Opcodes::jb_bitaddr_offset   (aCPU, pc, 0x20,0x09,0x22);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_14a1(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x14a1;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x5e,0x00);
	clk += Opcodes::orl_a_imm           (aCPU, pc, 0x44,0xe0,0x00);
	clk += Opcodes::cpl_a               (aCPU, pc, 0xf4,0x00,0x00);
	clk += Opcodes::xrl_a_mem           (aCPU, pc, 0x65,0x5f,0x00);
	clk += Opcodes::jnz_offset          (aCPU, pc, 0x70,0x36,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_14aa(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x14aa;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x5e,0x00);
	clk += Opcodes::swap_a              (aCPU, pc, 0xc4,0x00,0x00);
	clk += Opcodes::rr_a                (aCPU, pc, 0x03,0x00,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0x03,0x00);
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0x6f,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xd0,0x00);
	clk += Opcodes::push_mem            (aCPU, pc, 0xc0,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xf8,0x00,0x00);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x5e,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0x1f,0x00);
	clk += Opcodes::orl_a_imm           (aCPU, pc, 0x44,0x80,0x00);
	clk += Opcodes::mov_indir_rx_a      (aCPU, pc, 0xf6,0x00,0x00);
	clk += Opcodes::pop_mem             (aCPU, pc, 0xd0,0x00,0x00);
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x1d,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_14c3(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x14c3;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x57,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xe2,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_14c9(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x14c9;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xe2,0x01);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_14cc(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x14cc;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xe2,0x07);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_14cf(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x14cf;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xda,0x30);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_14d2(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x14d2;
	clk += Opcodes::jb_bitaddr_offset   (aCPU, pc, 0x20,0x0d,0x0b);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_14d5(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x14d5;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xd2,0x0c);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xd1,0xc0);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xd3,0xbd);
	clk += Opcodes::setb_bitaddr        (aCPU, pc, 0xd2,0xbc,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_14e0(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x14e0;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x8b,0xff);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x8d,0xff);
	clk += Opcodes::clr_bitaddr         (aCPU, pc, 0xc2,0x09,0x00);
	clk += Opcodes::setb_bitaddr        (aCPU, pc, 0xd2,0x8e,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_14ea(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x14ea;
	clk += Opcodes::clr_bitaddr         (aCPU, pc, 0xc2,0xc6,0x00);
	clk += Opcodes::pop_mem             (aCPU, pc, 0xd0,0xd0,0x00);
	clk += Opcodes::pop_mem             (aCPU, pc, 0xd0,0xe0,0x00);
	clk += Opcodes::reti                (aCPU, pc, 0x32,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_14f1(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x14f1;
	clk += Opcodes::mov_rx_mem          (aCPU, pc, 0xaa,0x82,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_14f3(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x14f3;
	clk += Opcodes::clr_bitaddr         (aCPU, pc, 0xc2,0xc2,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8a,0xda,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_14f7(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x14f7;
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xc2,0xfd);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_14fa(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x14fa;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0xe1,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfb,0x00,0x00);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xe0,0xf3);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1500(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1500;
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xeb,0x00,0x00);
	clk += Opcodes::jb_bitaddr_offset   (aCPU, pc, 0x20,0xe1,0x2e);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1504(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1504;
	clk += Opcodes::mov_rx_mem          (aCPU, pc, 0xaa,0x6c,0x00);
	clk += Opcodes::mov_rx_mem          (aCPU, pc, 0xab,0x6d,0x00);
	clk += Opcodes::mov_rx_mem          (aCPU, pc, 0xac,0x6e,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_150a(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x150a;
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8c,0x05,0x00);
	clk += Opcodes::dec_rx              (aCPU, pc, 0x1c,0x00,0x00);
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xed,0x00,0x00);
	clk += Opcodes::jz_offset           (aCPU, pc, 0x60,0x22,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1510(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1510;
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8a,0x05,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8b,0x06,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1514(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1514;
	clk += Opcodes::clr_bitaddr         (aCPU, pc, 0xc2,0xc2,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8d,0x82,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8e,0x83,0x00);
	clk += Opcodes::clr_a               (aCPU, pc, 0xe4,0x00,0x00);
	clk += Opcodes::movc_a_indir_a_dptr (aCPU, pc, 0x93,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0xda,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_151e(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x151e;
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xc2,0xfd);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1521(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1521;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0xe1,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xff,0x00,0x00);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xe0,0xed);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1527(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1527;
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xef,0x00,0x00);
	clk += Opcodes::jb_bitaddr_offset   (aCPU, pc, 0x20,0xe1,0x07);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_152b(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x152b;
	clk += Opcodes::inc_rx              (aCPU, pc, 0x0a,0x00,0x00);
	clk += Opcodes::cjne_rx_imm_offset  (aCPU, pc, 0xba,0x00,0xdb);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_152f(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x152f;
	clk += Opcodes::inc_rx              (aCPU, pc, 0x0b,0x00,0x00);
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0xd8,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1532(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1532;
	clk += Opcodes::orl_mem_imm         (aCPU, pc, 0x43,0xe2,0x20);
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1536(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1536;
	clk += Opcodes::orl_mem_imm         (aCPU, pc, 0x43,0xb9,0x10);
	clk += Opcodes::orl_mem_imm         (aCPU, pc, 0x43,0x90,0x0c);
	clk += Opcodes::anl_mem_imm         (aCPU, pc, 0x53,0x94,0xf3);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xe2,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1542(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1542;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xe2,0x01);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1545(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1545;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xe2,0x07);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1548(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1548;
	clk += Opcodes::orl_mem_imm         (aCPU, pc, 0x43,0xa6,0x04);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xe1,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_154e(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x154e;
	clk += Opcodes::orl_mem_imm         (aCPU, pc, 0x43,0xc8,0x40);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xc0,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x6c,0x8d);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x6d,0x1e);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x6e,0x02);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x82,0x30);
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x14,0xf1);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1563(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1563;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x6c,0x8f);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x6d,0x1e);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x6e,0x02);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x82,0x30);
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x14,0xf1);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1572(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1572;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xc0,0x00);
	clk += Opcodes::orl_mem_imm         (aCPU, pc, 0x43,0xa9,0x04);
	clk += Opcodes::setb_bitaddr        (aCPU, pc, 0xd2,0xba,0x00);
	clk += Opcodes::setb_bitaddr        (aCPU, pc, 0xd2,0x8c,0x00);
	clk += Opcodes::setb_bitaddr        (aCPU, pc, 0xd2,0xa9,0x00);
	clk += Opcodes::orl_mem_imm         (aCPU, pc, 0x43,0x89,0x50);
	clk += Opcodes::orl_mem_imm         (aCPU, pc, 0x43,0xa9,0x08);
	clk += Opcodes::orl_mem_imm         (aCPU, pc, 0x43,0xb9,0x08);
	clk += Opcodes::setb_bitaddr        (aCPU, pc, 0xd2,0xab,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xcb,0xff);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xca,0xc0);
	clk += Opcodes::orl_mem_imm         (aCPU, pc, 0x43,0xc8,0x10);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xcd,0xff);
	clk += Opcodes::orl_mem_imm         (aCPU, pc, 0x43,0xa9,0x20);
	clk += Opcodes::orl_mem_imm         (aCPU, pc, 0x43,0xb9,0x20);
	clk += Opcodes::setb_bitaddr        (aCPU, pc, 0xd2,0xad,0x00);
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x13,0x24);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_15a0(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x15a0;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x82,0x00);
	clk += Opcodes::orl_a_imm           (aCPU, pc, 0x44,0xe0,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x60,0x00);
	clk += Opcodes::cpl_a               (aCPU, pc, 0xf4,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfa,0x00,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8a,0x61,0x00);
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_15ab(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x15ab;
	clk += Opcodes::push_mem            (aCPU, pc, 0xc0,0xe0,0x00);
	clk += Opcodes::push_mem            (aCPU, pc, 0xc0,0x02,0x00);
	clk += Opcodes::push_mem            (aCPU, pc, 0xc0,0x03,0x00);
	clk += Opcodes::push_mem            (aCPU, pc, 0xc0,0x04,0x00);
	clk += Opcodes::push_mem            (aCPU, pc, 0xc0,0x05,0x00);
	clk += Opcodes::push_mem            (aCPU, pc, 0xc0,0xd0,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xd0,0x00);
	clk += Opcodes::jbc_bitaddr_offset  (aCPU, pc, 0x10,0x0b,0x02);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_15bd(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x15bd;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x63,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_15bf(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x15bf;
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0x0c,0x20);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_15c2(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x15c2;
	clk += Opcodes::clr_c               (aCPU, pc, 0xc3,0x00,0x00);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x18,0x00);
	clk += Opcodes::subb_a_mem          (aCPU, pc, 0x95,0xd5,0x00);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x19,0x00);
	clk += Opcodes::subb_a_mem          (aCPU, pc, 0x95,0xd4,0x00);
	clk += Opcodes::jnc_offset          (aCPU, pc, 0x50,0x0a,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_15cd(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x15cd;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x18,0x00);
	clk += Opcodes::clr_a               (aCPU, pc, 0xe4,0x00,0x00);
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0x18,0x1c);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_15d3(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x15d3;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x19,0x00);
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x18,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_15d7(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x15d7;
	clk += Opcodes::dec_mem             (aCPU, pc, 0x15,0x18,0x00);
	clk += Opcodes::mov_a_imm           (aCPU, pc, 0x74,0xff,0x00);
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0x18,0x02);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_15de(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x15de;
	clk += Opcodes::dec_mem             (aCPU, pc, 0x15,0x19,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_15e0(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x15e0;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x0d,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_15e2(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x15e2;
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0xd5,0x18);
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0xd4,0x19);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x55,0x00);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xe4,0x02);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_15ed(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x15ed;
	clk += Opcodes::setb_bitaddr        (aCPU, pc, 0xd2,0x0c,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_15ef(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x15ef;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x18,0x00);
	clk += Opcodes::clr_c               (aCPU, pc, 0xc3,0x00,0x00);
	clk += Opcodes::subb_a_mem          (aCPU, pc, 0x95,0xd5,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfa,0x00,0x00);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x19,0x00);
	clk += Opcodes::subb_a_mem          (aCPU, pc, 0x95,0xd4,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfb,0x00,0x00);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x1b,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfc,0x00,0x00);
	clk += Opcodes::rlc_a               (aCPU, pc, 0x33,0x00,0x00);
	clk += Opcodes::subb_a_mem          (aCPU, pc, 0x95,0xe0,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfd,0x00,0x00);
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xea,0x00,0x00);
	clk += Opcodes::clr_c               (aCPU, pc, 0xc3,0x00,0x00);
	clk += Opcodes::subb_a_rx           (aCPU, pc, 0x9c,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfa,0x00,0x00);
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xeb,0x00,0x00);
	clk += Opcodes::subb_a_rx           (aCPU, pc, 0x9d,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfb,0x00,0x00);
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xea,0x00,0x00);
	clk += Opcodes::add_a_mem           (aCPU, pc, 0x25,0x1a,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x1a,0x00);
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xeb,0x00,0x00);
	clk += Opcodes::addc_a_mem          (aCPU, pc, 0x35,0x1b,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x1b,0x00);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xe7,0x05);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1615(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1615;
	clk += Opcodes::clr_a               (aCPU, pc, 0xe4,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x1a,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x1b,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_161a(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x161a;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xd3,0x00);
	clk += Opcodes::clr_bitaddr         (aCPU, pc, 0xc2,0xbc,0x00);
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x16,0x34);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1622(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1622;
	clk += Opcodes::setb_bitaddr        (aCPU, pc, 0xd2,0x0b,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xd3,0xbc);
	clk += Opcodes::anl_mem_imm         (aCPU, pc, 0x53,0x94,0xef);
	clk += Opcodes::anl_mem_imm         (aCPU, pc, 0x53,0x90,0xef);
	clk += Opcodes::orl_mem_imm         (aCPU, pc, 0x43,0x94,0x10);
	clk += Opcodes::nop                 (aCPU, pc, 0x00,0x00,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xd3,0xb0);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1634(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1634;
	clk += Opcodes::pop_mem             (aCPU, pc, 0xd0,0xd0,0x00);
	clk += Opcodes::pop_mem             (aCPU, pc, 0xd0,0x05,0x00);
	clk += Opcodes::pop_mem             (aCPU, pc, 0xd0,0x04,0x00);
	clk += Opcodes::pop_mem             (aCPU, pc, 0xd0,0x03,0x00);
	clk += Opcodes::pop_mem             (aCPU, pc, 0xd0,0x02,0x00);
	clk += Opcodes::pop_mem             (aCPU, pc, 0xd0,0xe0,0x00);
	clk += Opcodes::reti                (aCPU, pc, 0x32,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1641(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1641;
	clk += Opcodes::mov_a_imm           (aCPU, pc, 0x74,0x05,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1643(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1643;
	clk += Opcodes::djnz_mem_offset     (aCPU, pc, 0xd5,0xe0,0xfd);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1646(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1646;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0xd3,0x00);
	clk += Opcodes::jb_bitaddr_offset   (aCPU, pc, 0x20,0xe6,0xfb);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_164b(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x164b;
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_164c(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x164c;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x56,0x00);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xe2,0x08);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1651(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1651;
	clk += Opcodes::jb_bitaddr_offset   (aCPU, pc, 0x20,0x0e,0x01);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1654(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1654;
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1655(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1655;
	clk += Opcodes::clr_bitaddr         (aCPU, pc, 0xc2,0x0e,0x00);
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x06,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1659(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1659;
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0x0e,0x01);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_165c(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x165c;
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_165d(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x165d;
	clk += Opcodes::setb_bitaddr        (aCPU, pc, 0xd2,0x0e,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_165f(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x165f;
	clk += Opcodes::setb_bitaddr        (aCPU, pc, 0xd2,0x0d,0x00);
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x16,0x41);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1664(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1664;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x80,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x93,0x01);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xd2,0x03);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xd1,0xc0);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xd3,0x81);
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x16,0x41);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1676(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1676;
	clk += Opcodes::clr_bitaddr         (aCPU, pc, 0xc2,0xb9,0x00);
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0xd5,0x50);
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0xd4,0x51);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x52,0x10);
	clk += Opcodes::setb_bitaddr        (aCPU, pc, 0xd2,0xb9,0x00);
	clk += Opcodes::clr_bitaddr         (aCPU, pc, 0xc2,0x0d,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x93,0x00);
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1689(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1689;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x80,0x14);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x7d);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x80,0xaa);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xa0,0xaa);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x59);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x79);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x80,0x0a);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x7d);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x80,0x54);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xa0,0x55);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x59);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x79);
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_16ae(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x16ae;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x16,0x89);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_16b1(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x16b1;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x80,0x14);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x7d);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x80,0xaa);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xa0,0xa0);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x59);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x79);
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_16c4(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x16c4;
	clk += Opcodes::push_mem            (aCPU, pc, 0xc0,0x02,0x00);
	clk += Opcodes::push_mem            (aCPU, pc, 0xc0,0x03,0x00);
	clk += Opcodes::push_mem            (aCPU, pc, 0xc0,0x04,0x00);
	clk += Opcodes::mov_rx_mem          (aCPU, pc, 0xaa,0x82,0x00);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x1c,0x00);
	clk += Opcodes::jz_offset           (aCPU, pc, 0x60,0x03,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_16d0(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x16d0;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x17,0x67);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_16d3(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x16d3;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x1d,0x00);
	clk += Opcodes::jz_offset           (aCPU, pc, 0x60,0x03,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_16d7(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x16d7;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x17,0x67);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_16da(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x16da;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x1e,0x00);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xe0,0x03);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_16df(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x16df;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x17,0x67);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_16e2(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x16e2;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x79);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x95,0x00);
	clk += Opcodes::push_mem            (aCPU, pc, 0xc0,0x02,0x00);
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x16,0x89);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_16ed(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x16ed;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x80,0x14);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x7d);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x80,0xaa);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xa0,0x80);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x59);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x79);
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x16,0x89);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1702(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1702;
	clk += Opcodes::pop_mem             (aCPU, pc, 0xd0,0x02,0x00);
	clk += Opcodes::cjne_rx_imm_offset  (aCPU, pc, 0xba,0x1f,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1707(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1707;
	clk += Opcodes::jc_offset           (aCPU, pc, 0x40,0x21,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1709(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1709;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x1e,0x00);
	clk += Opcodes::jnz_offset          (aCPU, pc, 0x70,0x1d,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_170d(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x170d;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x80,0x14);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x7d);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x80,0xaa);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xa0,0x10);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x59);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x79);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x95,0xff);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x39);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1725(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1725;
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xa7,0xfd);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1728(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1728;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x3a,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_172a(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x172a;
	clk += Opcodes::clr_bitaddr         (aCPU, pc, 0xc2,0xb9,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7b,0x04,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_172e(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x172e;
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8b,0x04,0x00);
	clk += Opcodes::dec_rx              (aCPU, pc, 0x1b,0x00,0x00);
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xec,0x00,0x00);
	clk += Opcodes::jz_offset           (aCPU, pc, 0x60,0x18,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1734(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1734;
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xeb,0x00,0x00);
	clk += Opcodes::add_a_rx            (aCPU, pc, 0x2b,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfc,0x00,0x00);
	clk += Opcodes::add_a_mem           (aCPU, pc, 0x25,0x1e,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x80,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x7b);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x80,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xa0,0x30);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x59);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x79);
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0xe2,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_174c(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x174c;
	clk += Opcodes::setb_bitaddr        (aCPU, pc, 0xd2,0xb9,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x95,0xff);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x39);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1754(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1754;
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xa7,0xfd);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1757(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1757;
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xea,0x00,0x00);
	clk += Opcodes::jz_offset           (aCPU, pc, 0x60,0x0a,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_175a(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x175a;
	clk += Opcodes::dec_rx              (aCPU, pc, 0x1a,0x00,0x00);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x1e,0x00);
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0x04,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x1e,0x00);
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x16,0xe2);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1764(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1764;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x17,0x6e);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1767(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1767;
	clk += Opcodes::pop_mem             (aCPU, pc, 0xd0,0x04,0x00);
	clk += Opcodes::pop_mem             (aCPU, pc, 0xd0,0x03,0x00);
	clk += Opcodes::pop_mem             (aCPU, pc, 0xd0,0x02,0x00);
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_176e(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x176e;
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0x1e,0x80);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x3b);
	clk += Opcodes::mov_c_bitaddr       (aCPU, pc, 0xa2,0xa7,0x00);
	clk += Opcodes::mov_bitaddr_c       (aCPU, pc, 0x92,0x0f,0x00);
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1779(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1779;
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0x0f,0x05);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_177c(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x177c;
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xa7,0xfd);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_177f(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x177f;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x03,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1781(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1781;
	clk += Opcodes::jb_bitaddr_offset   (aCPU, pc, 0x20,0xa7,0xfd);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1784(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1784;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x79);
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1788(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1788;
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0x0f,0x05);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_178b(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x178b;
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xa7,0xfd);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_178e(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x178e;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x03,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1790(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1790;
	clk += Opcodes::jb_bitaddr_offset   (aCPU, pc, 0x20,0xa7,0xfd);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1793(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1793;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x79);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x95,0x00);
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x16,0xae);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_179c(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x179c;
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0x1d,0x80);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x7d);
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0x1c,0x80);
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0x83,0xa0);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x59);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x79);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x95,0xff);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x39);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x1c,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x1c,0x00);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x82,0x00);
	clk += Opcodes::rlc_a               (aCPU, pc, 0x33,0x00,0x00);
	clk += Opcodes::mov_bitaddr_c       (aCPU, pc, 0x92,0x0f,0x00);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x83,0x00);
	clk += Opcodes::rlc_a               (aCPU, pc, 0x33,0x00,0x00);
	clk += Opcodes::jnc_offset          (aCPU, pc, 0x50,0x05,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_17c2(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x17c2;
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xa7,0xfd);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_17c5(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x17c5;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x03,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_17c7(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x17c7;
	clk += Opcodes::jb_bitaddr_offset   (aCPU, pc, 0x20,0xa7,0xfd);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_17ca(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x17ca;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x79);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x95,0x00);
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x16,0xae);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_17d3(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x17d3;
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0x1d,0x80);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x7d);
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0x1c,0x80);
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0x82,0xa0);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x59);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x79);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x95,0xff);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x39);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x1c,0x00);
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0x02,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x1c,0x00);
	clk += Opcodes::jz_offset           (aCPU, pc, 0x60,0x01,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_17f3(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x17f3;
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_17f4(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x17f4;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x1d,0x00);
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0x02,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x1d,0x00);
	clk += Opcodes::jz_offset           (aCPU, pc, 0x60,0x01,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_17fc(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x17fc;
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_17fd(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x17fd;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x1e,0x00);
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0x02,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x1e,0x00);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0x0f,0x05);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1806(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1806;
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xa7,0xfd);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1809(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1809;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x03,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_180b(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x180b;
	clk += Opcodes::jb_bitaddr_offset   (aCPU, pc, 0x20,0xa7,0xfd);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_180e(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x180e;
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x80,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x7b);
	clk += Opcodes::mov_c_bitaddr       (aCPU, pc, 0xa2,0xa7,0x00);
	clk += Opcodes::mov_bitaddr_c       (aCPU, pc, 0x92,0x0f,0x00);
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1818(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1818;
	clk += Opcodes::push_mem            (aCPU, pc, 0xc0,0x02,0x00);
	clk += Opcodes::push_mem            (aCPU, pc, 0xc0,0x00,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x78,0xb7,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7a,0x22,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1820(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1820;
	clk += Opcodes::mov_indir_rx_imm    (aCPU, pc, 0x76,0x00,0x00);
	clk += Opcodes::inc_rx              (aCPU, pc, 0x08,0x00,0x00);
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xda,0xfb,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1825(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1825;
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0x62,0x65);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x6a,0x85);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x6b,0x18);
	clk += Opcodes::pop_mem             (aCPU, pc, 0xd0,0x00,0x00);
	clk += Opcodes::pop_mem             (aCPU, pc, 0xd0,0x02,0x00);
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1833(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1833;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x65,0x00);
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0x62,0x01);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1838(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1838;
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1839(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1839;
	clk += Opcodes::setb_bitaddr        (aCPU, pc, 0xd2,0x00,0x00);
	clk += Opcodes::mov_a_imm           (aCPU, pc, 0x74,0xff,0x00);
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0x62,0x02);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1840(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1840;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x03,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1842(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1842;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x18,0x51);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1845(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1845;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x62,0x00);
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x18,0x18);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_184b(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x184b;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x4f,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x52,0x10);
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1851(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1851;
	clk += Opcodes::mov_a_imm           (aCPU, pc, 0x74,0x03,0x00);
	clk += Opcodes::add_a_mem           (aCPU, pc, 0x25,0x55,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x69,0x00);
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x17,0x6e);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_185a(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x185a;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x55,0x00);
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0x69,0x02);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_185f(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x185f;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x05,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1861(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1861;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x65,0x00);
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0x62,0x03);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1866(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1866;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x17,0x79);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1869(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1869;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x65,0x00);
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0x77,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xf8,0x00,0x00);
	clk += Opcodes::mov_mem_indir_rx    (aCPU, pc, 0x86,0x68,0x00);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x65,0x00);
	clk += Opcodes::inc_a               (aCPU, pc, 0x04,0x00,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0x3f,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x65,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x4f,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x52,0x10);
	clk += Opcodes::clr_a               (aCPU, pc, 0xe4,0x00,0x00);
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0x6a,0x82);
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0x6b,0x83);
	clk += Opcodes::jmp_indir_a_dptr    (aCPU, pc, 0x73,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1884(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1884;
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1885(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1885;
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0x68,0x66);
	clk += Opcodes::mov_a_imm           (aCPU, pc, 0x74,0xe0,0x00);
	clk += Opcodes::anl_a_mem           (aCPU, pc, 0x55,0x66,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfa,0x00,0x00);
	clk += Opcodes::jz_offset           (aCPU, pc, 0x60,0x2b,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_188f(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x188f;
	clk += Opcodes::cjne_rx_imm_offset  (aCPU, pc, 0xba,0x20,0x02);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1892(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1892;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x2f,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1894(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1894;
	clk += Opcodes::cjne_rx_imm_offset  (aCPU, pc, 0xba,0x40,0x02);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1897(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1897;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x33,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1899(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1899;
	clk += Opcodes::cjne_rx_imm_offset  (aCPU, pc, 0xba,0x60,0x03);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_189c(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x189c;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x18,0xe3);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_189f(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x189f;
	clk += Opcodes::cjne_rx_imm_offset  (aCPU, pc, 0xba,0x80,0x03);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_18a2(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x18a2;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x18,0xf2);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_18a5(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x18a5;
	clk += Opcodes::cjne_rx_imm_offset  (aCPU, pc, 0xba,0xa0,0x03);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_18a8(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x18a8;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x19,0x01);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_18ab(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x18ab;
	clk += Opcodes::cjne_rx_imm_offset  (aCPU, pc, 0xba,0xc0,0x03);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_18ae(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x18ae;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x19,0x10);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_18b1(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x18b1;
	clk += Opcodes::cjne_rx_imm_offset  (aCPU, pc, 0xba,0xe0,0x03);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_18b4(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x18b4;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x19,0x1c);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_18b7(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x18b7;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x19,0x3f);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_18ba(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x18ba;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x6a,0x8e);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x6b,0x19);
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x18,0x5a);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_18c3(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x18c3;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x6a,0xb9);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x6b,0x19);
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x18,0x5a);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_18cc(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x18cc;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x68,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0x0f,0x00);
	clk += Opcodes::rl_a                (aCPU, pc, 0x23,0x00,0x00);
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0xb7,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xf8,0x00,0x00);
	clk += Opcodes::mov_mem_indir_rx    (aCPU, pc, 0x86,0x82,0x00);
	clk += Opcodes::inc_rx              (aCPU, pc, 0x08,0x00,0x00);
	clk += Opcodes::mov_mem_indir_rx    (aCPU, pc, 0x86,0x83,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x78,0x40,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_18db(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x18db;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x17,0x88);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_18de(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x18de;
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xd8,0xfb,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_18e0(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x18e0;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x18,0x5a);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_18e3(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x18e3;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x67,0x40);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x63,0xff);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x6a,0x2f);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x6b,0x1a);
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x18,0x5a);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_18f2(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x18f2;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x67,0x40);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x63,0xff);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x6a,0xb0);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x6b,0x1a);
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x18,0x5a);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1901(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1901;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x67,0x40);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x63,0xff);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x6a,0x2d);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x6b,0x1b);
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x18,0x5a);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1910(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1910;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x67,0x08);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x6a,0x9b);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x6b,0x1b);
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x18,0x5a);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_191c(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x191c;
	clk += Opcodes::mov_a_imm           (aCPU, pc, 0x74,0xe1,0x00);
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0x66,0x02);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1921(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1921;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x07,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1923(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1923;
	clk += Opcodes::mov_a_imm           (aCPU, pc, 0x74,0xe2,0x00);
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0x66,0x14);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1928(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1928;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x09,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_192a(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x192a;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x6a,0x42);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x6b,0x19);
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x18,0x5a);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1933(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1933;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x6a,0x63);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x6b,0x19);
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x18,0x5a);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_193c(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x193c;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x18,0x5a);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_193f(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x193f;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x18,0x5a);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1942(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1942;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x1c,0x00);
	clk += Opcodes::mov_a_imm           (aCPU, pc, 0x74,0xfe,0x00);
	clk += Opcodes::anl_a_mem           (aCPU, pc, 0x55,0x68,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x1d,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x6a,0x54);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x6b,0x19);
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x18,0x5a);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1954(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1954;
	clk += Opcodes::mov_a_imm           (aCPU, pc, 0x74,0xfe,0x00);
	clk += Opcodes::anl_a_mem           (aCPU, pc, 0x55,0x68,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x1e,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x6a,0x85);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x6b,0x18);
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x18,0x5a);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1963(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1963;
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0x68,0x67);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x6a,0x6f);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x6b,0x19);
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x18,0x5a);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_196f(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x196f;
	clk += Opcodes::clr_c               (aCPU, pc, 0xc3,0x00,0x00);
	clk += Opcodes::clr_a               (aCPU, pc, 0xe4,0x00,0x00);
	clk += Opcodes::subb_a_mem          (aCPU, pc, 0x95,0x67,0x00);
	clk += Opcodes::clr_c               (aCPU, pc, 0xc3,0x00,0x00);
	clk += Opcodes::subb_a_mem          (aCPU, pc, 0x95,0x1d,0x00);
	clk += Opcodes::clr_c               (aCPU, pc, 0xc3,0x00,0x00);
	clk += Opcodes::subb_a_mem          (aCPU, pc, 0x95,0x1e,0x00);
	clk += Opcodes::xrl_a_imm           (aCPU, pc, 0x64,0xff,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfa,0x00,0x00);
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0x68,0x06);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_197f(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x197f;
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0x67,0x82);
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x16,0xc4);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1985(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1985;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x6a,0x85);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x6b,0x18);
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x18,0x5a);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_198e(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x198e;
	clk += Opcodes::mov_a_imm           (aCPU, pc, 0x74,0x0f,0x00);
	clk += Opcodes::anl_a_mem           (aCPU, pc, 0x55,0x66,0x00);
	clk += Opcodes::add_a_mem           (aCPU, pc, 0x25,0xe0,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfa,0x00,0x00);
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0xb7,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xf8,0x00,0x00);
	clk += Opcodes::mov_indir_rx_mem    (aCPU, pc, 0xa6,0x68,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x6a,0xa3);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x6b,0x19);
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x18,0x5a);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_19a3(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x19a3;
	clk += Opcodes::mov_a_imm           (aCPU, pc, 0x74,0x0f,0x00);
	clk += Opcodes::anl_a_mem           (aCPU, pc, 0x55,0x66,0x00);
	clk += Opcodes::add_a_mem           (aCPU, pc, 0x25,0xe0,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfa,0x00,0x00);
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0xb7,0x00);
	clk += Opcodes::inc_a               (aCPU, pc, 0x04,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xf8,0x00,0x00);
	clk += Opcodes::mov_indir_rx_mem    (aCPU, pc, 0xa6,0x68,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x6a,0x85);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x6b,0x18);
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x18,0x5a);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_19b9(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x19b9;
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0x68,0x63);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x6a,0xc5);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x6b,0x19);
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x18,0x5a);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_19c5(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x19c5;
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0x68,0x64);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x67,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x6a,0xd4);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x6b,0x19);
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x18,0x5a);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_19d4(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x19d4;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x63,0x00);
	clk += Opcodes::jb_bitaddr_offset   (aCPU, pc, 0x20,0xe0,0x12);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_19d9(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x19d9;
	clk += Opcodes::mov_rx_mem          (aCPU, pc, 0xaa,0x63,0x00);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x64,0x00);
	clk += Opcodes::clr_c               (aCPU, pc, 0xc3,0x00,0x00);
	clk += Opcodes::rrc_a               (aCPU, pc, 0x13,0x00,0x00);
	clk += Opcodes::xch_a_rx            (aCPU, pc, 0xca,0x00,0x00);
	clk += Opcodes::rrc_a               (aCPU, pc, 0x13,0x00,0x00);
	clk += Opcodes::xch_a_rx            (aCPU, pc, 0xca,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfb,0x00,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8a,0x63,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8b,0x64,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x67,0x00);
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0xe9,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_19eb(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x19eb;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x67,0x00);
	clk += Opcodes::add_a_mem           (aCPU, pc, 0x25,0x67,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfa,0x00,0x00);
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0xb7,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xf8,0x00,0x00);
	clk += Opcodes::mov_indir_rx_mem    (aCPU, pc, 0xa6,0x68,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x6a,0xfe);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x6b,0x19);
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x18,0x5a);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_19fe(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x19fe;
	clk += Opcodes::mov_rx_mem          (aCPU, pc, 0xaa,0x67,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x67,0x00);
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xea,0x00,0x00);
	clk += Opcodes::add_a_rx            (aCPU, pc, 0x2a,0x00,0x00);
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0xb7,0x00);
	clk += Opcodes::inc_a               (aCPU, pc, 0x04,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xf8,0x00,0x00);
	clk += Opcodes::mov_indir_rx_mem    (aCPU, pc, 0xa6,0x68,0x00);
	clk += Opcodes::mov_rx_mem          (aCPU, pc, 0xaa,0x63,0x00);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x64,0x00);
	clk += Opcodes::clr_c               (aCPU, pc, 0xc3,0x00,0x00);
	clk += Opcodes::rrc_a               (aCPU, pc, 0x13,0x00,0x00);
	clk += Opcodes::xch_a_rx            (aCPU, pc, 0xca,0x00,0x00);
	clk += Opcodes::rrc_a               (aCPU, pc, 0x13,0x00,0x00);
	clk += Opcodes::xch_a_rx            (aCPU, pc, 0xca,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfb,0x00,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8a,0x63,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8b,0x64,0x00);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x63,0x00);
	clk += Opcodes::orl_a_mem           (aCPU, pc, 0x45,0x64,0x00);
	clk += Opcodes::jz_offset           (aCPU, pc, 0x60,0x06,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1a1e(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1a1e;
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7a,0xd4,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7b,0x19,0x00);
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x04,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1a24(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1a24;
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7a,0x85,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7b,0x18,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1a28(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1a28;
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8a,0x6a,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8b,0x6b,0x00);
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x18,0x5a);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1a2f(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1a2f;
	clk += Opcodes::mov_a_imm           (aCPU, pc, 0x74,0x0f,0x00);
	clk += Opcodes::anl_a_mem           (aCPU, pc, 0x55,0x68,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfa,0x00,0x00);
	clk += Opcodes::setb_bitaddr        (aCPU, pc, 0xd2,0x10,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1a36(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1a36;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x64,0x00);
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0x63,0x1b);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1a3b(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1a3b;
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8a,0x03,0x00);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x63,0x00);
	clk += Opcodes::swap_a              (aCPU, pc, 0xc4,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfc,0x00,0x00);
	clk += Opcodes::orl_a_mem           (aCPU, pc, 0x45,0x63,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfa,0x00,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x63,0xf0);
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xeb,0x00,0x00);
	clk += Opcodes::jz_offset           (aCPU, pc, 0x60,0x33,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1a4a(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1a4a;
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xeb,0x00,0x00);
	clk += Opcodes::rl_a                (aCPU, pc, 0x23,0x00,0x00);
	clk += Opcodes::rl_a                (aCPU, pc, 0x23,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfb,0x00,0x00);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x67,0x00);
	clk += Opcodes::clr_c               (aCPU, pc, 0xc3,0x00,0x00);
	clk += Opcodes::subb_a_rx           (aCPU, pc, 0x9b,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x67,0x00);
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x10,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1a56(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1a56;
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7b,0x04,0x00);
	clk += Opcodes::dec_mem             (aCPU, pc, 0x15,0x67,0x00);
	clk += Opcodes::dec_mem             (aCPU, pc, 0x15,0x67,0x00);
	clk += Opcodes::dec_mem             (aCPU, pc, 0x15,0x67,0x00);
	clk += Opcodes::dec_mem             (aCPU, pc, 0x15,0x67,0x00);
	clk += Opcodes::mov_rx_mem          (aCPU, pc, 0xac,0x63,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8c,0x64,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8a,0x63,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1a66(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1a66;
	clk += Opcodes::mov_a_imm           (aCPU, pc, 0x74,0x01,0x00);
	clk += Opcodes::anl_a_rx            (aCPU, pc, 0x5a,0x00,0x00);
	clk += Opcodes::add_a_mem           (aCPU, pc, 0x25,0xe0,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfc,0x00,0x00);
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0xb7,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xf8,0x00,0x00);
	clk += Opcodes::mov_mem_indir_rx    (aCPU, pc, 0x86,0x82,0x00);
	clk += Opcodes::inc_rx              (aCPU, pc, 0x08,0x00,0x00);
	clk += Opcodes::mov_mem_indir_rx    (aCPU, pc, 0x86,0x83,0x00);
	clk += Opcodes::dec_rx              (aCPU, pc, 0x18,0x00,0x00);
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x17,0x88);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1a78(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1a78;
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xea,0x00,0x00);
	clk += Opcodes::rr_a                (aCPU, pc, 0x03,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfa,0x00,0x00);
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xdb,0xe9,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1a7d(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1a7d;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x67,0x00);
	clk += Opcodes::jz_offset           (aCPU, pc, 0x60,0x05,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1a81(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1a81;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x67,0x00);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xe7,0x19);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1a86(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1a86;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x66,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0x1f,0x00);
	clk += Opcodes::jz_offset           (aCPU, pc, 0x60,0x0a,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1a8c(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1a8c;
	clk += Opcodes::dec_mem             (aCPU, pc, 0x15,0x66,0x00);
	clk += Opcodes::mov_a_imm           (aCPU, pc, 0x74,0x40,0x00);
	clk += Opcodes::add_a_mem           (aCPU, pc, 0x25,0x67,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x67,0x00);
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x09,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1a96(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1a96;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x6a,0x85);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x6b,0x18);
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x18,0x5a);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1a9f(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1a9f;
	clk += Opcodes::jb_bitaddr_offset   (aCPU, pc, 0x20,0x10,0x03);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1aa2(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1aa2;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x18,0x5a);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1aa5(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1aa5;
	clk += Opcodes::clr_bitaddr         (aCPU, pc, 0xc2,0x10,0x00);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x68,0x00);
	clk += Opcodes::swap_a              (aCPU, pc, 0xc4,0x00,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0x0f,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfa,0x00,0x00);
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x1a,0x36);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1ab0(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1ab0;
	clk += Opcodes::mov_a_imm           (aCPU, pc, 0x74,0x0f,0x00);
	clk += Opcodes::anl_a_mem           (aCPU, pc, 0x55,0x68,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfa,0x00,0x00);
	clk += Opcodes::setb_bitaddr        (aCPU, pc, 0xd2,0x10,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1ab7(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1ab7;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x64,0x00);
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0x63,0x1a);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1abc(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1abc;
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8a,0x03,0x00);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x63,0x00);
	clk += Opcodes::swap_a              (aCPU, pc, 0xc4,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfc,0x00,0x00);
	clk += Opcodes::orl_a_mem           (aCPU, pc, 0x45,0x63,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfa,0x00,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x63,0xf0);
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xeb,0x00,0x00);
	clk += Opcodes::jz_offset           (aCPU, pc, 0x60,0x2f,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1acb(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1acb;
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xeb,0x00,0x00);
	clk += Opcodes::rl_a                (aCPU, pc, 0x23,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfb,0x00,0x00);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x67,0x00);
	clk += Opcodes::clr_c               (aCPU, pc, 0xc3,0x00,0x00);
	clk += Opcodes::subb_a_rx           (aCPU, pc, 0x9b,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x67,0x00);
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x0c,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1ad6(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1ad6;
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7b,0x02,0x00);
	clk += Opcodes::dec_mem             (aCPU, pc, 0x15,0x67,0x00);
	clk += Opcodes::dec_mem             (aCPU, pc, 0x15,0x67,0x00);
	clk += Opcodes::mov_rx_mem          (aCPU, pc, 0xac,0x63,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8c,0x64,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8a,0x63,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1ae2(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1ae2;
	clk += Opcodes::mov_a_imm           (aCPU, pc, 0x74,0x03,0x00);
	clk += Opcodes::anl_a_rx            (aCPU, pc, 0x5a,0x00,0x00);
	clk += Opcodes::add_a_mem           (aCPU, pc, 0x25,0xe0,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfc,0x00,0x00);
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0xb7,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xf8,0x00,0x00);
	clk += Opcodes::mov_mem_indir_rx    (aCPU, pc, 0x86,0x82,0x00);
	clk += Opcodes::inc_rx              (aCPU, pc, 0x08,0x00,0x00);
	clk += Opcodes::mov_mem_indir_rx    (aCPU, pc, 0x86,0x83,0x00);
	clk += Opcodes::dec_rx              (aCPU, pc, 0x18,0x00,0x00);
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x17,0x88);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1af4(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1af4;
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xea,0x00,0x00);
	clk += Opcodes::rr_a                (aCPU, pc, 0x03,0x00,0x00);
	clk += Opcodes::rr_a                (aCPU, pc, 0x03,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfa,0x00,0x00);
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xdb,0xe8,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1afa(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1afa;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x67,0x00);
	clk += Opcodes::jz_offset           (aCPU, pc, 0x60,0x05,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1afe(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1afe;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x67,0x00);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xe7,0x19);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1b03(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1b03;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x66,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0x1f,0x00);
	clk += Opcodes::jz_offset           (aCPU, pc, 0x60,0x0a,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1b09(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1b09;
	clk += Opcodes::dec_mem             (aCPU, pc, 0x15,0x66,0x00);
	clk += Opcodes::mov_a_imm           (aCPU, pc, 0x74,0x40,0x00);
	clk += Opcodes::add_a_mem           (aCPU, pc, 0x25,0x67,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x67,0x00);
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x09,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1b13(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1b13;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x6a,0x85);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x6b,0x18);
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x18,0x5a);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1b1c(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1b1c;
	clk += Opcodes::jb_bitaddr_offset   (aCPU, pc, 0x20,0x10,0x03);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1b1f(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1b1f;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x18,0x5a);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1b22(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1b22;
	clk += Opcodes::clr_bitaddr         (aCPU, pc, 0xc2,0x10,0x00);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x68,0x00);
	clk += Opcodes::swap_a              (aCPU, pc, 0xc4,0x00,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0x0f,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfa,0x00,0x00);
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x1a,0xb7);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1b2d(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1b2d;
	clk += Opcodes::mov_a_imm           (aCPU, pc, 0x74,0x0f,0x00);
	clk += Opcodes::anl_a_mem           (aCPU, pc, 0x55,0x68,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfa,0x00,0x00);
	clk += Opcodes::setb_bitaddr        (aCPU, pc, 0xd2,0x10,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1b34(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1b34;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x64,0x00);
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0x63,0x12);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1b39(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1b39;
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8a,0x03,0x00);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x67,0x00);
	clk += Opcodes::clr_c               (aCPU, pc, 0xc3,0x00,0x00);
	clk += Opcodes::subb_a_rx           (aCPU, pc, 0x9a,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x67,0x00);
	clk += Opcodes::mov_rx_mem          (aCPU, pc, 0xaa,0x63,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x63,0xf0);
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xeb,0x00,0x00);
	clk += Opcodes::jnz_offset          (aCPU, pc, 0x70,0x0c,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1b49(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1b49;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x1e,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1b4b(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1b4b;
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7b,0x01,0x00);
	clk += Opcodes::dec_mem             (aCPU, pc, 0x15,0x67,0x00);
	clk += Opcodes::mov_rx_mem          (aCPU, pc, 0xac,0x63,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8c,0x64,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8a,0x63,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1b55(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1b55;
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xea,0x00,0x00);
	clk += Opcodes::add_a_rx            (aCPU, pc, 0x2a,0x00,0x00);
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0xb7,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xf8,0x00,0x00);
	clk += Opcodes::mov_mem_indir_rx    (aCPU, pc, 0x86,0x04,0x00);
	clk += Opcodes::inc_rx              (aCPU, pc, 0x08,0x00,0x00);
	clk += Opcodes::mov_mem_indir_rx    (aCPU, pc, 0x86,0x05,0x00);
	clk += Opcodes::dec_rx              (aCPU, pc, 0x18,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1b60(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1b60;
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8c,0x82,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8d,0x83,0x00);
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x17,0x88);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1b67(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1b67;
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xdb,0xf7,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1b69(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1b69;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x67,0x00);
	clk += Opcodes::jz_offset           (aCPU, pc, 0x60,0x05,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1b6d(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1b6d;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x67,0x00);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xe7,0x19);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1b72(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1b72;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x66,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0x1f,0x00);
	clk += Opcodes::jz_offset           (aCPU, pc, 0x60,0x0a,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1b78(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1b78;
	clk += Opcodes::dec_mem             (aCPU, pc, 0x15,0x66,0x00);
	clk += Opcodes::mov_a_imm           (aCPU, pc, 0x74,0x40,0x00);
	clk += Opcodes::add_a_mem           (aCPU, pc, 0x25,0x67,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x67,0x00);
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x09,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1b82(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1b82;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x6a,0x85);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x6b,0x18);
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x18,0x5a);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1b8b(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1b8b;
	clk += Opcodes::jb_bitaddr_offset   (aCPU, pc, 0x20,0x10,0x03);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1b8e(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1b8e;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x18,0x5a);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1b91(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1b91;
	clk += Opcodes::clr_bitaddr         (aCPU, pc, 0xc2,0x10,0x00);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x68,0x00);
	clk += Opcodes::swap_a              (aCPU, pc, 0xc4,0x00,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0x0f,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfa,0x00,0x00);
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x99,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1b9b(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1b9b;
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0x68,0x63);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x64,0x08);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1ba1(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1ba1;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x63,0x00);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xe0,0x09);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1ba6(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1ba6;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x6a,0xf1);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x6b,0x1b);
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x18,0x5a);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1baf(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1baf;
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x78,0xd7,0x00);
	clk += Opcodes::mov_mem_indir_rx    (aCPU, pc, 0x86,0x82,0x00);
	clk += Opcodes::inc_rx              (aCPU, pc, 0x08,0x00,0x00);
	clk += Opcodes::mov_mem_indir_rx    (aCPU, pc, 0x86,0x83,0x00);
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x17,0x88);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1bb9(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1bb9;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x63,0x00);
	clk += Opcodes::rr_a                (aCPU, pc, 0x03,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfa,0x00,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8a,0x63,0x00);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x64,0x00);
	clk += Opcodes::dec_a               (aCPU, pc, 0x14,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfa,0x00,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8a,0x64,0x00);
	clk += Opcodes::jnz_offset          (aCPU, pc, 0x70,0xda,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1bc7(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1bc7;
	clk += Opcodes::dec_mem             (aCPU, pc, 0x15,0x67,0x00);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x67,0x00);
	clk += Opcodes::jz_offset           (aCPU, pc, 0x60,0x08,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1bcd(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1bcd;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x6a,0x9b);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x6b,0x1b);
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x19,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1bd5(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1bd5;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x66,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0x1f,0x00);
	clk += Opcodes::jz_offset           (aCPU, pc, 0x60,0x0d,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1bdb(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1bdb;
	clk += Opcodes::dec_mem             (aCPU, pc, 0x15,0x66,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x67,0x08);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x6a,0x9b);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x6b,0x1b);
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x06,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1be8(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1be8;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x6a,0x85);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x6b,0x18);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1bee(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1bee;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x18,0x5a);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1bf1(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1bf1;
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x78,0xd7,0x00);
	clk += Opcodes::mov_indir_rx_mem    (aCPU, pc, 0xa6,0x68,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x6a,0xfe);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x6b,0x1b);
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x18,0x5a);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1bfe(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1bfe;
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x78,0xd8,0x00);
	clk += Opcodes::mov_indir_rx_mem    (aCPU, pc, 0xa6,0x68,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x78,0xd7,0x00);
	clk += Opcodes::mov_mem_indir_rx    (aCPU, pc, 0x86,0x82,0x00);
	clk += Opcodes::inc_rx              (aCPU, pc, 0x08,0x00,0x00);
	clk += Opcodes::mov_mem_indir_rx    (aCPU, pc, 0x86,0x83,0x00);
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x17,0x88);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1c0c(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1c0c;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x64,0x00);
	clk += Opcodes::dec_a               (aCPU, pc, 0x14,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfa,0x00,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8a,0x64,0x00);
	clk += Opcodes::jz_offset           (aCPU, pc, 0x60,0x2c,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1c14(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1c14;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x63,0x00);
	clk += Opcodes::rr_a                (aCPU, pc, 0x03,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfa,0x00,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8a,0x63,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1c1a(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1c1a;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x63,0x00);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xe0,0x09);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1c1f(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1c1f;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x6a,0xf1);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x6b,0x1b);
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x18,0x5a);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1c28(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1c28;
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x78,0xd7,0x00);
	clk += Opcodes::mov_mem_indir_rx    (aCPU, pc, 0x86,0x82,0x00);
	clk += Opcodes::inc_rx              (aCPU, pc, 0x08,0x00,0x00);
	clk += Opcodes::mov_mem_indir_rx    (aCPU, pc, 0x86,0x83,0x00);
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x17,0x88);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1c32(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1c32;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x63,0x00);
	clk += Opcodes::rr_a                (aCPU, pc, 0x03,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfa,0x00,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8a,0x63,0x00);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x64,0x00);
	clk += Opcodes::dec_a               (aCPU, pc, 0x14,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfa,0x00,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8a,0x64,0x00);
	clk += Opcodes::jnz_offset          (aCPU, pc, 0x70,0xda,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1c40(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1c40;
	clk += Opcodes::dec_mem             (aCPU, pc, 0x15,0x67,0x00);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x67,0x00);
	clk += Opcodes::jz_offset           (aCPU, pc, 0x60,0x08,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1c46(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1c46;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x6a,0x9b);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x6b,0x1b);
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x19,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1c4e(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1c4e;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x66,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0x1f,0x00);
	clk += Opcodes::jz_offset           (aCPU, pc, 0x60,0x0d,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1c54(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1c54;
	clk += Opcodes::dec_mem             (aCPU, pc, 0x15,0x66,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x67,0x08);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x6a,0x9b);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x6b,0x1b);
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x06,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1c61(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1c61;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x6a,0x85);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x6b,0x18);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1c67(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1c67;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x18,0x5a);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1c6a(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1c6a;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xd6,0xc0);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7a,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1c6f(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1c6f;
	clk += Opcodes::cjne_rx_imm_offset  (aCPU, pc, 0xba,0x06,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1c72(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1c72;
	clk += Opcodes::jnc_offset          (aCPU, pc, 0x50,0x2e,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1c74(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1c74;
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xea,0x00,0x00);
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x82,0x00);
	clk += Opcodes::clr_a               (aCPU, pc, 0xe4,0x00,0x00);
	clk += Opcodes::addc_a_imm          (aCPU, pc, 0x34,0xfc,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x83,0x00);
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfb,0x00,0x00);
	clk += Opcodes::cjne_rx_imm_offset  (aCPU, pc, 0xbb,0xff,0x1c);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1c83(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1c83;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0xd6,0x00);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xe5,0xfb);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1c88(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1c88;
	clk += Opcodes::mov_rx_mem          (aCPU, pc, 0xab,0xd7,0x00);
	clk += Opcodes::cjne_rx_imm_offset  (aCPU, pc, 0xbb,0xff,0x02);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1c8d(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1c8d;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0xf4,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1c8f(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1c8f;
	clk += Opcodes::setb_bitaddr        (aCPU, pc, 0xd2,0xfd,0x00);
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xea,0x00,0x00);
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x82,0x00);
	clk += Opcodes::clr_a               (aCPU, pc, 0xe4,0x00,0x00);
	clk += Opcodes::addc_a_imm          (aCPU, pc, 0x34,0xfc,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x83,0x00);
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xeb,0x00,0x00);
	clk += Opcodes::movx_indir_dptr_a   (aCPU, pc, 0xf0,0x00,0x00);
	clk += Opcodes::clr_bitaddr         (aCPU, pc, 0xc2,0xfd,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1c9f(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1c9f;
	clk += Opcodes::inc_rx              (aCPU, pc, 0x0a,0x00,0x00);
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0xcd,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1ca2(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1ca2;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xd6,0x00);
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1ca6(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1ca6;
	clk += Opcodes::mov_dptr_imm        (aCPU, pc, 0x90,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1ca9(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1ca9;
	clk += Opcodes::clr_a               (aCPU, pc, 0xe4,0x00,0x00);
	clk += Opcodes::movx_indir_dptr_a   (aCPU, pc, 0xf0,0x00,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::movx_indir_dptr_a   (aCPU, pc, 0xf0,0x00,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::movx_indir_dptr_a   (aCPU, pc, 0xf0,0x00,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::movx_indir_dptr_a   (aCPU, pc, 0xf0,0x00,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::mov_a_imm           (aCPU, pc, 0x74,0x04,0x00);
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0x83,0xf2);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1cb7(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1cb7;
	clk += Opcodes::mov_dptr_imm        (aCPU, pc, 0x90,0x03,0xfd);
	clk += Opcodes::mov_a_imm           (aCPU, pc, 0x74,0x80,0x00);
	clk += Opcodes::movx_indir_dptr_a   (aCPU, pc, 0xf0,0x00,0x00);
	clk += Opcodes::mov_dptr_imm        (aCPU, pc, 0x90,0x03,0xfe);
	clk += Opcodes::mov_a_imm           (aCPU, pc, 0x74,0x04,0x00);
	clk += Opcodes::movx_indir_dptr_a   (aCPU, pc, 0xf0,0x00,0x00);
	clk += Opcodes::mov_dptr_imm        (aCPU, pc, 0x90,0x03,0xff);
	clk += Opcodes::mov_a_imm           (aCPU, pc, 0x74,0x08,0x00);
	clk += Opcodes::movx_indir_dptr_a   (aCPU, pc, 0xf0,0x00,0x00);
	clk += Opcodes::clr_a               (aCPU, pc, 0xe4,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x28,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x29,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x2a,0x00);
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1cd2(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1cd2;
	clk += Opcodes::mov_dptr_imm        (aCPU, pc, 0x90,0x03,0xff);
	clk += Opcodes::clr_a               (aCPU, pc, 0xe4,0x00,0x00);
	clk += Opcodes::movx_indir_dptr_a   (aCPU, pc, 0xf0,0x00,0x00);
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1cd8(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1cd8;
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0x28,0x84);
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0x29,0x85);
	clk += Opcodes::clr_a               (aCPU, pc, 0xe4,0x00,0x00);
	clk += Opcodes::movc_a_indir_a_dptr (aCPU, pc, 0x93,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xf9,0x00,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::clr_a               (aCPU, pc, 0xe4,0x00,0x00);
	clk += Opcodes::movc_a_indir_a_dptr (aCPU, pc, 0x93,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfa,0x00,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::clr_a               (aCPU, pc, 0xe4,0x00,0x00);
	clk += Opcodes::movc_a_indir_a_dptr (aCPU, pc, 0x93,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfb,0x00,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1cea(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1cea;
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x89,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1cec(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1cec;
	clk += Opcodes::clr_a               (aCPU, pc, 0xe4,0x00,0x00);
	clk += Opcodes::movc_a_indir_a_dptr (aCPU, pc, 0x93,0x00,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::clr_c               (aCPU, pc, 0xc3,0x00,0x00);
	clk += Opcodes::rlc_a               (aCPU, pc, 0x33,0x00,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x92,0x01);
	clk += Opcodes::movx_indir_dptr_a   (aCPU, pc, 0xf0,0x00,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xeb,0x00,0x00);
	clk += Opcodes::inc_a               (aCPU, pc, 0x04,0x00,0x00);
	clk += Opcodes::jz_offset           (aCPU, pc, 0x60,0x0e,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1cfa(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1cfa;
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xeb,0x00,0x00);
	clk += Opcodes::rlc_a               (aCPU, pc, 0x33,0x00,0x00);
	clk += Opcodes::rl_a                (aCPU, pc, 0x23,0x00,0x00);
	clk += Opcodes::xrl_a_mem           (aCPU, pc, 0x65,0x2a,0x00);
	clk += Opcodes::movx_indir_dptr_a   (aCPU, pc, 0xf0,0x00,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x92,0x00);
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xd8,0xe6,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1d06(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1d06;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x14,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1d08(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1d08;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x92,0x00);
	clk += Opcodes::clr_a               (aCPU, pc, 0xe4,0x00,0x00);
	clk += Opcodes::movc_a_indir_a_dptr (aCPU, pc, 0x93,0x00,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x92,0x01);
	clk += Opcodes::rlc_a               (aCPU, pc, 0x33,0x00,0x00);
	clk += Opcodes::rl_a                (aCPU, pc, 0x23,0x00,0x00);
	clk += Opcodes::xrl_a_mem           (aCPU, pc, 0x65,0x2a,0x00);
	clk += Opcodes::movx_indir_dptr_a   (aCPU, pc, 0xf0,0x00,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x92,0x00);
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xd8,0xd0,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1d1c(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1d1c;
	clk += Opcodes::clr_c               (aCPU, pc, 0xc3,0x00,0x00);
	clk += Opcodes::mov_a_imm           (aCPU, pc, 0x74,0x12,0x00);
	clk += Opcodes::subb_a_rx           (aCPU, pc, 0x99,0x00,0x00);
	clk += Opcodes::rl_a                (aCPU, pc, 0x23,0x00,0x00);
	clk += Opcodes::add_a_mem           (aCPU, pc, 0x25,0x84,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x84,0x00);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x85,0x00);
	clk += Opcodes::addc_a_imm          (aCPU, pc, 0x34,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x85,0x00);
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xda,0xbd,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1d2d(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1d2d;
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0x84,0x28);
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0x85,0x29);
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1d34(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1d34;
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0x28,0x84);
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0x29,0x85);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1d3a(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1d3a;
	clk += Opcodes::clr_a               (aCPU, pc, 0xe4,0x00,0x00);
	clk += Opcodes::movc_a_indir_a_dptr (aCPU, pc, 0x93,0x00,0x00);
	clk += Opcodes::jz_offset           (aCPU, pc, 0x60,0x15,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1d3e(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1d3e;
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0xe0,0x00);
	clk += Opcodes::clr_c               (aCPU, pc, 0xc3,0x00,0x00);
	clk += Opcodes::rlc_a               (aCPU, pc, 0x33,0x00,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x92,0x01);
	clk += Opcodes::movx_indir_dptr_a   (aCPU, pc, 0xf0,0x00,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x2a,0x00);
	clk += Opcodes::addc_a_imm          (aCPU, pc, 0x34,0x00,0x00);
	clk += Opcodes::movx_indir_dptr_a   (aCPU, pc, 0xf0,0x00,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x92,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0xe7,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1d53(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1d53;
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0x84,0x28);
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0x85,0x29);
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1d5a(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1d5a;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x82,0x00);
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0x28,0x82);
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0x29,0x83);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xf8,0x00,0x00);
	clk += Opcodes::swap_a              (aCPU, pc, 0xc4,0x00,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x79,0x02,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1d66(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1d66;
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0x0f,0x00);
	clk += Opcodes::clr_bitaddr         (aCPU, pc, 0xc2,0xd6,0x00);
	clk += Opcodes::clr_c               (aCPU, pc, 0xc3,0x00,0x00);
	clk += Opcodes::da_a                (aCPU, pc, 0xd4,0x00,0x00);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xe4,0x01);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1d6f(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1d6f;
	clk += Opcodes::inc_a               (aCPU, pc, 0x04,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1d70(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1d70;
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0x10,0x00);
	clk += Opcodes::rl_a                (aCPU, pc, 0x23,0x00,0x00);
	clk += Opcodes::movx_indir_dptr_a   (aCPU, pc, 0xf0,0x00,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x2a,0x00);
	clk += Opcodes::movx_indir_dptr_a   (aCPU, pc, 0xf0,0x00,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xe8,0x00,0x00);
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xd9,0xea,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1d7c(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1d7c;
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0x82,0x28);
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0x83,0x29);
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1d83(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1d83;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x1c,0xa6);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1d86(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1d86;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x28,0xb2);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x29,0x01);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x2a,0x40);
	clk += Opcodes::mov_dptr_imm        (aCPU, pc, 0x90,0x1e,0x91);
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x1d,0x34);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1d95(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1d95;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x2a,0x20);
	clk += Opcodes::mov_dptr_imm        (aCPU, pc, 0x90,0x1e,0x99);
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x1d,0x34);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1d9e(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1d9e;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x28,0xb6);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x29,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x2a,0x00);
	clk += Opcodes::mov_dptr_imm        (aCPU, pc, 0x90,0x2e,0x67);
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x1c,0xd8);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1dad(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1dad;
	clk += Opcodes::clr_a               (aCPU, pc, 0xe4,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x28,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x29,0x00);
	clk += Opcodes::mov_dptr_imm        (aCPU, pc, 0x90,0x2e,0x55);
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x1c,0xd8);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1db8(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1db8;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x28,0x26);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x29,0x00);
	clk += Opcodes::mov_dptr_imm        (aCPU, pc, 0x90,0x2e,0x19);
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x1c,0xd8);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1dc4(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1dc4;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x28,0x18);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x29,0x00);
	clk += Opcodes::mov_dptr_imm        (aCPU, pc, 0x90,0x2e,0x46);
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x1c,0xd8);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1dd0(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1dd0;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x28,0x18);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x29,0x00);
	clk += Opcodes::mov_dptr_imm        (aCPU, pc, 0x90,0x2e,0x1f);
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x1c,0xd8);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1ddc(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1ddc;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x28,0x38);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x29,0x02);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x2a,0x50);
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x13,0x24);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1de8(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1de8;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x1d,0x5a);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1deb(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1deb;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x01,0x10);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1dee(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1dee;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x1c,0xd2);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2000(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2000;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x92,0x01);
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x80,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x3d);
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x80,0x00);
	clk += Opcodes::dec_mem             (aCPU, pc, 0x15,0x84,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x3b);
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xec,0x00,0x00);
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2014(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2014;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x92,0x01);
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x80,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x3d);
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x80,0x00);
	clk += Opcodes::dec_mem             (aCPU, pc, 0x15,0x84,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x3b);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8c,0x80,0x00);
	clk += Opcodes::mov_a_imm           (aCPU, pc, 0x74,0x4f,0x00);
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_202b(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x202b;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_202d(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x202d;
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0x04,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x80,0x00);
	clk += Opcodes::mov_a_imm           (aCPU, pc, 0x74,0x4f,0x00);
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2034(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2034;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2036(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2036;
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0x08,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x80,0x00);
	clk += Opcodes::mov_a_imm           (aCPU, pc, 0x74,0x4f,0x00);
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_203d(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x203d;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_203f(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x203f;
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0x0c,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x80,0x00);
	clk += Opcodes::mov_a_imm           (aCPU, pc, 0x74,0x4f,0x00);
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2046(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2046;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2048(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2048;
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0x10,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x80,0x00);
	clk += Opcodes::mov_a_imm           (aCPU, pc, 0x74,0x4f,0x00);
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_204f(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x204f;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2051(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2051;
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0x14,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x80,0x00);
	clk += Opcodes::mov_a_imm           (aCPU, pc, 0x74,0x4f,0x00);
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2058(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2058;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_205a(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x205a;
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0x18,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x80,0x00);
	clk += Opcodes::mov_a_imm           (aCPU, pc, 0x74,0x4f,0x00);
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2061(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2061;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2063(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2063;
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0x1c,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x80,0x00);
	clk += Opcodes::mov_a_imm           (aCPU, pc, 0x74,0x4f,0x00);
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_206a(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x206a;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x92,0x00);
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x80,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x3d);
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x80,0x00);
	clk += Opcodes::dec_mem             (aCPU, pc, 0x15,0x82,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x3b);
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xeb,0x00,0x00);
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_207e(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x207e;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x92,0x00);
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x80,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x3d);
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x80,0x00);
	clk += Opcodes::dec_mem             (aCPU, pc, 0x15,0x82,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x3b);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8b,0x80,0x00);
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2093(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2093;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x6a,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2095(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2095;
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0x04,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x80,0x00);
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_209a(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x209a;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x6a,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_209c(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x209c;
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0x08,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x80,0x00);
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_20a1(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x20a1;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x6a,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_20a3(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x20a3;
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0x0c,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x80,0x00);
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_20a8(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x20a8;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x6a,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_20aa(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x20aa;
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0x10,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x80,0x00);
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_20af(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x20af;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x6a,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_20b1(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x20b1;
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0x14,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x80,0x00);
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_20b6(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x20b6;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x6a,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_20b8(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x20b8;
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0x18,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x80,0x00);
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_20bd(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x20bd;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x6a,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_20bf(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x20bf;
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0x1c,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x80,0x00);
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_20c4(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x20c4;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_20cc(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x20cc;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_20d4(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x20d4;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_20dc(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x20dc;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_20e4(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x20e4;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_20ec(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x20ec;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_20f4(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x20f4;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_20fc(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x20fc;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_20fe(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x20fe;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2100(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2100;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2102(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2102;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2105(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2105;
	clk += Opcodes::jb_bitaddr_offset   (aCPU, pc, 0x20,0xf0,0x26);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2108(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2108;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xc4,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_210a(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x210a;
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0xf0,0xe9);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xef,0x21);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xd9,0x03,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2114(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2114;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x01,0x69);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2117(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2117;
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x80,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x3d);
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x80,0x00);
	clk += Opcodes::dec_mem             (aCPU, pc, 0x15,0x82,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x3b);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8b,0x80,0x00);
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0xe9,0xf0);
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xdd,0xd8,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_212d(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x212d;
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_212e(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x212e;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x14,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2130(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2130;
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0xa0,0x14);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2133(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2133;
	clk += Opcodes::orl_mem_imm         (aCPU, pc, 0x43,0x80,0x02);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xa6,0x06);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2139(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2139;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x7e,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_213b(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x213b;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xc4,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_213d(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x213d;
	clk += Opcodes::ajmp_offset         (aCPU, pc, 0x41,0x31,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_213f(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x213f;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x7e,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2141(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2141;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xfc,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2143(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2143;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x2b,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2145(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2145;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x08,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2147(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2147;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_214f(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x214f;
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0xa0,0x14);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2152(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2152;
	clk += Opcodes::orl_mem_imm         (aCPU, pc, 0x43,0x80,0x02);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xa6,0x06);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2158(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2158;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x93,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_215a(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x215a;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xcc,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_215c(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x215c;
	clk += Opcodes::ajmp_offset         (aCPU, pc, 0x41,0x31,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_215e(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x215e;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x93,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2160(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2160;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xfc,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2162(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2162;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x34,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2164(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2164;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x08,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2166(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2166;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_216e(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x216e;
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0xa0,0x14);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2171(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2171;
	clk += Opcodes::orl_mem_imm         (aCPU, pc, 0x43,0x80,0x02);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xa6,0x06);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2177(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2177;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x9a,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2179(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2179;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xd4,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_217b(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x217b;
	clk += Opcodes::ajmp_offset         (aCPU, pc, 0x41,0x31,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_217d(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x217d;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x9a,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_217f(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x217f;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xfc,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2181(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2181;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x3d,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2183(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2183;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x08,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2185(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2185;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_218d(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x218d;
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0xa0,0x14);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2190(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2190;
	clk += Opcodes::orl_mem_imm         (aCPU, pc, 0x43,0x80,0x02);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xa6,0x06);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2196(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2196;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xa1,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2198(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2198;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xdc,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_219a(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x219a;
	clk += Opcodes::ajmp_offset         (aCPU, pc, 0x41,0x31,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_219c(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x219c;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xa1,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_219e(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x219e;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xfc,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_21a0(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x21a0;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x46,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_21a2(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x21a2;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x08,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_21a4(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x21a4;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_21ac(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x21ac;
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0xa0,0x14);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_21af(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x21af;
	clk += Opcodes::orl_mem_imm         (aCPU, pc, 0x43,0x80,0x02);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xa6,0x06);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_21b5(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x21b5;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xa8,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_21b7(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x21b7;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xe4,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_21b9(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x21b9;
	clk += Opcodes::ajmp_offset         (aCPU, pc, 0x41,0x31,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_21bb(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x21bb;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xa8,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_21bd(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x21bd;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xfc,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_21bf(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x21bf;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x4f,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_21c1(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x21c1;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x08,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_21c3(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x21c3;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_21cb(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x21cb;
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0xa0,0x14);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_21ce(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x21ce;
	clk += Opcodes::orl_mem_imm         (aCPU, pc, 0x43,0x80,0x02);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xa6,0x06);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_21d4(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x21d4;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xaf,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_21d6(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x21d6;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xec,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_21d8(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x21d8;
	clk += Opcodes::ajmp_offset         (aCPU, pc, 0x41,0x31,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_21da(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x21da;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xaf,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_21dc(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x21dc;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xfc,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_21de(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x21de;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x58,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_21e0(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x21e0;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x08,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_21e2(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x21e2;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_21ea(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x21ea;
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0xa0,0x14);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_21ed(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x21ed;
	clk += Opcodes::orl_mem_imm         (aCPU, pc, 0x43,0x80,0x02);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xa6,0x06);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_21f3(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x21f3;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xb6,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_21f5(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x21f5;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xf4,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_21f7(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x21f7;
	clk += Opcodes::ajmp_offset         (aCPU, pc, 0x41,0x31,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_21f9(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x21f9;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xb6,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_21fb(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x21fb;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xfc,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_21fd(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x21fd;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x61,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_21ff(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x21ff;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x08,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2201(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2201;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2209(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2209;
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0xa0,0x14);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_220c(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x220c;
	clk += Opcodes::orl_mem_imm         (aCPU, pc, 0x43,0x80,0x02);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xa6,0x06);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2212(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2212;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xbd,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2214(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2214;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xfc,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2216(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2216;
	clk += Opcodes::ajmp_offset         (aCPU, pc, 0x41,0x31,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2218(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2218;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xbd,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_221a(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x221a;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xfc,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_221c(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x221c;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x14,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_221e(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x221e;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x08,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2220(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2220;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2228(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2228;
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::anl_mem_imm         (aCPU, pc, 0x53,0x85,0x03);
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x7e,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_222f(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x222f;
	clk += Opcodes::ajmp_offset         (aCPU, pc, 0x21,0x0a,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2231(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2231;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x92,0x01);
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0xf2,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2236(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2236;
	clk += Opcodes::jb_bitaddr_offset   (aCPU, pc, 0x20,0xf0,0x34);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2239(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2239;
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0xf0,0xe9);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xef,0x21);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0xe9,0xf0);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xf0,0x03);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_224d(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x224d;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x22,0x71);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2250(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2250;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xcc,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2252(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2252;
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xd9,0x03,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2256(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2256;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x01,0x69);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2259(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2259;
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x80,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x3d);
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x80,0x00);
	clk += Opcodes::dec_mem             (aCPU, pc, 0x15,0x82,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x3b);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8b,0x80,0x00);
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xdd,0xcd,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_226c(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x226c;
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_226d(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x226d;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x61,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_226f(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x226f;
	clk += Opcodes::ajmp_offset         (aCPU, pc, 0x61,0x2c,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2271(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2271;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x14,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2273(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2273;
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0xa0,0x14);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2276(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2276;
	clk += Opcodes::orl_mem_imm         (aCPU, pc, 0x43,0x80,0x02);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xa6,0x06);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_227c(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x227c;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x93,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_227e(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x227e;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xcc,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2280(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2280;
	clk += Opcodes::ajmp_offset         (aCPU, pc, 0x61,0x57,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2282(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2282;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x93,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2284(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2284;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xfc,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2286(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2286;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x2b,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2288(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2288;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x08,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_228a(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x228a;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2292(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2292;
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0xa0,0x08);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2295(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2295;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x9a,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2297(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2297;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xfc,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2299(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2299;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x34,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_229b(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x229b;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x08,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_229d(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x229d;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_22a5(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x22a5;
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0xa0,0x14);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_22a8(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x22a8;
	clk += Opcodes::orl_mem_imm         (aCPU, pc, 0x43,0x80,0x02);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xa6,0x06);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_22ae(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x22ae;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xa1,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_22b0(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x22b0;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xdc,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_22b2(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x22b2;
	clk += Opcodes::ajmp_offset         (aCPU, pc, 0x61,0x57,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_22b4(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x22b4;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xa1,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_22b6(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x22b6;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xfc,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_22b8(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x22b8;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x3d,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_22ba(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x22ba;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x08,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_22bc(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x22bc;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_22c4(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x22c4;
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0xa0,0x08);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_22c7(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x22c7;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xa8,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_22c9(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x22c9;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xfc,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_22cb(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x22cb;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x46,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_22cd(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x22cd;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x08,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_22cf(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x22cf;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_22d7(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x22d7;
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0xa0,0x14);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_22da(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x22da;
	clk += Opcodes::orl_mem_imm         (aCPU, pc, 0x43,0x80,0x02);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xa6,0x06);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_22e0(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x22e0;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xaf,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_22e2(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x22e2;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xec,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_22e4(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x22e4;
	clk += Opcodes::ajmp_offset         (aCPU, pc, 0x61,0x57,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_22e6(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x22e6;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xaf,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_22e8(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x22e8;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xfc,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_22ea(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x22ea;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x4f,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_22ec(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x22ec;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x08,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_22ee(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x22ee;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_22f6(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x22f6;
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0xa0,0x08);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_22f9(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x22f9;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xb6,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_22fb(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x22fb;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xfc,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_22fd(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x22fd;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x58,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_22ff(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x22ff;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x08,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2301(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2301;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2309(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2309;
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0xa0,0x08);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_230c(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x230c;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xbd,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_230e(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x230e;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xfc,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2310(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2310;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x61,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2312(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2312;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x08,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2314(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2314;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_231c(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x231c;
	clk += Opcodes::dec_mem             (aCPU, pc, 0x15,0x92,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x92,0x00);
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xd9,0x05,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2324(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2324;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x01,0x69);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2327(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2327;
	clk += Opcodes::mov_a_imm           (aCPU, pc, 0x74,0x4f,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2329(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2329;
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xdd,0x01,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_232b(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x232b;
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_232c(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x232c;
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0xa0,0x08);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_232f(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x232f;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x7e,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2331(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2331;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xfc,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2333(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2333;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x14,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2335(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2335;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x08,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2337(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2337;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_233f(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x233f;
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0xf0,0xe9);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xef,0x21);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::anl_mem_imm         (aCPU, pc, 0x53,0x85,0x03);
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0xe9,0xf0);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xf0,0x03);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2350(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2350;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x22,0x71);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2353(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2353;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x93,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2355(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2355;
	clk += Opcodes::ajmp_offset         (aCPU, pc, 0x41,0x50,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2357(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2357;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x61,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2359(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2359;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0xc1,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_235b(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x235b;
	clk += Opcodes::jb_bitaddr_offset   (aCPU, pc, 0x20,0xf0,0x2e);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_235e(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x235e;
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0xf0,0xe9);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xef,0x21);
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xf4,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2366(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2366;
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0xe9,0xf0);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xf0,0x03);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_236c(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x236c;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x23,0x90);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_236f(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x236f;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xd4,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2371(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2371;
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xd9,0x03,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2375(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2375;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x01,0x69);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2378(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2378;
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x80,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x3d);
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x80,0x00);
	clk += Opcodes::dec_mem             (aCPU, pc, 0x15,0x82,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x3b);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8b,0x80,0x00);
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xdd,0xd3,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_238b(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x238b;
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_238c(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x238c;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x58,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_238e(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x238e;
	clk += Opcodes::ajmp_offset         (aCPU, pc, 0x81,0x38,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2390(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2390;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x14,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2392(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2392;
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0xa0,0x14);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2395(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2395;
	clk += Opcodes::orl_mem_imm         (aCPU, pc, 0x43,0x80,0x02);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xa6,0x06);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_239b(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x239b;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x9a,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_239d(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x239d;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xd4,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_239f(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x239f;
	clk += Opcodes::ajmp_offset         (aCPU, pc, 0x81,0x82,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_23a1(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x23a1;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x9a,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_23a3(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x23a3;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xfc,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_23a5(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x23a5;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x2b,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_23a7(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x23a7;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x08,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_23a9(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x23a9;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_23b1(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x23b1;
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0xa0,0x08);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_23b4(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x23b4;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xa1,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_23b6(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x23b6;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xfc,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_23b8(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x23b8;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x34,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_23ba(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x23ba;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x08,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_23bc(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x23bc;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_23c4(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x23c4;
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0xa0,0x14);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_23c7(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x23c7;
	clk += Opcodes::orl_mem_imm         (aCPU, pc, 0x43,0x80,0x02);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xa6,0x06);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_23cd(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x23cd;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xa8,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_23cf(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x23cf;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xe4,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_23d1(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x23d1;
	clk += Opcodes::ajmp_offset         (aCPU, pc, 0x81,0x82,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_23d3(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x23d3;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xa8,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_23d5(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x23d5;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xfc,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_23d7(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x23d7;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x3d,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_23d9(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x23d9;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x08,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_23db(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x23db;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_23e3(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x23e3;
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0xa0,0x08);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_23e6(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x23e6;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xaf,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_23e8(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x23e8;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xfc,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_23ea(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x23ea;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x46,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_23ec(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x23ec;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x08,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_23ee(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x23ee;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_23f6(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x23f6;
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0xa0,0x14);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_23f9(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x23f9;
	clk += Opcodes::orl_mem_imm         (aCPU, pc, 0x43,0x80,0x02);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xa6,0x06);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_23ff(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x23ff;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xb6,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2401(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2401;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xf4,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2403(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2403;
	clk += Opcodes::ajmp_offset         (aCPU, pc, 0x81,0x82,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2405(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2405;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xb6,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2407(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2407;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xfc,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2409(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2409;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x4f,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_240b(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x240b;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x08,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_240d(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x240d;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2415(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2415;
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0xa0,0x08);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2418(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2418;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xbd,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_241a(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x241a;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xfc,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_241c(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x241c;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x58,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_241e(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x241e;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x08,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2420(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2420;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2428(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2428;
	clk += Opcodes::dec_mem             (aCPU, pc, 0x15,0x92,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x92,0x00);
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xd9,0x05,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2430(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2430;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x01,0x69);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2433(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2433;
	clk += Opcodes::mov_a_imm           (aCPU, pc, 0x74,0x4f,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2435(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2435;
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xdd,0x01,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2437(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2437;
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2438(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2438;
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0xa0,0x14);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_243b(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x243b;
	clk += Opcodes::orl_mem_imm         (aCPU, pc, 0x43,0x80,0x02);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xa6,0x06);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2441(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2441;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x7e,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2443(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2443;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xf4,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2445(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2445;
	clk += Opcodes::ajmp_offset         (aCPU, pc, 0x81,0x86,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2447(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2447;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x7e,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2449(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2449;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xfc,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_244b(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x244b;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x61,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_244d(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x244d;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x08,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_244f(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x244f;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2457(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2457;
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0xa0,0x08);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_245a(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x245a;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x93,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_245c(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x245c;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xfc,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_245e(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x245e;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x14,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2460(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2460;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x08,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2462(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2462;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_246a(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x246a;
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0xf0,0xe9);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xef,0x21);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::anl_mem_imm         (aCPU, pc, 0x53,0x85,0x03);
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0xe9,0xf0);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xf0,0x03);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_247b(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x247b;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x23,0x90);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_247e(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x247e;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x9a,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2480(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2480;
	clk += Opcodes::ajmp_offset         (aCPU, pc, 0x61,0x6f,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2482(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2482;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x58,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2484(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2484;
	clk += Opcodes::ajmp_offset         (aCPU, pc, 0x81,0x28,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2486(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2486;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x14,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2488(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2488;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0xe0,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_248a(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x248a;
	clk += Opcodes::jb_bitaddr_offset   (aCPU, pc, 0x20,0xf0,0x2e);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_248d(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x248d;
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0xf0,0xe9);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xef,0x21);
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xec,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2495(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2495;
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0xe9,0xf0);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xf0,0x03);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_249b(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x249b;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x24,0xbf);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_249e(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x249e;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xdc,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_24a0(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x24a0;
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xd9,0x03,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_24a4(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x24a4;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x01,0x69);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_24a7(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x24a7;
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x80,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x3d);
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x80,0x00);
	clk += Opcodes::dec_mem             (aCPU, pc, 0x15,0x82,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x3b);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8b,0x80,0x00);
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xdd,0xd3,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_24ba(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x24ba;
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_24bb(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x24bb;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x4f,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_24bd(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x24bd;
	clk += Opcodes::ajmp_offset         (aCPU, pc, 0xa1,0x48,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_24bf(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x24bf;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x14,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_24c1(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x24c1;
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0xa0,0x14);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_24c4(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x24c4;
	clk += Opcodes::orl_mem_imm         (aCPU, pc, 0x43,0x80,0x02);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xa6,0x06);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_24ca(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x24ca;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xa1,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_24cc(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x24cc;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xdc,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_24ce(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x24ce;
	clk += Opcodes::ajmp_offset         (aCPU, pc, 0xa1,0xa5,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_24d0(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x24d0;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xa1,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_24d2(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x24d2;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xfc,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_24d4(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x24d4;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x2b,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_24d6(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x24d6;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x08,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_24d8(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x24d8;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_24e0(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x24e0;
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0xa0,0x08);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_24e3(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x24e3;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xa8,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_24e5(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x24e5;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xfc,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_24e7(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x24e7;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x34,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_24e9(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x24e9;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x08,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_24eb(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x24eb;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_24f3(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x24f3;
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0xa0,0x14);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_24f6(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x24f6;
	clk += Opcodes::orl_mem_imm         (aCPU, pc, 0x43,0x80,0x02);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xa6,0x06);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_24fc(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x24fc;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xaf,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_24fe(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x24fe;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xec,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2500(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2500;
	clk += Opcodes::ajmp_offset         (aCPU, pc, 0xa1,0xa5,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2502(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2502;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xaf,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2504(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2504;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xfc,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2506(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2506;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x3d,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2508(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2508;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x08,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_250a(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x250a;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2512(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2512;
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0xa0,0x08);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2515(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2515;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xb6,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2517(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2517;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xfc,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2519(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2519;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x46,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_251b(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x251b;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x08,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_251d(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x251d;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2525(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2525;
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0xa0,0x08);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2528(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2528;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xbd,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_252a(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x252a;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xfc,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_252c(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x252c;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x4f,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_252e(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x252e;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x08,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2530(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2530;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2538(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2538;
	clk += Opcodes::dec_mem             (aCPU, pc, 0x15,0x92,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x92,0x00);
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xd9,0x05,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2540(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2540;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x01,0x69);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2543(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2543;
	clk += Opcodes::mov_a_imm           (aCPU, pc, 0x74,0x4f,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2545(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2545;
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xdd,0x01,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2547(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2547;
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2548(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2548;
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0xa0,0x14);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_254b(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x254b;
	clk += Opcodes::orl_mem_imm         (aCPU, pc, 0x43,0x80,0x02);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xa6,0x06);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2551(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2551;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x7e,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2553(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2553;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xec,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2555(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2555;
	clk += Opcodes::ajmp_offset         (aCPU, pc, 0xa1,0xa9,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2557(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2557;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x7e,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2559(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2559;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xfc,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_255b(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x255b;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x58,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_255d(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x255d;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x08,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_255f(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x255f;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2567(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2567;
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0xa0,0x08);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_256a(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x256a;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x93,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_256c(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x256c;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xfc,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_256e(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x256e;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x61,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2570(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2570;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x08,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2572(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2572;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_257a(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x257a;
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0xa0,0x08);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_257d(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x257d;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x9a,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_257f(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x257f;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xfc,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2581(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2581;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x14,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2583(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2583;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x08,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2585(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2585;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_258d(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x258d;
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0xf0,0xe9);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xef,0x21);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::anl_mem_imm         (aCPU, pc, 0x53,0x85,0x03);
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0xe9,0xf0);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xf0,0x03);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_259e(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x259e;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x24,0xbf);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_25a1(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x25a1;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xa1,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_25a3(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x25a3;
	clk += Opcodes::ajmp_offset         (aCPU, pc, 0x81,0x9e,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_25a5(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x25a5;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x4f,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_25a7(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x25a7;
	clk += Opcodes::ajmp_offset         (aCPU, pc, 0xa1,0x38,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_25a9(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x25a9;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x14,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_25ab(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x25ab;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0xe0,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_25ad(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x25ad;
	clk += Opcodes::jb_bitaddr_offset   (aCPU, pc, 0x20,0xf0,0x2e);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_25b0(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x25b0;
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0xf0,0xe9);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xef,0x21);
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xe4,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_25b8(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x25b8;
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0xe9,0xf0);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xf0,0x03);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_25be(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x25be;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x25,0xe2);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_25c1(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x25c1;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xe4,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_25c3(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x25c3;
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xd9,0x03,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_25c7(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x25c7;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x01,0x69);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_25ca(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x25ca;
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x80,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x3d);
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x80,0x00);
	clk += Opcodes::dec_mem             (aCPU, pc, 0x15,0x82,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x3b);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8b,0x80,0x00);
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xdd,0xd3,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_25dd(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x25dd;
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_25de(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x25de;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x46,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_25e0(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x25e0;
	clk += Opcodes::ajmp_offset         (aCPU, pc, 0xc1,0x58,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_25e2(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x25e2;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x14,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_25e4(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x25e4;
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0xa0,0x14);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_25e7(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x25e7;
	clk += Opcodes::orl_mem_imm         (aCPU, pc, 0x43,0x80,0x02);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xa6,0x06);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_25ed(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x25ed;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xa8,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_25ef(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x25ef;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xe4,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_25f1(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x25f1;
	clk += Opcodes::ajmp_offset         (aCPU, pc, 0xc1,0xd4,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_25f3(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x25f3;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xa8,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_25f5(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x25f5;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xfc,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_25f7(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x25f7;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x2b,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_25f9(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x25f9;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x08,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_25fb(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x25fb;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2603(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2603;
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0xa0,0x08);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2606(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2606;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xaf,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2608(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2608;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xfc,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_260a(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x260a;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x34,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_260c(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x260c;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x08,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_260e(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x260e;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2616(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2616;
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0xa0,0x14);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2619(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2619;
	clk += Opcodes::orl_mem_imm         (aCPU, pc, 0x43,0x80,0x02);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xa6,0x06);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_261f(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x261f;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xb6,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2621(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2621;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xf4,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2623(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2623;
	clk += Opcodes::ajmp_offset         (aCPU, pc, 0xc1,0xd4,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2625(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2625;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xb6,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2627(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2627;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xfc,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2629(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2629;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x3d,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_262b(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x262b;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x08,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_262d(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x262d;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2635(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2635;
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0xa0,0x08);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2638(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2638;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xbd,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_263a(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x263a;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xfc,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_263c(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x263c;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x46,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_263e(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x263e;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x08,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2640(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2640;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2648(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2648;
	clk += Opcodes::dec_mem             (aCPU, pc, 0x15,0x92,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x92,0x00);
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xd9,0x05,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2650(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2650;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x01,0x69);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2653(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2653;
	clk += Opcodes::mov_a_imm           (aCPU, pc, 0x74,0x4f,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2655(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2655;
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xdd,0x01,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2657(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2657;
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2658(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2658;
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0xa0,0x14);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_265b(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x265b;
	clk += Opcodes::orl_mem_imm         (aCPU, pc, 0x43,0x80,0x02);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xa6,0x06);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2661(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2661;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x7e,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2663(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2663;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xe4,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2665(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2665;
	clk += Opcodes::ajmp_offset         (aCPU, pc, 0xc1,0xd8,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2667(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2667;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x7e,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2669(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2669;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xfc,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_266b(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x266b;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x4f,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_266d(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x266d;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x08,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_266f(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x266f;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2677(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2677;
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0xa0,0x08);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_267a(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x267a;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x93,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_267c(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x267c;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xfc,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_267e(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x267e;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x58,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2680(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2680;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x08,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2682(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2682;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_268a(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x268a;
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0xa0,0x14);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_268d(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x268d;
	clk += Opcodes::orl_mem_imm         (aCPU, pc, 0x43,0x80,0x02);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xa6,0x06);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2693(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2693;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x9a,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2695(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2695;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xf4,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2697(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2697;
	clk += Opcodes::ajmp_offset         (aCPU, pc, 0xc1,0xd8,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2699(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2699;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x9a,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_269b(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x269b;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xfc,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_269d(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x269d;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x61,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_269f(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x269f;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x08,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_26a1(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x26a1;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_26a9(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x26a9;
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0xa0,0x08);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_26ac(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x26ac;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xa1,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_26ae(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x26ae;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xfc,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_26b0(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x26b0;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x14,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_26b2(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x26b2;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x08,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_26b4(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x26b4;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_26bc(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x26bc;
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0xf0,0xe9);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xef,0x21);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::anl_mem_imm         (aCPU, pc, 0x53,0x85,0x03);
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0xe9,0xf0);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xf0,0x03);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_26cd(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x26cd;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x25,0xe2);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_26d0(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x26d0;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xa8,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_26d2(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x26d2;
	clk += Opcodes::ajmp_offset         (aCPU, pc, 0xa1,0xc1,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_26d4(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x26d4;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x46,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_26d6(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x26d6;
	clk += Opcodes::ajmp_offset         (aCPU, pc, 0xc1,0x48,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_26d8(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x26d8;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x14,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_26da(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x26da;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0xe0,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_26dc(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x26dc;
	clk += Opcodes::jb_bitaddr_offset   (aCPU, pc, 0x20,0xf0,0x2e);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_26df(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x26df;
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0xf0,0xe9);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xef,0x21);
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xdc,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_26e7(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x26e7;
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0xe9,0xf0);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xf0,0x03);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_26ed(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x26ed;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x27,0x11);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_26f0(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x26f0;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xec,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_26f2(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x26f2;
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xd9,0x03,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_26f6(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x26f6;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x01,0x69);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_26f9(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x26f9;
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x80,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x3d);
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x80,0x00);
	clk += Opcodes::dec_mem             (aCPU, pc, 0x15,0x82,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x3b);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8b,0x80,0x00);
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xdd,0xd3,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_270c(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x270c;
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_270d(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x270d;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x3d,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_270f(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x270f;
	clk += Opcodes::ajmp_offset         (aCPU, pc, 0xe1,0x68,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2711(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2711;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x14,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2713(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2713;
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0xa0,0x14);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2716(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2716;
	clk += Opcodes::orl_mem_imm         (aCPU, pc, 0x43,0x80,0x02);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xa6,0x06);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_271c(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x271c;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xaf,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_271e(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x271e;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xec,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2720(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2720;
	clk += Opcodes::ajmp_offset         (aCPU, pc, 0xe1,0xf7,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2722(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2722;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xaf,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2724(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2724;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xfc,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2726(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2726;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x2b,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2728(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2728;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x08,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_272a(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x272a;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2732(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2732;
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0xa0,0x08);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2735(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2735;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xb6,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2737(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2737;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xfc,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2739(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2739;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x34,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_273b(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x273b;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x08,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_273d(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x273d;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2745(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2745;
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0xa0,0x08);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2748(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2748;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xbd,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_274a(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x274a;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xfc,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_274c(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x274c;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x3d,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_274e(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x274e;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x08,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2750(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2750;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2758(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2758;
	clk += Opcodes::dec_mem             (aCPU, pc, 0x15,0x92,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x92,0x00);
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xd9,0x05,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2760(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2760;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x01,0x69);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2763(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2763;
	clk += Opcodes::mov_a_imm           (aCPU, pc, 0x74,0x4f,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2765(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2765;
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xdd,0x01,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2767(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2767;
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2768(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2768;
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0xa0,0x14);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_276b(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x276b;
	clk += Opcodes::orl_mem_imm         (aCPU, pc, 0x43,0x80,0x02);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xa6,0x06);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2771(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2771;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x7e,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2773(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2773;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xdc,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2775(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2775;
	clk += Opcodes::ajmp_offset         (aCPU, pc, 0xe1,0xfb,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2777(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2777;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x7e,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2779(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2779;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xfc,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_277b(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x277b;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x46,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_277d(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x277d;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x08,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_277f(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x277f;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2787(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2787;
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0xa0,0x08);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_278a(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x278a;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x93,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_278c(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x278c;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xfc,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_278e(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x278e;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x4f,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2790(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2790;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x08,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2792(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2792;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_279a(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x279a;
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0xa0,0x14);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_279d(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x279d;
	clk += Opcodes::orl_mem_imm         (aCPU, pc, 0x43,0x80,0x02);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xa6,0x06);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_27a3(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x27a3;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x9a,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_27a5(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x27a5;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xec,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_27a7(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x27a7;
	clk += Opcodes::ajmp_offset         (aCPU, pc, 0xe1,0xfb,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_27a9(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x27a9;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x9a,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_27ab(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x27ab;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xfc,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_27ad(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x27ad;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x58,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_27af(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x27af;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x08,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_27b1(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x27b1;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_27b9(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x27b9;
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0xa0,0x08);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_27bc(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x27bc;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xa1,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_27be(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x27be;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xfc,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_27c0(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x27c0;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x61,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_27c2(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x27c2;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x08,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_27c4(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x27c4;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_27cc(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x27cc;
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0xa0,0x08);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_27cf(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x27cf;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xa8,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_27d1(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x27d1;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xfc,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_27d3(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x27d3;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x14,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_27d5(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x27d5;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x08,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_27d7(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x27d7;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_27df(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x27df;
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0xf0,0xe9);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xef,0x21);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::anl_mem_imm         (aCPU, pc, 0x53,0x85,0x03);
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0xe9,0xf0);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xf0,0x03);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_27f0(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x27f0;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x27,0x11);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_27f3(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x27f3;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xaf,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_27f5(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x27f5;
	clk += Opcodes::ajmp_offset         (aCPU, pc, 0xc1,0xf0,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_27f7(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x27f7;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x3d,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_27f9(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x27f9;
	clk += Opcodes::ajmp_offset         (aCPU, pc, 0xe1,0x58,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_27fb(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x27fb;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x14,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_27fd(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x27fd;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0xe0,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_27ff(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x27ff;
	clk += Opcodes::jb_bitaddr_offset   (aCPU, pc, 0x20,0xf0,0x30);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2802(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2802;
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0xf0,0xe9);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xef,0x21);
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x20,0xd4);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_280b(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x280b;
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0xe9,0xf0);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xf0,0x03);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2811(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2811;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x28,0x38);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2814(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2814;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x20,0xf4);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2817(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2817;
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xd9,0x03,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_281b(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x281b;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x01,0x69);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_281e(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x281e;
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x80,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x3d);
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x80,0x00);
	clk += Opcodes::dec_mem             (aCPU, pc, 0x15,0x82,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x3b);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8b,0x80,0x00);
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xdd,0xd1,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2831(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2831;
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2832(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2832;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x20,0x34);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2835(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2835;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x28,0x86);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2838(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2838;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x20,0x14);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_283b(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x283b;
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0xa0,0x1a);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_283e(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x283e;
	clk += Opcodes::orl_mem_imm         (aCPU, pc, 0x43,0x80,0x02);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xa6,0x09);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2844(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2844;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x20,0xb6);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2847(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2847;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x20,0xf4);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_284a(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x284a;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x29,0x51);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_284d(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x284d;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x20,0xb6);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2850(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2850;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x20,0xfc);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2853(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2853;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x20,0x2b);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2856(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2856;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x08,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2858(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2858;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2860(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2860;
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0xa0,0x0b);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2863(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2863;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x20,0xbd);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2866(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2866;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x20,0xfc);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2869(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2869;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x20,0x34);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_286c(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x286c;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x08,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_286e(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x286e;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2876(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2876;
	clk += Opcodes::dec_mem             (aCPU, pc, 0x15,0x92,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x92,0x00);
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xd9,0x05,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_287e(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x287e;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x01,0x69);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2881(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2881;
	clk += Opcodes::mov_a_imm           (aCPU, pc, 0x74,0x4f,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2883(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2883;
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xdd,0x01,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2885(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2885;
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2886(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2886;
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0xa0,0x1a);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2889(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2889;
	clk += Opcodes::orl_mem_imm         (aCPU, pc, 0x43,0x80,0x02);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xa6,0x09);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_288f(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x288f;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x20,0x7e);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2892(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2892;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x20,0xd4);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2895(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2895;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x29,0x57);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2898(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2898;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x20,0x7e);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_289b(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x289b;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x20,0xfc);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_289e(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x289e;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x20,0x3d);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_28a1(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x28a1;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x08,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_28a3(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x28a3;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_28ab(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x28ab;
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0xa0,0x0b);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_28ae(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x28ae;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x20,0x93);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_28b1(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x28b1;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x20,0xfc);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_28b4(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x28b4;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x20,0x46);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_28b7(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x28b7;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x08,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_28b9(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x28b9;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_28c1(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x28c1;
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0xa0,0x1a);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_28c4(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x28c4;
	clk += Opcodes::orl_mem_imm         (aCPU, pc, 0x43,0x80,0x02);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xa6,0x09);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_28ca(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x28ca;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x20,0x9a);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_28cd(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x28cd;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x20,0xe4);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_28d0(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x28d0;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x29,0x57);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_28d3(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x28d3;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x20,0x9a);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_28d6(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x28d6;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x20,0xfc);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_28d9(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x28d9;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x20,0x4f);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_28dc(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x28dc;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x08,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_28de(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x28de;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_28e6(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x28e6;
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0xa0,0x0b);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_28e9(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x28e9;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x20,0xa1);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_28ec(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x28ec;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x20,0xfc);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_28ef(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x28ef;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x20,0x58);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_28f2(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x28f2;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x08,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_28f4(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x28f4;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_28fc(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x28fc;
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0xa0,0x1a);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_28ff(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x28ff;
	clk += Opcodes::orl_mem_imm         (aCPU, pc, 0x43,0x80,0x02);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xa6,0x09);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2905(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2905;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x20,0xa8);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2908(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2908;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x20,0xf4);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_290b(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x290b;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x29,0x57);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_290e(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x290e;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x20,0xa8);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2911(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2911;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x20,0xfc);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2914(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2914;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x20,0x61);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2917(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2917;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x08,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2919(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2919;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2921(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2921;
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0xa0,0x0b);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2924(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2924;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x20,0xaf);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2927(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2927;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x20,0xfc);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_292a(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x292a;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x20,0x14);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_292d(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x292d;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x08,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_292f(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x292f;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2937(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2937;
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0xf0,0xe9);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xef,0x21);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::anl_mem_imm         (aCPU, pc, 0x53,0x85,0x03);
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0xe9,0xf0);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xf0,0x03);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2948(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2948;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x28,0x38);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_294b(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x294b;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x20,0xb6);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_294e(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x294e;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x28,0x14);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2951(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2951;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x20,0x34);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2954(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2954;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x28,0x76);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2957(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2957;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x20,0x14);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_295a(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x295a;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0xdb,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_295c(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x295c;
	clk += Opcodes::jb_bitaddr_offset   (aCPU, pc, 0x20,0xf0,0x35);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_295f(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x295f;
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0xf0,0xe9);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xef,0x21);
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x20,0xcc);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2968(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2968;
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0xe9,0xf0);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xf0,0x03);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_296e(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x296e;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x29,0x9a);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2971(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2971;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xd9,0x03,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_297d(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x297d;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x01,0x69);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2980(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2980;
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x80,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x3d);
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x80,0x00);
	clk += Opcodes::dec_mem             (aCPU, pc, 0x15,0x82,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x3b);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8b,0x80,0x00);
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xdd,0xcc,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2993(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2993;
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2994(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2994;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x20,0x2b);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2997(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2997;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x29,0xc3);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_299a(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x299a;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x20,0x14);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_299d(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x299d;
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0xa0,0x0b);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_29a0(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x29a0;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x20,0xbd);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_29a3(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x29a3;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x20,0xfc);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_29a6(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x29a6;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x20,0x2b);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_29a9(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x29a9;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x08,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_29ab(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x29ab;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_29b3(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x29b3;
	clk += Opcodes::dec_mem             (aCPU, pc, 0x15,0x92,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x92,0x00);
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xd9,0x05,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_29bb(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x29bb;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x01,0x69);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_29be(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x29be;
	clk += Opcodes::mov_a_imm           (aCPU, pc, 0x74,0x4f,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_29c0(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x29c0;
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xdd,0x01,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_29c2(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x29c2;
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_29c3(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x29c3;
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0xa0,0x1a);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_29c6(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x29c6;
	clk += Opcodes::orl_mem_imm         (aCPU, pc, 0x43,0x80,0x02);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xa6,0x09);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_29cc(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x29cc;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x20,0x7e);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_29cf(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x29cf;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x20,0xcc);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_29d2(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x29d2;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x2a,0xa4);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_29d5(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x29d5;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x20,0x7e);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_29d8(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x29d8;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x20,0xfc);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_29db(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x29db;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x20,0x34);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_29de(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x29de;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x08,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_29e0(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x29e0;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_29e8(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x29e8;
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0xa0,0x0b);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_29eb(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x29eb;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x20,0x93);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_29ee(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x29ee;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x20,0xfc);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_29f1(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x29f1;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x20,0x3d);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_29f4(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x29f4;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x08,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_29f6(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x29f6;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_29fe(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x29fe;
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0xa0,0x1a);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2a01(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2a01;
	clk += Opcodes::orl_mem_imm         (aCPU, pc, 0x43,0x80,0x02);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xa6,0x09);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2a07(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2a07;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x20,0x9a);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2a0a(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2a0a;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x20,0xdc);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2a0d(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2a0d;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x2a,0xa4);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2a10(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2a10;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x20,0x9a);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2a13(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2a13;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x20,0xfc);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2a16(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2a16;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x20,0x46);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2a19(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2a19;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x08,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2a1b(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2a1b;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2a23(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2a23;
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0xa0,0x0b);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2a26(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2a26;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x20,0xa1);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2a29(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2a29;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x20,0xfc);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2a2c(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2a2c;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x20,0x4f);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2a2f(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2a2f;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x08,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2a31(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2a31;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2a39(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2a39;
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0xa0,0x1a);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2a3c(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2a3c;
	clk += Opcodes::orl_mem_imm         (aCPU, pc, 0x43,0x80,0x02);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xa6,0x09);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2a42(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2a42;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x20,0xa8);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2a45(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2a45;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x20,0xec);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2a48(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2a48;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x2a,0xa4);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2a4b(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2a4b;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x20,0xa8);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2a4e(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2a4e;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x20,0xfc);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2a51(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2a51;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x20,0x58);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2a54(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2a54;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x08,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2a56(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2a56;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2a5e(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2a5e;
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0xa0,0x0b);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2a61(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2a61;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x20,0xaf);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2a64(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2a64;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x20,0xfc);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2a67(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2a67;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x20,0x61);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2a6a(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2a6a;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x08,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2a6c(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2a6c;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2a74(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2a74;
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0xa0,0x0b);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2a77(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2a77;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x20,0xb6);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2a7a(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2a7a;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x20,0xfc);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2a7d(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2a7d;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x20,0x14);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2a80(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2a80;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x08,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2a82(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2a82;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2a8a(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2a8a;
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0xf0,0xe9);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xef,0x21);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::anl_mem_imm         (aCPU, pc, 0x53,0x85,0x03);
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0xe9,0xf0);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xf0,0x03);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2a9b(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2a9b;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x29,0x9a);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2a9e(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2a9e;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x20,0xbd);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2aa1(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2aa1;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x29,0x71);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2aa4(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2aa4;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x20,0x14);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2aa7(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2aa7;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0xe1,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2aa9(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2aa9;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x20,0x7e);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2aac(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2aac;
	clk += Opcodes::mov_rx_mem          (aCPU, pc, 0xac,0x32,0x00);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0x05,0x15);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2ab1(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2ab1;
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0x04,0x09);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2ab4(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2ab4;
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0x03,0x03);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2ab7(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2ab7;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x29,0x5c);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2aba(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2aba;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x27,0xff);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2abd(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2abd;
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0x03,0x03);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2ac0(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2ac0;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x26,0xdc);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2ac3(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2ac3;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x25,0xad);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2ac6(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2ac6;
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0x04,0x09);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2ac9(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2ac9;
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0x03,0x03);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2acc(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2acc;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x24,0x8a);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2acf(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2acf;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x23,0x5b);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2ad2(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2ad2;
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0x03,0x03);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2ad5(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2ad5;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x22,0x36);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2ad8(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2ad8;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x21,0x05);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2adb(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2adb;
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xf0,0x06);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2ade(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2ade;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x20,0x14);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2ae1(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2ae1;
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0xa0,0x03);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2ae4(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2ae4;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x20,0x7e);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2ae7(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2ae7;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xeb,0x00,0x00);
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0x04,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfb,0x00,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0x1f,0x00);
	clk += Opcodes::jnz_offset          (aCPU, pc, 0x70,0x0e,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2af7(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2af7;
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xeb,0x00,0x00);
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0xe0,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfb,0x00,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x92,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xd9,0x03,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2b02(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2b02;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x01,0x69);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2b05(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2b05;
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xec,0x00,0x00);
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0x04,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfc,0x00,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0x1f,0x00);
	clk += Opcodes::jnz_offset          (aCPU, pc, 0x70,0x18,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2b0d(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2b0d;
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0xf0,0xe9);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xef,0x21);
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xec,0x00,0x00);
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0xe0,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfc,0x00,0x00);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xf0,0x08);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2b1a(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2b1a;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x92,0x01);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::anl_mem_imm         (aCPU, pc, 0x53,0x85,0x03);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2b22(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2b22;
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0xe9,0xf0);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2b25(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2b25;
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xdd,0xb4,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2b27(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2b27;
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2b28(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2b28;
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0x28,0x82);
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0x29,0x83);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x27,0x00);
	clk += Opcodes::add_a_mem           (aCPU, pc, 0x25,0x25,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfb,0x00,0x00);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x32,0x00);
	clk += Opcodes::add_a_mem           (aCPU, pc, 0x25,0x30,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfc,0x00,0x00);
	clk += Opcodes::mov_rx_mem          (aCPU, pc, 0xa9,0x26,0x00);
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0xe9,0xf0);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x23,0x00);
	clk += Opcodes::jb_bitaddr_offset   (aCPU, pc, 0x20,0xe3,0x18);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2b42(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2b42;
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfd,0x00,0x00);
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x2a,0xdb);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2b46(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2b46;
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7d,0x0f,0x00);
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x2a,0xa9);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2b4b(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2b4b;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x92,0x00);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x32,0x00);
	clk += Opcodes::add_a_mem           (aCPU, pc, 0x25,0x31,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfc,0x00,0x00);
	clk += Opcodes::mov_rx_mem          (aCPU, pc, 0xad,0x24,0x00);
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x2a,0xdb);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2b58(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2b58;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x05,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2b5a(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2b5a;
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7d,0x10,0x00);
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x2a,0xa9);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2b5f(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2b5f;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x92,0x00);
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2b63(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2b63;
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::anl_mem_imm         (aCPU, pc, 0x53,0x06,0x01);
	clk += Opcodes::orl_mem_a           (aCPU, pc, 0x42,0x06,0x00);
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xf8,0x00,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0x06,0x00);
	clk += Opcodes::anl_mem_imm         (aCPU, pc, 0x53,0x07,0xf9);
	clk += Opcodes::orl_mem_a           (aCPU, pc, 0x42,0x07,0x00);
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xd9,0x03,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2b76(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2b76;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x01,0x69);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2b79(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2b79;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x92,0x01);
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xe8,0x00,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0xf0,0x00);
	clk += Opcodes::xrl_a_rx            (aCPU, pc, 0x6b,0x00,0x00);
	clk += Opcodes::jz_offset           (aCPU, pc, 0x60,0x09,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2b82(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2b82;
	clk += Opcodes::xrl_a_rx            (aCPU, pc, 0x6b,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfb,0x00,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xd0,0x10);
	clk += Opcodes::mov_dptr_imm        (aCPU, pc, 0x90,0x2f,0x00);
	clk += Opcodes::jmp_indir_a_dptr    (aCPU, pc, 0x73,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2b8b(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2b8b;
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2b8c(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2b8c;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x2b,0x63);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2b8f(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2b8f;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xd0,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8e,0x84,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8f,0x85,0x00);
	clk += Opcodes::clr_a               (aCPU, pc, 0xe4,0x00,0x00);
	clk += Opcodes::movc_a_indir_a_dptr (aCPU, pc, 0x93,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x11,0x00);
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xe8,0x00,0x00);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xe3,0x67);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2b9e(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2b9e;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x09,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2ba0(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2ba0;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xd0,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x92,0x00);
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xdd,0xe4,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2ba8(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2ba8;
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2ba9(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2ba9;
	clk += Opcodes::mov_a_imm           (aCPU, pc, 0x74,0x02,0x00);
	clk += Opcodes::movc_a_indir_a_dptr (aCPU, pc, 0x93,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfa,0x00,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7c,0x08,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xd0,0x10);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2bb2(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2bb2;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x02,0x00);
	clk += Opcodes::rrc_a               (aCPU, pc, 0x13,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x02,0x00);
	clk += Opcodes::jc_offset           (aCPU, pc, 0x40,0x25,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2bb9(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2bb9;
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xe9,0x00,0x00);
	clk += Opcodes::rrc_a               (aCPU, pc, 0x13,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xf9,0x00,0x00);
	clk += Opcodes::jc_offset           (aCPU, pc, 0x40,0x0f,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2bbe(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2bbe;
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x88,0xa0,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::djnz_mem_offset     (aCPU, pc, 0xd5,0x04,0xe7);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2bcb(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2bcb;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0xd3,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2bcd(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2bcd;
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8b,0xa0,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8a,0xa0,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::djnz_mem_offset     (aCPU, pc, 0xd5,0x04,0xd6);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2bdc(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2bdc;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0xc2,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2bde(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2bde;
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xe9,0x00,0x00);
	clk += Opcodes::rrc_a               (aCPU, pc, 0x13,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xf9,0x00,0x00);
	clk += Opcodes::jc_offset           (aCPU, pc, 0x40,0x11,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2be3(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2be3;
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8d,0xa0,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8c,0xa0,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::djnz_mem_offset     (aCPU, pc, 0xd5,0x04,0xc0);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2bf2(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2bf2;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0xac,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2bf4(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2bf4;
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8f,0xa0,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8e,0xa0,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::djnz_mem_offset     (aCPU, pc, 0xd5,0x04,0xaf);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2c03(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2c03;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x9b,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2c05(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2c05;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xd0,0x10);
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xe9,0x00,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x88,0xa0,0x00);
	clk += Opcodes::jz_offset           (aCPU, pc, 0x60,0x5b,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2c0d(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2c0d;
	clk += Opcodes::rrc_a               (aCPU, pc, 0x13,0x00,0x00);
	clk += Opcodes::jc_offset           (aCPU, pc, 0x40,0x5b,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2c10(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2c10;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::rrc_a               (aCPU, pc, 0x13,0x00,0x00);
	clk += Opcodes::jc_offset           (aCPU, pc, 0x40,0x5f,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2c1b(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2c1b;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::rrc_a               (aCPU, pc, 0x13,0x00,0x00);
	clk += Opcodes::jc_offset           (aCPU, pc, 0x40,0x63,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2c26(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2c26;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::rrc_a               (aCPU, pc, 0x13,0x00,0x00);
	clk += Opcodes::jc_offset           (aCPU, pc, 0x40,0x67,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2c31(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2c31;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::rrc_a               (aCPU, pc, 0x13,0x00,0x00);
	clk += Opcodes::jc_offset           (aCPU, pc, 0x40,0x6b,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2c3c(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2c3c;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::rrc_a               (aCPU, pc, 0x13,0x00,0x00);
	clk += Opcodes::jc_offset           (aCPU, pc, 0x40,0x6f,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2c47(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2c47;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::rrc_a               (aCPU, pc, 0x13,0x00,0x00);
	clk += Opcodes::jc_offset           (aCPU, pc, 0x40,0x73,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2c52(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2c52;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::rrc_a               (aCPU, pc, 0x13,0x00,0x00);
	clk += Opcodes::jc_offset           (aCPU, pc, 0x40,0x77,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2c5d(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2c5d;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x2b,0xa0);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2c68(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2c68;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x2d,0x06);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2c6b(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2c6b;
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8b,0xa0,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8a,0xa0,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::rrc_a               (aCPU, pc, 0x13,0x00,0x00);
	clk += Opcodes::jnc_offset          (aCPU, pc, 0x50,0x69,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2c7a(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2c7a;
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8b,0xa0,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8a,0xa0,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::rrc_a               (aCPU, pc, 0x13,0x00,0x00);
	clk += Opcodes::jnc_offset          (aCPU, pc, 0x50,0x5f,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2c89(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2c89;
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8b,0xa0,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8a,0xa0,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::rrc_a               (aCPU, pc, 0x13,0x00,0x00);
	clk += Opcodes::jnc_offset          (aCPU, pc, 0x50,0x55,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2c98(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2c98;
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8b,0xa0,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8a,0xa0,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::rrc_a               (aCPU, pc, 0x13,0x00,0x00);
	clk += Opcodes::jnc_offset          (aCPU, pc, 0x50,0x4b,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2ca7(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2ca7;
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8b,0xa0,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8a,0xa0,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::rrc_a               (aCPU, pc, 0x13,0x00,0x00);
	clk += Opcodes::jnc_offset          (aCPU, pc, 0x50,0x41,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2cb6(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2cb6;
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8b,0xa0,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8a,0xa0,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::rrc_a               (aCPU, pc, 0x13,0x00,0x00);
	clk += Opcodes::jnc_offset          (aCPU, pc, 0x50,0x37,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2cc5(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2cc5;
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8b,0xa0,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8a,0xa0,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::rrc_a               (aCPU, pc, 0x13,0x00,0x00);
	clk += Opcodes::jnc_offset          (aCPU, pc, 0x50,0x2d,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2cd4(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2cd4;
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8b,0xa0,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8a,0xa0,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x2b,0xa0);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2ce3(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2ce3;
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x88,0xa0,0x00);
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x2c,0x1b);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2ce8(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2ce8;
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x88,0xa0,0x00);
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x2c,0x26);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2ced(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2ced;
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x88,0xa0,0x00);
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x2c,0x31);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2cf2(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2cf2;
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x88,0xa0,0x00);
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x2c,0x3c);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2cf7(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2cf7;
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x88,0xa0,0x00);
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x2c,0x47);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2cfc(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2cfc;
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x88,0xa0,0x00);
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x2c,0x52);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2d01(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2d01;
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x88,0xa0,0x00);
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x2c,0x5d);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2d06(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2d06;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x20,0xc4);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2d09(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2d09;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x2b,0xa0);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2d0c(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2d0c;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x2b,0x63);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2d0f(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2d0f;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xd0,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8e,0x84,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8f,0x85,0x00);
	clk += Opcodes::clr_a               (aCPU, pc, 0xe4,0x00,0x00);
	clk += Opcodes::movc_a_indir_a_dptr (aCPU, pc, 0x93,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x11,0x00);
	clk += Opcodes::mov_a_imm           (aCPU, pc, 0x74,0x02,0x00);
	clk += Opcodes::movc_a_indir_a_dptr (aCPU, pc, 0x93,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfa,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2d1e(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2d1e;
	clk += Opcodes::cjne_rx_imm_offset  (aCPU, pc, 0xbd,0x00,0x31);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2d21(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2d21;
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xe8,0x00,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xd0,0x10);
	clk += Opcodes::jb_bitaddr_offset   (aCPU, pc, 0x20,0xe3,0x35);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2d28(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2d28;
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xe9,0x00,0x00);
	clk += Opcodes::rrc_a               (aCPU, pc, 0x13,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xf9,0x00,0x00);
	clk += Opcodes::jc_offset           (aCPU, pc, 0x40,0x0f,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2d2d(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2d2d;
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x88,0xa0,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::djnz_mem_offset     (aCPU, pc, 0xd5,0x04,0xee);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2d3a(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2d3a;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x0f,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2d3c(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2d3c;
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8b,0xa0,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8a,0xa0,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::djnz_mem_offset     (aCPU, pc, 0xd5,0x04,0xdd);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2d4b(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2d4b;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xd0,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x92,0x00);
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2d52(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2d52;
	clk += Opcodes::dec_rx              (aCPU, pc, 0x1d,0x00,0x00);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x11,0x00);
	clk += Opcodes::rr_a                (aCPU, pc, 0x03,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x11,0x00);
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xea,0x00,0x00);
	clk += Opcodes::rr_a                (aCPU, pc, 0x03,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfa,0x00,0x00);
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0xc1,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2d5d(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2d5d;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x02,0x00);
	clk += Opcodes::rrc_a               (aCPU, pc, 0x13,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x02,0x00);
	clk += Opcodes::jc_offset           (aCPU, pc, 0x40,0x25,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2d64(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2d64;
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xe9,0x00,0x00);
	clk += Opcodes::rrc_a               (aCPU, pc, 0x13,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xf9,0x00,0x00);
	clk += Opcodes::jc_offset           (aCPU, pc, 0x40,0x0f,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2d69(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2d69;
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x88,0xa0,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::djnz_mem_offset     (aCPU, pc, 0xd5,0x04,0xe7);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2d76(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2d76;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0xd3,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2d78(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2d78;
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8b,0xa0,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8a,0xa0,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::djnz_mem_offset     (aCPU, pc, 0xd5,0x04,0xd6);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2d87(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2d87;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0xc2,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2d89(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2d89;
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xe9,0x00,0x00);
	clk += Opcodes::rrc_a               (aCPU, pc, 0x13,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xf9,0x00,0x00);
	clk += Opcodes::jc_offset           (aCPU, pc, 0x40,0x11,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2d8e(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2d8e;
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8d,0xa0,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8c,0xa0,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::djnz_mem_offset     (aCPU, pc, 0xd5,0x04,0xc0);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2d9d(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2d9d;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0xac,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2d9f(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2d9f;
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8f,0xa0,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8e,0xa0,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::djnz_mem_offset     (aCPU, pc, 0xd5,0x04,0xaf);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2dae(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2dae;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x9b,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2db0(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2db0;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x95,0x00);
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0x28,0x82);
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0x29,0x83);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7b,0xff,0x00);
	clk += Opcodes::mov_rx_mem          (aCPU, pc, 0xa9,0x26,0x00);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x27,0x00);
	clk += Opcodes::swap_a              (aCPU, pc, 0xc4,0x00,0x00);
	clk += Opcodes::rr_a                (aCPU, pc, 0x03,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfe,0x00,0x00);
	clk += Opcodes::anl_mem_imm         (aCPU, pc, 0x53,0x06,0x01);
	clk += Opcodes::clr_c               (aCPU, pc, 0xc3,0x00,0x00);
	clk += Opcodes::rrc_a               (aCPU, pc, 0x13,0x00,0x00);
	clk += Opcodes::clr_c               (aCPU, pc, 0xc3,0x00,0x00);
	clk += Opcodes::rrc_a               (aCPU, pc, 0x13,0x00,0x00);
	clk += Opcodes::rl_a                (aCPU, pc, 0x23,0x00,0x00);
	clk += Opcodes::rl_a                (aCPU, pc, 0x23,0x00,0x00);
	clk += Opcodes::rlc_a               (aCPU, pc, 0x33,0x00,0x00);
	clk += Opcodes::orl_a_imm           (aCPU, pc, 0x44,0x30,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xff,0x00,0x00);
	clk += Opcodes::mov_rx_mem          (aCPU, pc, 0xac,0x23,0x00);
	clk += Opcodes::mov_rx_mem          (aCPU, pc, 0xad,0x24,0x00);
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x2d,0x0c);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2dd6(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2dd6;
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7d,0x0f,0x00);
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x2b,0x8c);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2ddb(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2ddb;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x24,0x00);
	clk += Opcodes::jz_offset           (aCPU, pc, 0x60,0x07,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2ddf(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2ddf;
	clk += Opcodes::inc_rx              (aCPU, pc, 0x09,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfc,0x00,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7d,0x00,0x00);
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x2d,0x0c);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2de6(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2de6;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x95,0xff);
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2dea(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2dea;
	clk += Opcodes::mov_dptr_imm        (aCPU, pc, 0x90,0x03,0xfd);
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfa,0x00,0x00);
	clk += Opcodes::push_mem            (aCPU, pc, 0xc0,0x02,0x00);
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x0f,0x26);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2df4(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2df4;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x02,0x0e);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2df7(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2df7;
	clk += Opcodes::pop_mem             (aCPU, pc, 0xd0,0x02,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2df9(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2df9;
	clk += Opcodes::push_mem            (aCPU, pc, 0xc0,0x02,0x00);
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x2d,0xb0);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2dfe(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2dfe;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x02,0x8e);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2e01(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2e01;
	clk += Opcodes::pop_mem             (aCPU, pc, 0xd0,0x02,0x00);
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xda,0xf4,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2e05(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2e05;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x0f,0xa7);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2f00(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2f00;
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x78,0xff,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7a,0x00,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7b,0x00,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7c,0x49,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7d,0x4a,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7e,0xb2,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7f,0x94,0x00);
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2f10(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2f10;
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x78,0xff,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7a,0xbf,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7b,0x25,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7c,0x80,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7d,0xfc,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7e,0xdf,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7f,0xb6,0x00);
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2f20(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2f20;
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x78,0xff,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7a,0x80,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7b,0xfc,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7c,0xbf,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7d,0x25,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7e,0xd5,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7f,0xfe,0x00);
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2f30(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2f30;
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x78,0x50,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7a,0x80,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7b,0xfc,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7c,0xbf,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7d,0x25,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7e,0xff,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7f,0xff,0x00);
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2f40(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2f40;
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x78,0xff,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7a,0x00,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7b,0xb0,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7c,0x08,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7d,0xca,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7e,0xf7,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7f,0xed,0x00);
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2f50(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2f50;
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x78,0xff,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7a,0xef,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7b,0x7b,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7c,0x14,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7d,0xa5,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7e,0x59,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7f,0xce,0x00);
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2f60(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2f60;
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x78,0x00,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7a,0xff,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7b,0xff,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7c,0xb2,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7d,0x94,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7e,0x49,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7f,0x4a,0x00);
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2f70(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2f70;
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x78,0xef,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7a,0xff,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7b,0xff,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7c,0x59,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7d,0xce,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7e,0x14,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7f,0xa5,0x00);
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2f80(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2f80;
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x78,0xff,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7a,0xdf,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7b,0x96,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7c,0x2f,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7d,0xfe,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7e,0x5f,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7f,0xdf,0x00);
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2f90(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2f90;
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x78,0xff,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7a,0x2f,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7b,0xfe,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7c,0xdf,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7d,0x96,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7e,0x5a,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7f,0xff,0x00);
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2fa0(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2fa0;
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x78,0xff,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7a,0xff,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7b,0xff,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7c,0xff,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7d,0xff,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7e,0xff,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7f,0xff,0x00);
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2fb0(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2fb0;
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x78,0xff,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7a,0xff,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7b,0xff,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7c,0xff,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7d,0xff,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7e,0xff,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7f,0xff,0x00);
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2fc0(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2fc0;
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x78,0xff,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7a,0xff,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7b,0xff,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7c,0xff,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7d,0xff,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7e,0xff,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7f,0xff,0x00);
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2fd0(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2fd0;
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x78,0xff,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7a,0xff,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7b,0xff,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7c,0xff,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7d,0xff,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7e,0xff,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7f,0xff,0x00);
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2fe0(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2fe0;
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x78,0xff,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7a,0xff,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7b,0xff,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7c,0xff,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7d,0xff,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7e,0xff,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7f,0xff,0x00);
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2ff0(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2ff0;
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x78,0xff,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7a,0xff,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7b,0xff,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7c,0xff,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7d,0xff,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7e,0xff,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7f,0xff,0x00);
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}
const sbt_block_t sbt_rom_code[] = {
	&sbt_block_0000,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0003,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_000b,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0013,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_001b,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0023,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_002b,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0033,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_003b,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0043,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_004b,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0053,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_005b,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0063,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0066,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0069,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_00c4,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_00c7,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_00ca,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_00cd,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_00d0,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_00d3,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_00d6,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_00db,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_00e0,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_00e3,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_00e6,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_00e9,
	&sbt_exception,
	&sbt_block_00eb,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_00f4,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_00fd,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0110,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0117,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_011d,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0129,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_012c,
	&sbt_block_012d,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0130,
	&sbt_block_0131,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0134,
	&sbt_block_0135,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0138,
	&sbt_block_0139,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_013c,
	&sbt_block_013d,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0140,
	&sbt_block_0141,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0144,
	&sbt_block_0145,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0148,
	&sbt_block_0149,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_014c,
	&sbt_block_014d,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0150,
	&sbt_block_0151,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0154,
	&sbt_block_0155,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0158,
	&sbt_block_0159,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_015c,
	&sbt_block_015d,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0160,
	&sbt_block_0161,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0164,
	&sbt_block_0165,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0168,
	&sbt_block_0169,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_017d,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0195,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_01a1,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_01a9,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_01b3,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_01b7,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_01c7,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_01d3,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_01d9,
	&sbt_exception,
	&sbt_block_01db,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_01df,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_01f2,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_01fe,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0203,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_020d,
	&sbt_block_020e,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_028e,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0296,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_02ac,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_02b8,
	&sbt_block_02b9,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_02c3,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_02c6,
	&sbt_exception,
	&sbt_block_02c8,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_02cd,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_02d0,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_02d4,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_02d7,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_02e1,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_02e4,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_02e7,
	&sbt_exception,
	&sbt_block_02e9,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_02ec,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_02f1,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_02f5,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_02fa,
	&sbt_exception,
	&sbt_block_02fc,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0301,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0304,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0308,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_030b,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0311,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0321,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0324,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0330,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_033a,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0344,
	&sbt_exception,
	&sbt_block_0346,
	&sbt_exception,
	&sbt_block_0348,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_034f,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0352,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0357,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_035d,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0363,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0367,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_036d,
	&sbt_exception,
	&sbt_block_036f,
	&sbt_block_0370,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_039f,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_03f6,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0400,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0403,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0407,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0413,
	&sbt_exception,
	&sbt_block_0415,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0419,
	&sbt_exception,
	&sbt_block_041b,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0432,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0443,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0446,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0449,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0451,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0454,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_045e,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0461,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_046a,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0473,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0476,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0479,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_047c,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_047f,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0482,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0486,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0489,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_048c,
	&sbt_exception,
	&sbt_block_048e,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0491,
	&sbt_exception,
	&sbt_block_0493,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0496,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0499,
	&sbt_exception,
	&sbt_block_049b,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_049e,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_04a1,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_04a4,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_04a7,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_04ac,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_04af,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_04bb,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_04c9,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_04cc,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_04d7,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_04dd,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_04e2,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_04f3,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_04f6,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_04f9,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_04fc,
	&sbt_exception,
	&sbt_block_04fe,
	&sbt_block_04ff,
	&sbt_block_0500,
	&sbt_block_0501,
	&sbt_block_0502,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0507,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_050e,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_051c,
	&sbt_exception,
	&sbt_block_051e,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0521,
	&sbt_exception,
	&sbt_block_0523,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0535,
	&sbt_exception,
	&sbt_block_0537,
	&sbt_exception,
	&sbt_block_0539,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0541,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0549,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0551,
	&sbt_block_0552,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0568,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0574,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0578,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_057b,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0582,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0598,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_05a4,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_05a8,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_05ab,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_05b2,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_05c8,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_05d4,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_05d8,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_05db,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_05e2,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_05f8,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0604,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0608,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_060b,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0612,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_061a,
	&sbt_block_061b,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0621,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0629,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_062e,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0636,
	&sbt_block_0637,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_063d,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0645,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_064a,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0652,
	&sbt_block_0653,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0659,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0661,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0666,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_066e,
	&sbt_block_066f,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0675,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_067d,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0682,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0687,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_068a,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0692,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0695,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0698,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_06a0,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_06a3,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_06a6,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_06ae,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_06b1,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_06b4,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_06bc,
	&sbt_exception,
	&sbt_block_06be,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_06c1,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_06c4,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_06c7,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_06ca,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_06cd,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_06d0,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_06d3,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_06d6,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_06d9,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_06dc,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_06df,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_06e2,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_06e5,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_06e8,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_06eb,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_06ee,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_06f1,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_06f4,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_06f7,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_06fa,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_06fd,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0700,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0703,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0706,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0709,
	&sbt_exception,
	&sbt_block_070b,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_071c,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_072d,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0731,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0735,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0738,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_073f,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0744,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0747,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_074a,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0751,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0756,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0759,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_075c,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0763,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0768,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_076b,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_076e,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0775,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_077a,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_077f,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0782,
	&sbt_block_0783,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0786,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_079b,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_07a4,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_07a7,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_07b0,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_07b3,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_07bc,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_07bf,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_07c5,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_07c8,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_07cb,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_07d2,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_07e4,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0804,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_080e,
	&sbt_exception,
	&sbt_block_0810,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0813,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_081e,
	&sbt_exception,
	&sbt_block_0820,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0824,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0827,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_083d,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0841,
	&sbt_exception,
	&sbt_block_0843,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0846,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0850,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0859,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0867,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_086e,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0897,
	&sbt_block_0898,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_08a2,
	&sbt_block_08a3,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_08ab,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_08b3,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_08b6,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_08be,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_08ca,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_08ce,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_08da,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_08df,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_08e4,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_08f4,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_08f7,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_08fa,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_08fe,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0908,
	&sbt_block_0909,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_090d,
	&sbt_exception,
	&sbt_block_090f,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_091f,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0922,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0929,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_092d,
	&sbt_exception,
	&sbt_block_092f,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0932,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_093c,
	&sbt_block_093d,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0942,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0945,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0948,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_094b,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_094e,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0956,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0959,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_095c,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0964,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0967,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_096a,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0972,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0975,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0978,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0980,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0983,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0986,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0989,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_098c,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_098f,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0992,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0995,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0998,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_099b,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_099e,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_09a1,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_09a4,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_09a7,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_09aa,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_09ad,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_09b0,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_09b3,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_09b6,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_09b9,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_09bc,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_09bf,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_09c2,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_09c5,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_09c8,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_09cb,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_09ce,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_09d1,
	&sbt_exception,
	&sbt_block_09d3,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_09d6,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_09e7,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_09f4,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_09fc,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_09ff,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0a07,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0a0b,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0a12,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0a15,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0a1c,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0a21,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0a24,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0a27,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0a2e,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0a33,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0a36,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0a39,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0a40,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0a45,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0a48,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0a4b,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0a52,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0a57,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0a5c,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0a5f,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0a63,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0a66,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0a6c,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0a7c,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0a7f,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0a88,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0a8b,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0a94,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0a97,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0a9d,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0aa0,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0aa3,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0ab5,
	&sbt_exception,
	&sbt_block_0ab7,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0aba,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0ac1,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0ac4,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0ae0,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0ae9,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0aef,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0b19,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0b32,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0b51,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0b5d,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0b60,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0b66,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0b7d,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0b96,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0b99,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0b9c,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0b9f,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0ba9,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0bae,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0bbd,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0bc3,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0bda,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0bf3,
	&sbt_exception,
	&sbt_block_0bf5,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0c09,
	&sbt_exception,
	&sbt_block_0c0b,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0c13,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0c1b,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0c2b,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0c3f,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0c4f,
	&sbt_exception,
	&sbt_block_0c51,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0c73,
	&sbt_exception,
	&sbt_block_0c75,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0c78,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0c7b,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0c80,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0cff,
	&sbt_block_0d00,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0d12,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0d1b,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0d28,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0d32,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0d3f,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0d49,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0d56,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0d60,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0d6d,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0d82,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0d88,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0d9e,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0da2,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0da5,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0dbf,
	&sbt_exception,
	&sbt_block_0dc1,
	&sbt_exception,
	&sbt_block_0dc3,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0ddd,
	&sbt_exception,
	&sbt_block_0ddf,
	&sbt_block_0de0,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0df2,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0dfb,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0e08,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0e12,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0e1f,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0e34,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0e3a,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0e50,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0e54,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0e57,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0e65,
	&sbt_exception,
	&sbt_block_0e67,
	&sbt_exception,
	&sbt_block_0e69,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0e77,
	&sbt_exception,
	&sbt_block_0e79,
	&sbt_block_0e7a,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0e8c,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0e95,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0ea2,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0eb5,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0eb8,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0ebc,
	&sbt_exception,
	&sbt_block_0ebe,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0ec4,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0ec7,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0ed6,
	&sbt_exception,
	&sbt_block_0ed8,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0ee6,
	&sbt_exception,
	&sbt_block_0ee8,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0eee,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0ef1,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0ef5,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0ef9,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0efd,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0f05,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0f0a,
	&sbt_exception,
	&sbt_block_0f0c,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0f10,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0f15,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0f1a,
	&sbt_exception,
	&sbt_block_0f1c,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0f1f,
	&sbt_block_0f20,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0f26,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0f37,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0f42,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0fa3,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0fa6,
	&sbt_block_0fa7,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0fb0,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0fb6,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0fbb,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0fbe,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0fc1,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0fd1,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0fe1,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0ff1,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0fff,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_100b,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_101a,
	&sbt_exception,
	&sbt_block_101c,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1026,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_102c,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_103b,
	&sbt_exception,
	&sbt_block_103d,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1047,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_104d,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1064,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1067,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1071,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1079,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_107e,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1085,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_108a,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1091,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1096,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_109c,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_10a2,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_10a9,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_10ae,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_10b3,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_10b6,
	&sbt_exception,
	&sbt_block_10b8,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_10c0,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_10c5,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_10cd,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_10d1,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_10d5,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_10da,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_10df,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_10e2,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_10e8,
	&sbt_exception,
	&sbt_block_10ea,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_10ef,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_10f5,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_10f8,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_10fb,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1104,
	&sbt_exception,
	&sbt_block_1106,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1109,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_110c,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1112,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1115,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1121,
	&sbt_exception,
	&sbt_block_1123,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1126,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_112c,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_112f,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1137,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1141,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_115b,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1160,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1166,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1169,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_116d,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_118c,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_118f,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1196,
	&sbt_exception,
	&sbt_block_1198,
	&sbt_exception,
	&sbt_block_119a,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_119e,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_11a6,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_11ae,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_11c5,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_11c8,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_11cc,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_11d4,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_11de,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_11e6,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1203,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1207,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1211,
	&sbt_exception,
	&sbt_block_1213,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1219,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1221,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1226,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_122e,
	&sbt_exception,
	&sbt_block_1230,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1236,
	&sbt_block_1237,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_123c,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1250,
	&sbt_exception,
	&sbt_block_1252,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1255,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_125a,
	&sbt_exception,
	&sbt_block_125c,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1266,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_126b,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1272,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1277,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_127e,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1283,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1287,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_128b,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_129a,
	&sbt_exception,
	&sbt_block_129c,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_129f,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_12a4,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_12a8,
	&sbt_exception,
	&sbt_block_12aa,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_12b2,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_12b6,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_12bb,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_12bf,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_12c4,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_12c8,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_12dd,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_12e1,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_12eb,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_12ef,
	&sbt_block_12f0,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_12f8,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1305,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_130a,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_130e,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1316,
	&sbt_block_1317,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_131f,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1324,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_132e,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1333,
	&sbt_exception,
	&sbt_block_1335,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_133a,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1342,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1354,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1357,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_135d,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1360,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1365,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_136b,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1370,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1375,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1378,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_137d,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1380,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1385,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1388,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_138d,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1390,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1395,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1398,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_13a0,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_13a8,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_13ad,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_13b3,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_13b8,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_13bd,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_13c5,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_13d0,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_13df,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_13e5,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_13f5,
	&sbt_exception,
	&sbt_block_13f7,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1405,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_140c,
	&sbt_exception,
	&sbt_block_140e,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_141b,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1420,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_142a,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_143f,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_144d,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1454,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1464,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1469,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1475,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_147c,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1482,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_148f,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1492,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1496,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1499,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_14a1,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_14aa,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_14c3,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_14c9,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_14cc,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_14cf,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_14d2,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_14d5,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_14e0,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_14ea,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_14f1,
	&sbt_exception,
	&sbt_block_14f3,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_14f7,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_14fa,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1500,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1504,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_150a,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1510,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1514,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_151e,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1521,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1527,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_152b,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_152f,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1532,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1536,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1542,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1545,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1548,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_154e,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1563,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1572,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_15a0,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_15ab,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_15bd,
	&sbt_exception,
	&sbt_block_15bf,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_15c2,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_15cd,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_15d3,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_15d7,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_15de,
	&sbt_exception,
	&sbt_block_15e0,
	&sbt_exception,
	&sbt_block_15e2,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_15ed,
	&sbt_exception,
	&sbt_block_15ef,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1615,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_161a,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1622,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1634,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1641,
	&sbt_exception,
	&sbt_block_1643,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1646,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_164b,
	&sbt_block_164c,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1651,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1654,
	&sbt_block_1655,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1659,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_165c,
	&sbt_block_165d,
	&sbt_exception,
	&sbt_block_165f,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1664,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1676,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1689,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_16ae,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_16b1,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_16c4,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_16d0,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_16d3,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_16d7,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_16da,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_16df,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_16e2,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_16ed,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1702,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1707,
	&sbt_exception,
	&sbt_block_1709,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_170d,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1725,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1728,
	&sbt_exception,
	&sbt_block_172a,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_172e,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1734,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_174c,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1754,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1757,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_175a,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1764,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1767,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_176e,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1779,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_177c,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_177f,
	&sbt_exception,
	&sbt_block_1781,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1784,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1788,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_178b,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_178e,
	&sbt_exception,
	&sbt_block_1790,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1793,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_179c,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_17c2,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_17c5,
	&sbt_exception,
	&sbt_block_17c7,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_17ca,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_17d3,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_17f3,
	&sbt_block_17f4,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_17fc,
	&sbt_block_17fd,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1806,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1809,
	&sbt_exception,
	&sbt_block_180b,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_180e,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1818,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1820,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1825,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1833,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1838,
	&sbt_block_1839,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1840,
	&sbt_exception,
	&sbt_block_1842,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1845,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_184b,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1851,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_185a,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_185f,
	&sbt_exception,
	&sbt_block_1861,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1866,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1869,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1884,
	&sbt_block_1885,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_188f,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1892,
	&sbt_exception,
	&sbt_block_1894,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1897,
	&sbt_exception,
	&sbt_block_1899,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_189c,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_189f,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_18a2,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_18a5,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_18a8,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_18ab,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_18ae,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_18b1,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_18b4,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_18b7,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_18ba,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_18c3,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_18cc,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_18db,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_18de,
	&sbt_exception,
	&sbt_block_18e0,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_18e3,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_18f2,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1901,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1910,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_191c,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1921,
	&sbt_exception,
	&sbt_block_1923,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1928,
	&sbt_exception,
	&sbt_block_192a,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1933,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_193c,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_193f,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1942,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1954,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1963,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_196f,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_197f,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1985,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_198e,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_19a3,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_19b9,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_19c5,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_19d4,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_19d9,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_19eb,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_19fe,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1a1e,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1a24,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1a28,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1a2f,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1a36,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1a3b,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1a4a,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1a56,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1a66,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1a78,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1a7d,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1a81,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1a86,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1a8c,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1a96,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1a9f,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1aa2,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1aa5,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1ab0,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1ab7,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1abc,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1acb,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1ad6,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1ae2,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1af4,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1afa,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1afe,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1b03,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1b09,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1b13,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1b1c,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1b1f,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1b22,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1b2d,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1b34,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1b39,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1b49,
	&sbt_exception,
	&sbt_block_1b4b,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1b55,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1b60,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1b67,
	&sbt_exception,
	&sbt_block_1b69,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1b6d,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1b72,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1b78,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1b82,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1b8b,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1b8e,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1b91,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1b9b,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1ba1,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1ba6,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1baf,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1bb9,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1bc7,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1bcd,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1bd5,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1bdb,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1be8,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1bee,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1bf1,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1bfe,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1c0c,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1c14,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1c1a,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1c1f,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1c28,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1c32,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1c40,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1c46,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1c4e,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1c54,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1c61,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1c67,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1c6a,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1c6f,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1c72,
	&sbt_exception,
	&sbt_block_1c74,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1c83,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1c88,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1c8d,
	&sbt_exception,
	&sbt_block_1c8f,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1c9f,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1ca2,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1ca6,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1ca9,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1cb7,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1cd2,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1cd8,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1cea,
	&sbt_exception,
	&sbt_block_1cec,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1cfa,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1d06,
	&sbt_exception,
	&sbt_block_1d08,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1d1c,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1d2d,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1d34,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1d3a,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1d3e,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1d53,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1d5a,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1d66,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1d6f,
	&sbt_block_1d70,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1d7c,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1d83,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1d86,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1d95,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1d9e,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1dad,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1db8,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1dc4,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1dd0,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1ddc,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1de8,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1deb,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1dee,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2000,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2014,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_202b,
	&sbt_exception,
	&sbt_block_202d,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2034,
	&sbt_exception,
	&sbt_block_2036,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_203d,
	&sbt_exception,
	&sbt_block_203f,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2046,
	&sbt_exception,
	&sbt_block_2048,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_204f,
	&sbt_exception,
	&sbt_block_2051,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2058,
	&sbt_exception,
	&sbt_block_205a,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2061,
	&sbt_exception,
	&sbt_block_2063,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_206a,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_207e,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2093,
	&sbt_exception,
	&sbt_block_2095,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_209a,
	&sbt_exception,
	&sbt_block_209c,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_20a1,
	&sbt_exception,
	&sbt_block_20a3,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_20a8,
	&sbt_exception,
	&sbt_block_20aa,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_20af,
	&sbt_exception,
	&sbt_block_20b1,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_20b6,
	&sbt_exception,
	&sbt_block_20b8,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_20bd,
	&sbt_exception,
	&sbt_block_20bf,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_20c4,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_20cc,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_20d4,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_20dc,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_20e4,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_20ec,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_20f4,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_20fc,
	&sbt_exception,
	&sbt_block_20fe,
	&sbt_exception,
	&sbt_block_2100,
	&sbt_exception,
	&sbt_block_2102,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2105,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2108,
	&sbt_exception,
	&sbt_block_210a,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2114,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2117,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_212d,
	&sbt_block_212e,
	&sbt_exception,
	&sbt_block_2130,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2133,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2139,
	&sbt_exception,
	&sbt_block_213b,
	&sbt_exception,
	&sbt_block_213d,
	&sbt_exception,
	&sbt_block_213f,
	&sbt_exception,
	&sbt_block_2141,
	&sbt_exception,
	&sbt_block_2143,
	&sbt_exception,
	&sbt_block_2145,
	&sbt_exception,
	&sbt_block_2147,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_214f,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2152,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2158,
	&sbt_exception,
	&sbt_block_215a,
	&sbt_exception,
	&sbt_block_215c,
	&sbt_exception,
	&sbt_block_215e,
	&sbt_exception,
	&sbt_block_2160,
	&sbt_exception,
	&sbt_block_2162,
	&sbt_exception,
	&sbt_block_2164,
	&sbt_exception,
	&sbt_block_2166,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_216e,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2171,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2177,
	&sbt_exception,
	&sbt_block_2179,
	&sbt_exception,
	&sbt_block_217b,
	&sbt_exception,
	&sbt_block_217d,
	&sbt_exception,
	&sbt_block_217f,
	&sbt_exception,
	&sbt_block_2181,
	&sbt_exception,
	&sbt_block_2183,
	&sbt_exception,
	&sbt_block_2185,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_218d,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2190,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2196,
	&sbt_exception,
	&sbt_block_2198,
	&sbt_exception,
	&sbt_block_219a,
	&sbt_exception,
	&sbt_block_219c,
	&sbt_exception,
	&sbt_block_219e,
	&sbt_exception,
	&sbt_block_21a0,
	&sbt_exception,
	&sbt_block_21a2,
	&sbt_exception,
	&sbt_block_21a4,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_21ac,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_21af,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_21b5,
	&sbt_exception,
	&sbt_block_21b7,
	&sbt_exception,
	&sbt_block_21b9,
	&sbt_exception,
	&sbt_block_21bb,
	&sbt_exception,
	&sbt_block_21bd,
	&sbt_exception,
	&sbt_block_21bf,
	&sbt_exception,
	&sbt_block_21c1,
	&sbt_exception,
	&sbt_block_21c3,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_21cb,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_21ce,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_21d4,
	&sbt_exception,
	&sbt_block_21d6,
	&sbt_exception,
	&sbt_block_21d8,
	&sbt_exception,
	&sbt_block_21da,
	&sbt_exception,
	&sbt_block_21dc,
	&sbt_exception,
	&sbt_block_21de,
	&sbt_exception,
	&sbt_block_21e0,
	&sbt_exception,
	&sbt_block_21e2,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_21ea,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_21ed,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_21f3,
	&sbt_exception,
	&sbt_block_21f5,
	&sbt_exception,
	&sbt_block_21f7,
	&sbt_exception,
	&sbt_block_21f9,
	&sbt_exception,
	&sbt_block_21fb,
	&sbt_exception,
	&sbt_block_21fd,
	&sbt_exception,
	&sbt_block_21ff,
	&sbt_exception,
	&sbt_block_2201,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2209,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_220c,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2212,
	&sbt_exception,
	&sbt_block_2214,
	&sbt_exception,
	&sbt_block_2216,
	&sbt_exception,
	&sbt_block_2218,
	&sbt_exception,
	&sbt_block_221a,
	&sbt_exception,
	&sbt_block_221c,
	&sbt_exception,
	&sbt_block_221e,
	&sbt_exception,
	&sbt_block_2220,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2228,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_222f,
	&sbt_exception,
	&sbt_block_2231,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2236,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2239,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_224d,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2250,
	&sbt_exception,
	&sbt_block_2252,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2256,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2259,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_226c,
	&sbt_block_226d,
	&sbt_exception,
	&sbt_block_226f,
	&sbt_exception,
	&sbt_block_2271,
	&sbt_exception,
	&sbt_block_2273,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2276,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_227c,
	&sbt_exception,
	&sbt_block_227e,
	&sbt_exception,
	&sbt_block_2280,
	&sbt_exception,
	&sbt_block_2282,
	&sbt_exception,
	&sbt_block_2284,
	&sbt_exception,
	&sbt_block_2286,
	&sbt_exception,
	&sbt_block_2288,
	&sbt_exception,
	&sbt_block_228a,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2292,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2295,
	&sbt_exception,
	&sbt_block_2297,
	&sbt_exception,
	&sbt_block_2299,
	&sbt_exception,
	&sbt_block_229b,
	&sbt_exception,
	&sbt_block_229d,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_22a5,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_22a8,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_22ae,
	&sbt_exception,
	&sbt_block_22b0,
	&sbt_exception,
	&sbt_block_22b2,
	&sbt_exception,
	&sbt_block_22b4,
	&sbt_exception,
	&sbt_block_22b6,
	&sbt_exception,
	&sbt_block_22b8,
	&sbt_exception,
	&sbt_block_22ba,
	&sbt_exception,
	&sbt_block_22bc,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_22c4,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_22c7,
	&sbt_exception,
	&sbt_block_22c9,
	&sbt_exception,
	&sbt_block_22cb,
	&sbt_exception,
	&sbt_block_22cd,
	&sbt_exception,
	&sbt_block_22cf,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_22d7,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_22da,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_22e0,
	&sbt_exception,
	&sbt_block_22e2,
	&sbt_exception,
	&sbt_block_22e4,
	&sbt_exception,
	&sbt_block_22e6,
	&sbt_exception,
	&sbt_block_22e8,
	&sbt_exception,
	&sbt_block_22ea,
	&sbt_exception,
	&sbt_block_22ec,
	&sbt_exception,
	&sbt_block_22ee,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_22f6,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_22f9,
	&sbt_exception,
	&sbt_block_22fb,
	&sbt_exception,
	&sbt_block_22fd,
	&sbt_exception,
	&sbt_block_22ff,
	&sbt_exception,
	&sbt_block_2301,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2309,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_230c,
	&sbt_exception,
	&sbt_block_230e,
	&sbt_exception,
	&sbt_block_2310,
	&sbt_exception,
	&sbt_block_2312,
	&sbt_exception,
	&sbt_block_2314,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_231c,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2324,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2327,
	&sbt_exception,
	&sbt_block_2329,
	&sbt_exception,
	&sbt_block_232b,
	&sbt_block_232c,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_232f,
	&sbt_exception,
	&sbt_block_2331,
	&sbt_exception,
	&sbt_block_2333,
	&sbt_exception,
	&sbt_block_2335,
	&sbt_exception,
	&sbt_block_2337,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_233f,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2350,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2353,
	&sbt_exception,
	&sbt_block_2355,
	&sbt_exception,
	&sbt_block_2357,
	&sbt_exception,
	&sbt_block_2359,
	&sbt_exception,
	&sbt_block_235b,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_235e,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2366,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_236c,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_236f,
	&sbt_exception,
	&sbt_block_2371,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2375,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2378,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_238b,
	&sbt_block_238c,
	&sbt_exception,
	&sbt_block_238e,
	&sbt_exception,
	&sbt_block_2390,
	&sbt_exception,
	&sbt_block_2392,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2395,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_239b,
	&sbt_exception,
	&sbt_block_239d,
	&sbt_exception,
	&sbt_block_239f,
	&sbt_exception,
	&sbt_block_23a1,
	&sbt_exception,
	&sbt_block_23a3,
	&sbt_exception,
	&sbt_block_23a5,
	&sbt_exception,
	&sbt_block_23a7,
	&sbt_exception,
	&sbt_block_23a9,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_23b1,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_23b4,
	&sbt_exception,
	&sbt_block_23b6,
	&sbt_exception,
	&sbt_block_23b8,
	&sbt_exception,
	&sbt_block_23ba,
	&sbt_exception,
	&sbt_block_23bc,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_23c4,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_23c7,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_23cd,
	&sbt_exception,
	&sbt_block_23cf,
	&sbt_exception,
	&sbt_block_23d1,
	&sbt_exception,
	&sbt_block_23d3,
	&sbt_exception,
	&sbt_block_23d5,
	&sbt_exception,
	&sbt_block_23d7,
	&sbt_exception,
	&sbt_block_23d9,
	&sbt_exception,
	&sbt_block_23db,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_23e3,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_23e6,
	&sbt_exception,
	&sbt_block_23e8,
	&sbt_exception,
	&sbt_block_23ea,
	&sbt_exception,
	&sbt_block_23ec,
	&sbt_exception,
	&sbt_block_23ee,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_23f6,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_23f9,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_23ff,
	&sbt_exception,
	&sbt_block_2401,
	&sbt_exception,
	&sbt_block_2403,
	&sbt_exception,
	&sbt_block_2405,
	&sbt_exception,
	&sbt_block_2407,
	&sbt_exception,
	&sbt_block_2409,
	&sbt_exception,
	&sbt_block_240b,
	&sbt_exception,
	&sbt_block_240d,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2415,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2418,
	&sbt_exception,
	&sbt_block_241a,
	&sbt_exception,
	&sbt_block_241c,
	&sbt_exception,
	&sbt_block_241e,
	&sbt_exception,
	&sbt_block_2420,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2428,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2430,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2433,
	&sbt_exception,
	&sbt_block_2435,
	&sbt_exception,
	&sbt_block_2437,
	&sbt_block_2438,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_243b,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2441,
	&sbt_exception,
	&sbt_block_2443,
	&sbt_exception,
	&sbt_block_2445,
	&sbt_exception,
	&sbt_block_2447,
	&sbt_exception,
	&sbt_block_2449,
	&sbt_exception,
	&sbt_block_244b,
	&sbt_exception,
	&sbt_block_244d,
	&sbt_exception,
	&sbt_block_244f,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2457,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_245a,
	&sbt_exception,
	&sbt_block_245c,
	&sbt_exception,
	&sbt_block_245e,
	&sbt_exception,
	&sbt_block_2460,
	&sbt_exception,
	&sbt_block_2462,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_246a,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_247b,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_247e,
	&sbt_exception,
	&sbt_block_2480,
	&sbt_exception,
	&sbt_block_2482,
	&sbt_exception,
	&sbt_block_2484,
	&sbt_exception,
	&sbt_block_2486,
	&sbt_exception,
	&sbt_block_2488,
	&sbt_exception,
	&sbt_block_248a,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_248d,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2495,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_249b,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_249e,
	&sbt_exception,
	&sbt_block_24a0,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_24a4,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_24a7,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_24ba,
	&sbt_block_24bb,
	&sbt_exception,
	&sbt_block_24bd,
	&sbt_exception,
	&sbt_block_24bf,
	&sbt_exception,
	&sbt_block_24c1,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_24c4,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_24ca,
	&sbt_exception,
	&sbt_block_24cc,
	&sbt_exception,
	&sbt_block_24ce,
	&sbt_exception,
	&sbt_block_24d0,
	&sbt_exception,
	&sbt_block_24d2,
	&sbt_exception,
	&sbt_block_24d4,
	&sbt_exception,
	&sbt_block_24d6,
	&sbt_exception,
	&sbt_block_24d8,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_24e0,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_24e3,
	&sbt_exception,
	&sbt_block_24e5,
	&sbt_exception,
	&sbt_block_24e7,
	&sbt_exception,
	&sbt_block_24e9,
	&sbt_exception,
	&sbt_block_24eb,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_24f3,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_24f6,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_24fc,
	&sbt_exception,
	&sbt_block_24fe,
	&sbt_exception,
	&sbt_block_2500,
	&sbt_exception,
	&sbt_block_2502,
	&sbt_exception,
	&sbt_block_2504,
	&sbt_exception,
	&sbt_block_2506,
	&sbt_exception,
	&sbt_block_2508,
	&sbt_exception,
	&sbt_block_250a,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2512,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2515,
	&sbt_exception,
	&sbt_block_2517,
	&sbt_exception,
	&sbt_block_2519,
	&sbt_exception,
	&sbt_block_251b,
	&sbt_exception,
	&sbt_block_251d,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2525,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2528,
	&sbt_exception,
	&sbt_block_252a,
	&sbt_exception,
	&sbt_block_252c,
	&sbt_exception,
	&sbt_block_252e,
	&sbt_exception,
	&sbt_block_2530,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2538,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2540,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2543,
	&sbt_exception,
	&sbt_block_2545,
	&sbt_exception,
	&sbt_block_2547,
	&sbt_block_2548,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_254b,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2551,
	&sbt_exception,
	&sbt_block_2553,
	&sbt_exception,
	&sbt_block_2555,
	&sbt_exception,
	&sbt_block_2557,
	&sbt_exception,
	&sbt_block_2559,
	&sbt_exception,
	&sbt_block_255b,
	&sbt_exception,
	&sbt_block_255d,
	&sbt_exception,
	&sbt_block_255f,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2567,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_256a,
	&sbt_exception,
	&sbt_block_256c,
	&sbt_exception,
	&sbt_block_256e,
	&sbt_exception,
	&sbt_block_2570,
	&sbt_exception,
	&sbt_block_2572,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_257a,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_257d,
	&sbt_exception,
	&sbt_block_257f,
	&sbt_exception,
	&sbt_block_2581,
	&sbt_exception,
	&sbt_block_2583,
	&sbt_exception,
	&sbt_block_2585,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_258d,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_259e,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_25a1,
	&sbt_exception,
	&sbt_block_25a3,
	&sbt_exception,
	&sbt_block_25a5,
	&sbt_exception,
	&sbt_block_25a7,
	&sbt_exception,
	&sbt_block_25a9,
	&sbt_exception,
	&sbt_block_25ab,
	&sbt_exception,
	&sbt_block_25ad,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_25b0,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_25b8,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_25be,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_25c1,
	&sbt_exception,
	&sbt_block_25c3,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_25c7,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_25ca,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_25dd,
	&sbt_block_25de,
	&sbt_exception,
	&sbt_block_25e0,
	&sbt_exception,
	&sbt_block_25e2,
	&sbt_exception,
	&sbt_block_25e4,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_25e7,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_25ed,
	&sbt_exception,
	&sbt_block_25ef,
	&sbt_exception,
	&sbt_block_25f1,
	&sbt_exception,
	&sbt_block_25f3,
	&sbt_exception,
	&sbt_block_25f5,
	&sbt_exception,
	&sbt_block_25f7,
	&sbt_exception,
	&sbt_block_25f9,
	&sbt_exception,
	&sbt_block_25fb,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2603,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2606,
	&sbt_exception,
	&sbt_block_2608,
	&sbt_exception,
	&sbt_block_260a,
	&sbt_exception,
	&sbt_block_260c,
	&sbt_exception,
	&sbt_block_260e,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2616,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2619,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_261f,
	&sbt_exception,
	&sbt_block_2621,
	&sbt_exception,
	&sbt_block_2623,
	&sbt_exception,
	&sbt_block_2625,
	&sbt_exception,
	&sbt_block_2627,
	&sbt_exception,
	&sbt_block_2629,
	&sbt_exception,
	&sbt_block_262b,
	&sbt_exception,
	&sbt_block_262d,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2635,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2638,
	&sbt_exception,
	&sbt_block_263a,
	&sbt_exception,
	&sbt_block_263c,
	&sbt_exception,
	&sbt_block_263e,
	&sbt_exception,
	&sbt_block_2640,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2648,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2650,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2653,
	&sbt_exception,
	&sbt_block_2655,
	&sbt_exception,
	&sbt_block_2657,
	&sbt_block_2658,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_265b,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2661,
	&sbt_exception,
	&sbt_block_2663,
	&sbt_exception,
	&sbt_block_2665,
	&sbt_exception,
	&sbt_block_2667,
	&sbt_exception,
	&sbt_block_2669,
	&sbt_exception,
	&sbt_block_266b,
	&sbt_exception,
	&sbt_block_266d,
	&sbt_exception,
	&sbt_block_266f,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2677,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_267a,
	&sbt_exception,
	&sbt_block_267c,
	&sbt_exception,
	&sbt_block_267e,
	&sbt_exception,
	&sbt_block_2680,
	&sbt_exception,
	&sbt_block_2682,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_268a,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_268d,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2693,
	&sbt_exception,
	&sbt_block_2695,
	&sbt_exception,
	&sbt_block_2697,
	&sbt_exception,
	&sbt_block_2699,
	&sbt_exception,
	&sbt_block_269b,
	&sbt_exception,
	&sbt_block_269d,
	&sbt_exception,
	&sbt_block_269f,
	&sbt_exception,
	&sbt_block_26a1,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_26a9,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_26ac,
	&sbt_exception,
	&sbt_block_26ae,
	&sbt_exception,
	&sbt_block_26b0,
	&sbt_exception,
	&sbt_block_26b2,
	&sbt_exception,
	&sbt_block_26b4,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_26bc,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_26cd,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_26d0,
	&sbt_exception,
	&sbt_block_26d2,
	&sbt_exception,
	&sbt_block_26d4,
	&sbt_exception,
	&sbt_block_26d6,
	&sbt_exception,
	&sbt_block_26d8,
	&sbt_exception,
	&sbt_block_26da,
	&sbt_exception,
	&sbt_block_26dc,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_26df,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_26e7,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_26ed,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_26f0,
	&sbt_exception,
	&sbt_block_26f2,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_26f6,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_26f9,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_270c,
	&sbt_block_270d,
	&sbt_exception,
	&sbt_block_270f,
	&sbt_exception,
	&sbt_block_2711,
	&sbt_exception,
	&sbt_block_2713,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2716,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_271c,
	&sbt_exception,
	&sbt_block_271e,
	&sbt_exception,
	&sbt_block_2720,
	&sbt_exception,
	&sbt_block_2722,
	&sbt_exception,
	&sbt_block_2724,
	&sbt_exception,
	&sbt_block_2726,
	&sbt_exception,
	&sbt_block_2728,
	&sbt_exception,
	&sbt_block_272a,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2732,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2735,
	&sbt_exception,
	&sbt_block_2737,
	&sbt_exception,
	&sbt_block_2739,
	&sbt_exception,
	&sbt_block_273b,
	&sbt_exception,
	&sbt_block_273d,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2745,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2748,
	&sbt_exception,
	&sbt_block_274a,
	&sbt_exception,
	&sbt_block_274c,
	&sbt_exception,
	&sbt_block_274e,
	&sbt_exception,
	&sbt_block_2750,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2758,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2760,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2763,
	&sbt_exception,
	&sbt_block_2765,
	&sbt_exception,
	&sbt_block_2767,
	&sbt_block_2768,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_276b,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2771,
	&sbt_exception,
	&sbt_block_2773,
	&sbt_exception,
	&sbt_block_2775,
	&sbt_exception,
	&sbt_block_2777,
	&sbt_exception,
	&sbt_block_2779,
	&sbt_exception,
	&sbt_block_277b,
	&sbt_exception,
	&sbt_block_277d,
	&sbt_exception,
	&sbt_block_277f,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2787,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_278a,
	&sbt_exception,
	&sbt_block_278c,
	&sbt_exception,
	&sbt_block_278e,
	&sbt_exception,
	&sbt_block_2790,
	&sbt_exception,
	&sbt_block_2792,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_279a,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_279d,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_27a3,
	&sbt_exception,
	&sbt_block_27a5,
	&sbt_exception,
	&sbt_block_27a7,
	&sbt_exception,
	&sbt_block_27a9,
	&sbt_exception,
	&sbt_block_27ab,
	&sbt_exception,
	&sbt_block_27ad,
	&sbt_exception,
	&sbt_block_27af,
	&sbt_exception,
	&sbt_block_27b1,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_27b9,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_27bc,
	&sbt_exception,
	&sbt_block_27be,
	&sbt_exception,
	&sbt_block_27c0,
	&sbt_exception,
	&sbt_block_27c2,
	&sbt_exception,
	&sbt_block_27c4,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_27cc,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_27cf,
	&sbt_exception,
	&sbt_block_27d1,
	&sbt_exception,
	&sbt_block_27d3,
	&sbt_exception,
	&sbt_block_27d5,
	&sbt_exception,
	&sbt_block_27d7,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_27df,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_27f0,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_27f3,
	&sbt_exception,
	&sbt_block_27f5,
	&sbt_exception,
	&sbt_block_27f7,
	&sbt_exception,
	&sbt_block_27f9,
	&sbt_exception,
	&sbt_block_27fb,
	&sbt_exception,
	&sbt_block_27fd,
	&sbt_exception,
	&sbt_block_27ff,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2802,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_280b,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2811,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2814,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2817,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_281b,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_281e,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2831,
	&sbt_block_2832,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2835,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2838,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_283b,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_283e,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2844,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2847,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_284a,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_284d,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2850,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2853,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2856,
	&sbt_exception,
	&sbt_block_2858,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2860,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2863,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2866,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2869,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_286c,
	&sbt_exception,
	&sbt_block_286e,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2876,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_287e,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2881,
	&sbt_exception,
	&sbt_block_2883,
	&sbt_exception,
	&sbt_block_2885,
	&sbt_block_2886,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2889,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_288f,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2892,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2895,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2898,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_289b,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_289e,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_28a1,
	&sbt_exception,
	&sbt_block_28a3,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_28ab,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_28ae,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_28b1,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_28b4,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_28b7,
	&sbt_exception,
	&sbt_block_28b9,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_28c1,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_28c4,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_28ca,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_28cd,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_28d0,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_28d3,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_28d6,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_28d9,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_28dc,
	&sbt_exception,
	&sbt_block_28de,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_28e6,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_28e9,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_28ec,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_28ef,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_28f2,
	&sbt_exception,
	&sbt_block_28f4,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_28fc,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_28ff,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2905,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2908,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_290b,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_290e,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2911,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2914,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2917,
	&sbt_exception,
	&sbt_block_2919,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2921,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2924,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2927,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_292a,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_292d,
	&sbt_exception,
	&sbt_block_292f,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2937,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2948,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_294b,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_294e,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2951,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2954,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2957,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_295a,
	&sbt_exception,
	&sbt_block_295c,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_295f,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2968,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_296e,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2971,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_297d,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2980,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2993,
	&sbt_block_2994,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2997,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_299a,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_299d,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_29a0,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_29a3,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_29a6,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_29a9,
	&sbt_exception,
	&sbt_block_29ab,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_29b3,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_29bb,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_29be,
	&sbt_exception,
	&sbt_block_29c0,
	&sbt_exception,
	&sbt_block_29c2,
	&sbt_block_29c3,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_29c6,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_29cc,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_29cf,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_29d2,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_29d5,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_29d8,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_29db,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_29de,
	&sbt_exception,
	&sbt_block_29e0,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_29e8,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_29eb,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_29ee,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_29f1,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_29f4,
	&sbt_exception,
	&sbt_block_29f6,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_29fe,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2a01,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2a07,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2a0a,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2a0d,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2a10,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2a13,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2a16,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2a19,
	&sbt_exception,
	&sbt_block_2a1b,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2a23,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2a26,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2a29,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2a2c,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2a2f,
	&sbt_exception,
	&sbt_block_2a31,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2a39,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2a3c,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2a42,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2a45,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2a48,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2a4b,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2a4e,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2a51,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2a54,
	&sbt_exception,
	&sbt_block_2a56,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2a5e,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2a61,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2a64,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2a67,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2a6a,
	&sbt_exception,
	&sbt_block_2a6c,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2a74,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2a77,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2a7a,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2a7d,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2a80,
	&sbt_exception,
	&sbt_block_2a82,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2a8a,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2a9b,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2a9e,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2aa1,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2aa4,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2aa7,
	&sbt_exception,
	&sbt_block_2aa9,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2aac,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2ab1,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2ab4,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2ab7,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2aba,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2abd,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2ac0,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2ac3,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2ac6,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2ac9,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2acc,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2acf,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2ad2,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2ad5,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2ad8,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2adb,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2ade,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2ae1,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2ae4,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2ae7,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2af7,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2b02,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2b05,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2b0d,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2b1a,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2b22,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2b25,
	&sbt_exception,
	&sbt_block_2b27,
	&sbt_block_2b28,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2b42,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2b46,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2b4b,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2b58,
	&sbt_exception,
	&sbt_block_2b5a,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2b5f,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2b63,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2b76,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2b79,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2b82,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2b8b,
	&sbt_block_2b8c,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2b8f,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2b9e,
	&sbt_exception,
	&sbt_block_2ba0,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2ba8,
	&sbt_block_2ba9,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2bb2,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2bb9,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2bbe,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2bcb,
	&sbt_exception,
	&sbt_block_2bcd,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2bdc,
	&sbt_exception,
	&sbt_block_2bde,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2be3,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2bf2,
	&sbt_exception,
	&sbt_block_2bf4,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2c03,
	&sbt_exception,
	&sbt_block_2c05,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2c0d,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2c10,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2c1b,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2c26,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2c31,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2c3c,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2c47,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2c52,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2c5d,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2c68,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2c6b,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2c7a,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2c89,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2c98,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2ca7,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2cb6,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2cc5,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2cd4,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2ce3,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2ce8,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2ced,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2cf2,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2cf7,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2cfc,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2d01,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2d06,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2d09,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2d0c,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2d0f,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2d1e,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2d21,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2d28,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2d2d,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2d3a,
	&sbt_exception,
	&sbt_block_2d3c,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2d4b,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2d52,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2d5d,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2d64,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2d69,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2d76,
	&sbt_exception,
	&sbt_block_2d78,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2d87,
	&sbt_exception,
	&sbt_block_2d89,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2d8e,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2d9d,
	&sbt_exception,
	&sbt_block_2d9f,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2dae,
	&sbt_exception,
	&sbt_block_2db0,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2dd6,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2ddb,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2ddf,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2de6,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2dea,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2df4,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2df7,
	&sbt_exception,
	&sbt_block_2df9,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2dfe,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2e01,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2e05,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2f00,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2f10,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2f20,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2f30,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2f40,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2f50,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2f60,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2f70,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2f80,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2f90,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2fa0,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2fb0,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2fc0,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2fd0,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2fe0,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2ff0,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
};

extern const uint8_t sbt_rom_data[] = {
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x01,0x02,0x01,0x02,0x02,0x03,0x01,0x02,0x02,
    0x03,0x02,0x03,0x03,0x04,0x02,0x01,0x00,0x80,0x02,0xec,0x1b,0x02,0x11,0x00,0x80,
    0x03,0xb1,0x0c,0x03,0x03,0xb6,0x07,0x02,0x03,0xc0,0x08,0x00,0x02,0xc1,0x03,0x03,
    0xc2,0x03,0x03,0x03,0xc5,0x4a,0x3e,0x02,0xc7,0x40,0x02,0x26,0x01,0x02,0xf2,0x01,
    0x10,0xe0,0x3f,0x2a,0x27,0x2d,0x26,0x0c,0x53,0xf4,0x3f,0x16,0x1d,0x15,0x0f,0x06,
    0x00,0x10,0xe1,0x00,0x15,0x18,0x11,0x19,0x13,0x2b,0x63,0x40,0x09,0x22,0x2a,0x30,
    0x39,0x3f,0x02,0x35,0x00,0x02,0x13,0x00,0x05,0x2a,0x00,0x00,0x00,0x7f,0x02,0x3a,
    0x05,0x00,0x01,0x10,0x00,0x01,0x28,0x00,0x00,0x01,0x29,0x00,0x00,0x02,0x3d,0x07,
    0x02,0x3c,0x01,0x02,0x22,0x01,0x02,0x21,0x01,0x02,0x31,0x20,0x01,0xe2,0x01,0xe1,
    0x02,0x23,0x03,0x02,0x26,0x0e,0x02,0x27,0x70,0x02,0x20,0x3f,0x00,0x20,0x4f,0x23,
    0x80,0x54,0x68,0x75,0x6e,0x64,0x65,0x72,0x00,0x63,0x72,0x61,0x63,0x6b,0x65,0x72,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x01,0x02,0x67,0x69,0x6b,0x02,
    0x03,0xff,0xc4,0x02,0xc6,0x00,0xca,0x02,0xcc,0x02,0xd1,0x02,0xd3,0x00,0x02,0x03,
    0xff,0xc8,0x02,0xc6,0x00,0xce,0x02,0xcc,0x02,0xd6,0x02,0xd3,0x00,0x02,0x03,0x00,
    0x00,0xbc,0x00,0xd0,0x00,0xd8,0x04,0x03,0x00,0x00,0xbc,0xbd,0xc7,0x00,0xbf,0x00,
    0x61,0x00,0xd8,0xd4,0xd5,0x05,0x03,0x00,0xbc,0xbd,0xbd,0xbd,0xbe,0xbf,0x00,0x00,
    0x00,0xc0,0xc1,0xc2,0xc2,0xc2,0xc3,0x0f,0x05,0xff,0x00,0x00,0x00,0x00,0x6d,0x08,
    0x6e,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x6f,0x06,0x71,0x06,0x73,0x0a,0x75,0x08,
    0x76,0x0a,0x00,0x00,0x78,0x06,0x7a,0x06,0x7c,0x06,0x7e,0x06,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x06,0x82,0x06,0x84,0x06,0x86,0x08,0x87,0x06,
    0x89,0x06,0x8b,0x06,0x8d,0x04,0x8e,0x06,0x90,0x06,0x92,0x06,0x94,0x04,0x95,0x06,
    0x89,0x04,0x97,0x06,0x00,0x00,0x99,0x06,0x9b,0x04,0x9c,0x06,0x9e,0x06,0xa0,0x06,
    0xa2,0x04,0xa3,0x04,0x00,0x00,0x63,0x04,0xa4,0x04,0xa5,0x04,0xa6,0x06,0x00,0x00,
    0x63,0x04,0x00,0x00,0xa8,0x04,0xa9,0x06,0xab,0x04,0xac,0x06,0xae,0x06,0xb0,0x06,
    0xb2,0x06,0x00,0x00,0xb4,0x06,0xb6,0x06,0x89,0x04,0xb8,0x06,0x89,0x04,0xba,0x06,
    0x78,0xff,0x7a,0x00,0x7b,0x00,0x7c,0x49,0x7d,0x4a,0x7e,0xb2,0x7f,0x94,0x22,0x00,
    0x78,0xff,0x7a,0xbf,0x7b,0x25,0x7c,0x80,0x7d,0xfc,0x7e,0xdf,0x7f,0xb6,0x22,0x00,
    0x78,0xff,0x7a,0x80,0x7b,0xfc,0x7c,0xbf,0x7d,0x25,0x7e,0xd5,0x7f,0xfe,0x22,0x00,
    0x78,0x50,0x7a,0x80,0x7b,0xfc,0x7c,0xbf,0x7d,0x25,0x7e,0xff,0x7f,0xff,0x22,0x00,
    0x78,0xff,0x7a,0x00,0x7b,0xb0,0x7c,0x08,0x7d,0xca,0x7e,0xf7,0x7f,0xed,0x22,0x00,
    0x78,0xff,0x7a,0xef,0x7b,0x7b,0x7c,0x14,0x7d,0xa5,0x7e,0x59,0x7f,0xce,0x22,0x00,
    0x78,0x00,0x7a,0xff,0x7b,0xff,0x7c,0xb2,0x7d,0x94,0x7e,0x49,0x7f,0x4a,0x22,0x00,
    0x78,0xef,0x7a,0xff,0x7b,0xff,0x7c,0x59,0x7d,0xce,0x7e,0x14,0x7f,0xa5,0x22,0x00,
    0x78,0xff,0x7a,0xdf,0x7b,0x96,0x7c,0x2f,0x7d,0xfe,0x7e,0x5f,0x7f,0xdf,0x22,0x00,
    0x78,0xff,0x7a,0x2f,0x7b,0xfe,0x7c,0xdf,0x7d,0x96,0x7e,0x5a,0x7f,0xff,0x22,0x00,
    0x78,0xff,0x7a,0xff,0x7b,0xff,0x7c,0xff,0x7d,0xff,0x7e,0xff,0x7f,0xff,0x22,0x00,
    0x78,0xff,0x7a,0xff,0x7b,0xff,0x7c,0xff,0x7d,0xff,0x7e,0xff,0x7f,0xff,0x22,0x00,
    0x78,0xff,0x7a,0xff,0x7b,0xff,0x7c,0xff,0x7d,0xff,0x7e,0xff,0x7f,0xff,0x22,0x00,
    0x78,0xff,0x7a,0xff,0x7b,0xff,0x7c,0xff,0x7d,0xff,0x7e,0xff,0x7f,0xff,0x22,0x00,
    0x78,0xff,0x7a,0xff,0x7b,0xff,0x7c,0xff,0x7d,0xff,0x7e,0xff,0x7f,0xff,0x22,0x00,
    0x78,0xff,0x7a,0xff,0x7b,0xff,0x7c,0xff,0x7d,0xff,0x7e,0xff,0x7f,0xff,0x22,0x00,
    0x00,0x00,0x08,0x08,0x14,0x14,0x14,0x14,0x08,0x3c,0x03,0x23,0x04,0x0a,0x08,0x08,
    0x10,0x08,0x08,0x10,0x08,0x2a,0x00,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,
    0x1c,0x22,0x08,0x0c,0x1c,0x22,0x3e,0x20,0x10,0x18,0x3e,0x02,0x38,0x04,0x3e,0x20,
    0x1c,0x22,0x1c,0x22,0x00,0x00,0x00,0x00,0x10,0x08,0x00,0x00,0x04,0x08,0x1c,0x22,
    0x1c,0x22,0x08,0x14,0x1e,0x22,0x1c,0x22,0x1e,0x22,0x3e,0x02,0x3e,0x02,0x3c,0x02,
    0x22,0x22,0x1c,0x08,0x20,0x20,0x22,0x12,0x02,0x02,0x22,0x36,0x22,0x22,0x1c,0x22,
    0x1e,0x22,0x1c,0x22,0x1e,0x22,0x1c,0x22,0x3e,0x08,0x22,0x22,0x22,0x22,0x22,0x22,
    0x22,0x22,0x22,0x22,0x3e,0x20,0x3e,0x06,0x00,0x02,0x3e,0x30,0x00,0x00,0x00,0x00,
    0x04,0x08,0x00,0x00,0x02,0x02,0x00,0x00,0x20,0x20,0x00,0x00,0x18,0x24,0x00,0x00,
    0x02,0x02,0x08,0x00,0x10,0x00,0x02,0x02,0x0c,0x08,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x04,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x38,0x0c,0x08,0x08,0x0e,0x18,0x00,0x00,0x63,0x77,
    0x01,0x01,0x03,0x03,0x07,0x07,0x0f,0x0f,0x1f,0x1f,0x3f,0x3f,0x7f,0x7f,0x00,0x00,
    0x00,0x00,0x00,0x04,0x00,0x1c,0x00,0x60,0x00,0x60,0x00,0x00,0x00,0x00,0xff,0xff,
    0x01,0x00,0x7f,0x7f,0x40,0x00,0x78,0x3c,0x00,0x00,0xe0,0xc0,0x01,0x03,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x08,0x08,0x14,0x00,0x3e,0x14,0x0a,0x1c,0x10,0x08,0x0a,0x04,0x08,0x00,
    0x04,0x04,0x20,0x20,0x1c,0x08,0x08,0x3e,0x00,0x00,0x00,0x3e,0x00,0x00,0x10,0x08,
    0x32,0x2a,0x08,0x08,0x20,0x18,0x10,0x18,0x14,0x12,0x1e,0x20,0x02,0x1e,0x10,0x08,
    0x22,0x1c,0x22,0x3c,0x08,0x00,0x08,0x00,0x04,0x02,0x3e,0x00,0x10,0x20,0x10,0x08,
    0x2a,0x3a,0x22,0x22,0x22,0x1e,0x02,0x02,0x22,0x22,0x02,0x1e,0x02,0x1e,0x02,0x02,
    0x22,0x3e,0x08,0x08,0x20,0x20,0x0a,0x06,0x02,0x02,0x2a,0x2a,0x26,0x2a,0x22,0x22,
    0x22,0x1e,0x22,0x22,0x22,0x1e,0x02,0x1c,0x08,0x08,0x22,0x22,0x22,0x22,0x22,0x2a,
    0x14,0x08,0x14,0x08,0x10,0x08,0x06,0x06,0x04,0x08,0x30,0x30,0x08,0x14,0x00,0x00,
    0x10,0x00,0x1c,0x20,0x1e,0x22,0x3c,0x02,0x3c,0x22,0x1c,0x22,0x04,0x1e,0x1c,0x22,
    0x1e,0x22,0x0c,0x08,0x18,0x10,0x22,0x12,0x08,0x08,0x36,0x2a,0x1e,0x22,0x1c,0x22,
    0x1e,0x22,0x3c,0x22,0x3a,0x06,0x3c,0x02,0x1e,0x04,0x22,0x22,0x22,0x22,0x22,0x22,
    0x22,0x14,0x22,0x22,0x3e,0x10,0x0c,0x06,0x08,0x08,0x18,0x30,0x06,0x49,0x3e,0x1c,
    0x01,0x01,0x03,0x03,0x07,0x07,0x0f,0x0f,0x1f,0x1f,0x3f,0x3f,0x7f,0x7f,0x00,0x40,
    0x00,0xc0,0x0e,0x8f,0x12,0x90,0x2c,0x08,0x3c,0x0f,0x00,0x00,0x06,0x0f,0xff,0x07,
    0x00,0x00,0x7f,0x70,0x00,0x00,0x1e,0x0f,0x00,0x01,0x80,0x00,0x07,0x0f,0x00,0x08,
    0x00,0x3c,0x00,0x24,0x00,0xf8,0x00,0x08,0x00,0x07,0x00,0x04,0x00,0x0f,0x00,0x09,
    0x07,0x07,0x00,0x00,0x70,0x70,0x00,0x00,0x00,0x00,0xe0,0xc0,0x79,0x3f,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x78,0x78,0x00,0x00,0x00,0x00,
    0x0f,0x0f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x80,0xc0,0x00,0x00,0xe7,0xc3,0x01,0x03,0x00,0x00,0x0f,0x0f,0x00,0x00,
    0x00,0x00,0x00,0x00,0x3c,0x3c,0x78,0x78,0x3c,0x3c,0xc0,0xc0,0xf3,0xf3,0x00,0x00,
    0xf0,0xe0,0x00,0x81,0x00,0x00,0x0f,0x07,0x00,0x00,0x00,0x00,0xf0,0xf0,0x00,0x00,
    0x3c,0x3c,0x00,0x00,0x78,0x78,0x00,0x00,0x0f,0x0f,0x00,0x00,0x3c,0x3c,0x00,0x00,
    0xf0,0xf0,0x00,0x00,0x0f,0x0f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x60,0x60,
    0x06,0x1e,0x60,0xe0,0x00,0xff,0x06,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0xc6,0xc6,0x00,0x00,0x60,0x60,0x01,0x00,0xc0,0xc0,0x00,0x00,
    0x60,0x60,0x0e,0x18,0x82,0x04,0xe3,0xc0,0xff,0xff,0x03,0x01,0x00,0x00,0x80,0x00,
    0xe0,0xc0,0x00,0x00,0x00,0x00,0x1e,0x1e,0x78,0xf8,0x00,0xff,0x00,0xff,0x1e,0x1f,
    0x00,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xf8,0x7c,0x7f,0xff,0x00,0x01,0x00,0x00,
    0x80,0xc0,0x07,0x03,0xc0,0x80,0x07,0x07,0x78,0xf8,0x00,0x00,0x00,0x00,0xf8,0x78,
    0xe0,0x80,0xbf,0xff,0x0f,0x07,0xbf,0xff,0x00,0x00,0x00,0x80,0xff,0xff,0x00,0x01,
    0x00,0x80,0x3f,0x1f,0xfc,0xf8,0x00,0x01,0xe0,0xc0,0x07,0x0f,0x00,0x00,0xe0,0xf0,
    0x07,0x07,0x00,0x00,0x70,0x70,0x00,0x00,0x00,0x00,0x80,0x00,0x1f,0x0f,0x00,0xff,
    0x00,0x01,0x00,0xff,0x00,0x80,0x00,0xbc,0x00,0xa4,0x78,0xff,0x00,0xf7,0x00,0x14,
    0x0f,0xff,0x00,0x80,0x00,0xfc,0x00,0x04,0x00,0xff,0x00,0xf3,0x00,0x12,0x00,0x0f,
    0x00,0x08,0xe0,0xf0,0x00,0x00,0x81,0x00,0x07,0x0f,0x00,0x00,0x0f,0xff,0x00,0x00,
    0x00,0xff,0x00,0x80,0x3c,0x3c,0x78,0x78,0x3c,0xfc,0xc0,0xff,0xf3,0xf3,0x00,0x00,
    0xc0,0x80,0xc3,0xe7,0x00,0x00,0x03,0x01,0x00,0xff,0x00,0x01,0xf0,0xff,0x00,0x00,
    0x3c,0x3c,0x00,0x00,0x78,0x78,0x00,0x00,0x0f,0xff,0x00,0x80,0x3c,0xfc,0x00,0x00,
    0xf0,0xf3,0x00,0x02,0x0f,0x0f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x60,0x60,
    0x1e,0x1e,0xc0,0x00,0xff,0x00,0x03,0x00,0x00,0x60,0x00,0x10,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0xc6,0xc6,0x00,0x00,0x68,0x6c,0x00,0x00,0xc0,0xc0,0x00,0x00,
    0x68,0x6c,0x30,0x60,0x08,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0xc0,0x00,0x03,0x1e,0x1e,0xf0,0xf0,0xff,0xff,0xff,0xff,0x0f,0x0f,
    0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x3c,0x1e,0xfc,0xf0,0x07,0x1f,0x00,0x00,
    0xc0,0xe0,0x03,0x01,0xc0,0xc0,0x07,0x03,0xf8,0xf0,0x03,0x0f,0x00,0x00,0x7c,0x3c,
    0x00,0x00,0xfe,0xf8,0x07,0x03,0xfe,0xf8,0x00,0x00,0xc0,0xe0,0xff,0xe7,0x03,0x07,
    0xc0,0xe0,0x0f,0x07,0xf0,0xe0,0x03,0x07,0x80,0x00,0x1f,0x3f,0x00,0x00,0xf8,0xfc,
    0x07,0x03,0xe7,0xff,0xff,0xff,0x07,0x01,0xff,0xff,0xff,0xff,0xe0,0x80,0xf8,0xf8,
    0x1f,0x1f,0x00,0x00,0x00,0x00,0xf8,0xf8,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x80,0xff,0xff,0xff,0xff,0xff,0xff,0x00,0x01,0xfc,0xfc,0xc0,0xc0,0x3f,0x3f,
    0x00,0x00,0xfc,0xfc,0x03,0x03,0xfe,0xf8,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0x7f,0x1f,0x00,0x00,0x00,0x00,0x00,0x00,0xe0,0xe0,0xff,0xff,0xff,0xff,0x3f,0xff,
    0x00,0x00,0xfe,0xfe,0x03,0x03,0xfc,0xf0,0x00,0x00,0x3f,0x3f,0xfc,0xf0,0x3f,0x3f,
    0x00,0x00,0x00,0x00,0xfc,0xfc,0x0f,0x0f,0x00,0x00,0x00,0x00,0xc0,0xc0,0xff,0xff,
    0xfe,0xfc,0xff,0xff,0x0f,0x3f,0x00,0x00,0xff,0xfc,0xcf,0xff,0xff,0xff,0x00,0x00,
    0xff,0xf8,0x07,0x01,0xff,0xf8,0x00,0x00,0x00,0x80,0xff,0xff,0xff,0xff,0x00,0x01,
    0x1f,0x0f,0xf8,0xf0,0x00,0x80,0x00,0x01,0xfe,0xfe,0x1f,0x0f,0xf8,0xf0,0x7f,0x7f,
    0xfc,0xfc,0x3f,0x7f,0x00,0x00,0x00,0x00,0xfc,0xfe,0x3f,0x3f,0xfe,0xfc,0x7f,0x3f,
    0x7f,0x3f,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0x01,0x00,0xff,0xff,0xff,0xff,0x01,0x00,0xff,0xff,0xff,0xff,0x80,0x00,0xf8,0xf8,
    0x1f,0xff,0x00,0x00,0x00,0xff,0xf8,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x80,0xc0,0xff,0xff,0xff,0xff,0xff,0xff,0x01,0x03,0xfc,0xfc,0xc0,0xc0,0xff,0xff,
    0xff,0xff,0xff,0xff,0x03,0x03,0x00,0x00,0x00,0x00,0xf8,0xfe,0x03,0x0f,0x00,0x00,
    0x00,0x00,0x00,0x00,0xf8,0xfe,0x03,0x0f,0xf0,0xf0,0xff,0x1f,0xff,0xff,0xff,0xff,
    0x00,0x00,0xff,0xff,0x01,0x01,0xc0,0x00,0x03,0x07,0x1f,0x1f,0xe0,0xe0,0x3f,0x3f,
    0x00,0x00,0x00,0x00,0xfe,0xfe,0x07,0x07,0x00,0x03,0x00,0x00,0xe0,0xe0,0x7f,0x7f,
    0xf0,0xc0,0xff,0xff,0xff,0xff,0x00,0x00,0xf0,0xc0,0xff,0xff,0x7f,0x7f,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xc0,0xe0,0xff,0xff,0xff,0xff,0x03,0x07,
    0x07,0x03,0xe0,0xc0,0xc0,0xe0,0x03,0x07,0xff,0xff,0x07,0x03,0xe0,0xc0,0xff,0xff,
    0xf8,0xf0,0xff,0xff,0x00,0x01,0x00,0x80,0xff,0xff,0x1f,0x0f,0xf8,0xf0,0x1f,0x0f,
    0x0f,0x03,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0x00,0x00,0x08,0x00,0x00,0x00,0x3e,0x14,0x28,0x1e,0x04,0x62,0x2a,0x12,0x00,0x00,
    0x04,0x08,0x20,0x10,0x1c,0x2a,0x08,0x08,0x10,0x10,0x00,0x00,0x00,0x00,0x04,0x02,
    0x26,0x22,0x08,0x08,0x04,0x02,0x20,0x22,0x3e,0x10,0x20,0x22,0x22,0x22,0x04,0x04,
    0x22,0x22,0x20,0x10,0x08,0x00,0x08,0x08,0x04,0x08,0x3e,0x00,0x10,0x08,0x08,0x00,
    0x1a,0x02,0x3e,0x22,0x22,0x22,0x02,0x22,0x22,0x22,0x02,0x02,0x02,0x02,0x32,0x22,
    0x22,0x22,0x08,0x08,0x20,0x22,0x0a,0x12,0x02,0x02,0x22,0x22,0x32,0x22,0x22,0x22,
    0x02,0x02,0x2a,0x12,0x0a,0x12,0x20,0x22,0x08,0x08,0x22,0x22,0x22,0x14,0x2a,0x36,
    0x14,0x22,0x08,0x08,0x04,0x02,0x06,0x06,0x10,0x20,0x30,0x30,0x22,0x00,0x00,0x00,
    0x00,0x00,0x3c,0x22,0x22,0x22,0x02,0x02,0x22,0x22,0x3e,0x02,0x04,0x04,0x22,0x3c,
    0x22,0x22,0x08,0x08,0x10,0x10,0x0e,0x12,0x08,0x08,0x2a,0x2a,0x22,0x22,0x22,0x22,
    0x22,0x1e,0x22,0x3c,0x02,0x02,0x1c,0x20,0x04,0x24,0x22,0x32,0x22,0x14,0x2a,0x2a,
    0x08,0x14,0x22,0x3c,0x08,0x04,0x0c,0x0c,0x08,0x08,0x18,0x18,0x30,0x00,0x3e,0x77,
    0x01,0x01,0x03,0x03,0x07,0x07,0x0f,0x0f,0x1f,0x1f,0x3f,0x3f,0x7f,0x7f,0x90,0x3c,
    0xf0,0x3c,0xd8,0x78,0x20,0x40,0x01,0x00,0x01,0x00,0x80,0xc0,0x1f,0x3f,0x07,0x07,
    0x00,0x00,0x70,0x70,0x00,0x00,0x1e,0x3c,0x00,0x00,0x80,0xc0,0x07,0x03,0x00,0x00,
    0x3c,0x3c,0x00,0x00,0xf8,0xf8,0x00,0x00,0x07,0x07,0x00,0x00,0x0f,0x0f,0x00,0x00,
    0x00,0x00,0x08,0x00,0x00,0x00,0x14,0x00,0x08,0x00,0x60,0x00,0x2c,0x00,0x00,0x00,
    0x10,0x00,0x08,0x00,0x08,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x08,0x00,0x00,0x00,
    0x1c,0x00,0x1c,0x00,0x3e,0x00,0x1c,0x00,0x10,0x00,0x1c,0x00,0x1c,0x00,0x04,0x00,
    0x1c,0x00,0x0e,0x00,0x00,0x00,0x04,0x00,0x10,0x00,0x00,0x00,0x04,0x00,0x08,0x00,
    0x3c,0x00,0x22,0x00,0x1e,0x00,0x1c,0x00,0x1e,0x00,0x3e,0x00,0x02,0x00,0x3c,0x00,
    0x22,0x00,0x1c,0x00,0x1c,0x00,0x22,0x00,0x3e,0x00,0x22,0x00,0x22,0x00,0x1c,0x00,
    0x02,0x00,0x2c,0x00,0x22,0x00,0x1c,0x00,0x08,0x00,0x1c,0x00,0x08,0x00,0x22,0x00,
    0x22,0x00,0x08,0x00,0x3e,0x00,0x3e,0x00,0x00,0x00,0x3e,0x00,0x00,0x00,0x00,0x7f,
    0x00,0x00,0x3c,0x00,0x1e,0x00,0x3c,0x00,0x3c,0x00,0x3c,0x00,0x04,0x00,0x20,0x1c,
    0x22,0x00,0x1c,0x00,0x12,0x0c,0x22,0x00,0x1c,0x00,0x22,0x00,0x22,0x00,0x1c,0x00,
    0x02,0x02,0x20,0x20,0x02,0x00,0x1e,0x00,0x18,0x00,0x2c,0x00,0x08,0x00,0x36,0x00,
    0x22,0x00,0x20,0x1c,0x3e,0x00,0x38,0x00,0x08,0x08,0x0e,0x00,0x00,0x00,0x63,0x00,
    0x01,0x01,0x03,0x03,0x07,0x07,0x0f,0x0f,0x1f,0x1f,0x3f,0x3f,0x7f,0x7f,0x00,0x00,
    0x00,0x00,0x10,0x00,0x18,0x00,0x00,0x00,0x00,0x00,0xe0,0xf0,0x79,0xf0,0x07,0x07,
    0x00,0x00,0x70,0x70,0x00,0x00,0x78,0xf0,0x00,0x00,0xe0,0xf0,0x01,0x00,0x00,0x00,
    0x3c,0x00,0x24,0x00,0xf8,0x78,0x00,0x00,0x07,0x00,0x04,0x00,0x0f,0x0f,0x00,0x00,
    0xff,0xff,0x00,0x00,0x7f,0x7f,0x00,0x00,0x18,0x3c,0x18,0x00,0x06,0x00,0xff,0xff,
    0x00,0x00,0xff,0xff,0x00,0x00,0xbc,0xbc,0x00,0x00,0xff,0xff,0xf7,0xf7,0x00,0x00,
    0xff,0xff,0x00,0x00,0xfc,0xfc,0x00,0x00,0xff,0xff,0xf3,0xf3,0x00,0x00,0x0f,0x0f,
    0x00,0x00,0x78,0x3c,0x00,0x04,0x00,0x00,0x1e,0x3c,0x00,0x20,0xff,0xff,0x00,0x00,
    0xff,0xff,0x00,0x00,0x3c,0x3c,0x78,0x78,0xfc,0xfc,0xff,0xff,0xf3,0xf3,0x00,0x00,
    0x00,0x00,0xff,0x7e,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0xff,0xff,0x00,0x00,
    0x3c,0x3c,0x00,0x00,0x78,0x78,0x00,0x00,0xff,0xff,0x00,0x00,0xfc,0xfc,0x00,0x00,
    0xf3,0xf3,0x00,0x00,0x0f,0x0f,0x00,0x00,0x00,0xc0,0x00,0xff,0x00,0x03,0x60,0x60,
    0x1e,0x1e,0x00,0x00,0x00,0x00,0x00,0x00,0x30,0x18,0x08,0x04,0x00,0xc0,0x00,0x01,
    0x00,0x00,0x00,0x00,0xc6,0xc6,0x00,0x00,0x68,0x60,0x00,0x00,0xc0,0xc0,0x00,0x00,
    0x68,0x60,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0xf0,0xf0,0x0f,0x0f,0x1e,0x1e,0xc0,0x00,0xff,0xe0,0xff,0x01,0x03,0x00,
    0xff,0x00,0x00,0xe0,0x00,0x01,0x00,0x00,0x1e,0x0f,0xc0,0x00,0x7f,0xff,0x00,0x01,
    0xe0,0xf0,0x01,0x00,0xe0,0xe0,0x03,0x01,0xe0,0x80,0x3f,0xff,0x00,0x00,0x3e,0x1e,
    0x00,0x00,0xe0,0x00,0x01,0x00,0xe0,0x00,0x00,0x00,0xf0,0xf8,0xc3,0x81,0x0f,0x1f,
    0xe0,0xf0,0x03,0x01,0xc0,0x80,0x07,0x0f,0x00,0x00,0x7e,0xfc,0x00,0x00,0x7e,0x3f,
    0xff,0x00,0x01,0x00,0x7f,0x00,0x40,0x00,0x7e,0xff,0x00,0x00,0x00,0x00,0xff,0x0f,
    0x00,0x00,0xff,0x00,0x80,0x00,0xbc,0x3c,0x80,0x00,0xff,0x78,0xf7,0x00,0x14,0x00,
    0xff,0x0f,0x80,0x00,0xfc,0x3c,0x00,0x00,0xff,0xc0,0xf3,0xf3,0x00,0x00,0x0f,0x0f,
    0x00,0x00,0x3c,0x78,0x04,0x00,0x00,0x00,0x3c,0x1e,0x20,0x00,0xff,0x00,0x01,0x00,
    0xff,0xf0,0x00,0x00,0x3c,0x3c,0x78,0x78,0xfc,0x3c,0xff,0x00,0xf3,0xf0,0x02,0x00,
    0x00,0x00,0x3c,0x18,0x00,0x18,0x00,0x00,0xff,0x00,0x01,0x00,0xff,0x00,0x80,0x00,
    0x3c,0x00,0x24,0x00,0x78,0x00,0x48,0x00,0xff,0x00,0x81,0x00,0xfc,0x00,0x04,0x00,
    0xf3,0x00,0x12,0x00,0x0f,0x00,0x08,0x00,0xe0,0x60,0xff,0x00,0x07,0x06,0x60,0x60,
    0x1e,0x06,0x00,0x00,0x00,0x00,0x00,0x00,0x0e,0xc6,0x82,0x48,0xe3,0x61,0x03,0x03,
    0x00,0xc0,0x80,0x40,0xc6,0xc6,0x00,0x48,0x60,0x61,0x01,0x00,0xc0,0xc0,0x00,0x40,
    0x60,0x60,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0xf8,0x78,0x1f,0x1e,0x1e,0x1e,0x00,0x00,0xf0,0xf8,0x07,0x1f,0x00,0x00,
    0x00,0x00,0xf0,0xf8,0x07,0x1f,0x00,0x80,0x0f,0x07,0x00,0x00,0xfc,0xf0,0x03,0x07,
    0xf0,0xf8,0x00,0x00,0xf0,0xf0,0x01,0x00,0x00,0x00,0xfe,0xf8,0x03,0x0f,0x1f,0x0f,
    0x00,0x00,0x18,0x7e,0x00,0x00,0x00,0x00,0x18,0x7e,0xfc,0x7e,0x00,0x00,0x3f,0x7e,
    0xf0,0xe0,0x01,0x03,0x80,0xc0,0x0f,0x07,0x00,0x00,0xf8,0xf0,0x81,0xc3,0x1f,0x0f,
    0x00,0x00,0x7e,0x18,0xff,0x1f,0x00,0x00,0xff,0x00,0xff,0xf8,0x00,0x00,0xf8,0xf8,
    0xff,0xff,0x00,0x01,0xff,0xff,0xff,0xff,0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x00,
    0xc0,0xc0,0xff,0xff,0xff,0xff,0xff,0xff,0x03,0x03,0xfc,0xfc,0xc0,0x80,0xff,0xff,
    0xff,0xff,0xff,0xff,0x03,0x01,0x00,0x00,0x00,0x80,0xff,0xff,0x3f,0xff,0x00,0x00,
    0x00,0x00,0x00,0x80,0xff,0xff,0x3f,0xff,0xf8,0xf8,0x1f,0x0f,0xfc,0xf0,0xff,0xff,
    0x80,0x80,0xff,0xff,0x00,0x00,0x00,0x00,0x0f,0x1f,0x0f,0x0f,0xf0,0xf0,0x3f,0x1f,
    0x80,0x80,0x00,0x00,0xff,0xff,0x03,0x03,0x0f,0x3f,0x00,0x00,0xf0,0xf0,0x3f,0x3f,
    0x00,0x00,0xff,0xfc,0xff,0xff,0x00,0x00,0x00,0x00,0xff,0xff,0x3f,0x3f,0xc0,0xf0,
    0x03,0x0f,0x00,0x00,0x00,0x00,0x03,0x0f,0xf0,0xf8,0xff,0xff,0xff,0xff,0x0f,0x1f,
    0x01,0x00,0x80,0x00,0xf0,0xf8,0x0f,0x1f,0xff,0xff,0x03,0x07,0xc0,0xe0,0xff,0xff,
    0xe0,0xc0,0xff,0xff,0x03,0x07,0xc0,0xe0,0xff,0xff,0x07,0x03,0xe0,0xc0,0x07,0x03,
    0x00,0x00,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0x00,0x00,0x00,0x00,0x1f,0x1f,0x00,0x00,0x00,0x00,0xf8,0xf8,0x00,0x00,0xf8,0xf8,
    0xff,0xff,0x01,0x07,0xff,0xff,0xff,0xff,0x80,0xe0,0xf8,0xfe,0xff,0xff,0x1f,0x7f,
    0xc0,0xc0,0x3f,0x3f,0x00,0x00,0xfc,0xfc,0x03,0x03,0xfc,0xfc,0x80,0x00,0xff,0xff,
    0xff,0xff,0xff,0xff,0x01,0x00,0x00,0x00,0xc0,0xc0,0xff,0xff,0xff,0xff,0x03,0x0f,
    0x00,0x00,0xc0,0xc0,0xff,0xff,0xff,0xff,0xfc,0xfc,0x07,0x07,0xc0,0x00,0xff,0xff,
    0xc0,0xc0,0x7f,0x7f,0x00,0x00,0x00,0x00,0x1f,0x3f,0x07,0x07,0xf8,0xf8,0x1f,0x1f,
    0x80,0xc0,0x80,0x80,0xff,0xff,0x01,0x01,0xff,0xff,0x00,0x03,0xf8,0xf8,0x1f,0x1f,
    0x00,0x00,0xf0,0xc0,0xff,0xff,0x80,0x83,0x00,0x00,0xff,0xff,0x1f,0x0f,0xfc,0xfe,
    0x3f,0x7f,0x00,0x00,0x00,0x00,0x3f,0x7f,0xfc,0xfe,0x7f,0x3f,0xfe,0xfc,0x3f,0x7f,
    0x00,0x00,0x00,0x00,0xfc,0xfc,0x3f,0x3f,0xfe,0xfe,0x0f,0x1f,0xf0,0xf8,0x7f,0x7f,
    0x80,0x00,0xff,0xff,0x0f,0x1f,0xf0,0xf8,0xff,0xff,0x01,0x00,0x80,0x00,0x01,0x00,
    0x00,0x00,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
};
};  // namespace CPU
};  // namespace Cube
