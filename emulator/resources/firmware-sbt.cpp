/* -*- mode: C; c-basic-offset: 4; intent-tabs-mode: nil -*-
 *
 * Data for the Thundercracker emulator.
 * This file is AUTOMATICALLY GENERATED.
 *
 * Copyright <c> 2011 Sifteo, Inc. All rights reserved.
 */

#include <stdint.h>
#include <cube_cpu_opcodes.h>

namespace Cube {
namespace CPU {

static int FASTCALL sbt_exception(em8051 *aCPU) {
	except(aCPU, EXCEPTION_SBT);
	return 1;
}

static int FASTCALL sbt_block_0000(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0000;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x81,0xd6);
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x00,0xb7);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0003(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0003;
	clk += Opcodes::reti                (aCPU, pc, 0x32,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_000b(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x000b;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x15,0x1f);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0013(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0013;
	clk += Opcodes::reti                (aCPU, pc, 0x32,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_001b(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x001b;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x15,0xa7);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0023(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0023;
	clk += Opcodes::reti                (aCPU, pc, 0x32,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_002b(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x002b;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x15,0xb6);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0033(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0033;
	clk += Opcodes::reti                (aCPU, pc, 0x32,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_003b(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x003b;
	clk += Opcodes::reti                (aCPU, pc, 0x32,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0043(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0043;
	clk += Opcodes::reti                (aCPU, pc, 0x32,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_004b(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x004b;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x11,0x1d);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0053(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0053;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x14,0x35);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0056(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0056;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x00,0xb7);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0059(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0059;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0xfe,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_00b4(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x00b4;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x00,0x56);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_00b7(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x00b7;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x0e,0xee);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_00ba(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x00ba;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x14,0x0a);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_00bd(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x00bd;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x18,0x92);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_00c0(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x00c0;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x16,0xa1);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_00c3(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x00c3;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x1c,0xaf);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_00c6(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x00c6;
	clk += Opcodes::setb_bitaddr        (aCPU, pc, 0xd2,0xaf,0x00);
	clk += Opcodes::setb_bitaddr        (aCPU, pc, 0xd2,0xe8,0x00);
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x1d,0xda);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_00cd(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x00cd;
	clk += Opcodes::clr_bitaddr         (aCPU, pc, 0xc2,0x00,0x00);
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x00,0xec);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_00d2(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x00d2;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x01,0x54);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_00d5(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x00d5;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x18,0xad);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_00d8(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x00d8;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x59,0x00);
	clk += Opcodes::clr_c               (aCPU, pc, 0xc3,0x00,0x00);
	clk += Opcodes::subb_a_mem          (aCPU, pc, 0x95,0x19,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfa,0x00,0x00);
	clk += Opcodes::cjne_rx_imm_offset  (aCPU, pc, 0xba,0x26,0x03);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_00e1(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x00e1;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x0f,0x21);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_00e4(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x00e4;
	clk += Opcodes::jb_bitaddr_offset   (aCPU, pc, 0x20,0x00,0xe6);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_00e7(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x00e7;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x17,0x1e);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_00ea(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x00ea;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0xe1,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_00ec(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x00ec;
	clk += Opcodes::orl_mem_imm         (aCPU, pc, 0x43,0x18,0x40);
	clk += Opcodes::mov_dptr_imm        (aCPU, pc, 0x90,0x03,0xff);
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::jb_bitaddr_offset   (aCPU, pc, 0x20,0xe3,0x09);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_00f6(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x00f6;
	clk += Opcodes::anl_mem_imm         (aCPU, pc, 0x53,0x18,0xbf);
	clk += Opcodes::rr_a                (aCPU, pc, 0x03,0x00,0x00);
	clk += Opcodes::xrl_a_mem           (aCPU, pc, 0x65,0x18,0x00);
	clk += Opcodes::rrc_a               (aCPU, pc, 0x13,0x00,0x00);
	clk += Opcodes::jnc_offset          (aCPU, pc, 0x50,0x54,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_00ff(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x00ff;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x18,0x00);
	clk += Opcodes::inc_a               (aCPU, pc, 0x04,0x00,0x00);
	clk += Opcodes::xrl_a_mem           (aCPU, pc, 0x65,0x18,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0x3f,0x00);
	clk += Opcodes::xrl_mem_a           (aCPU, pc, 0x62,0x18,0x00);
	clk += Opcodes::setb_bitaddr        (aCPU, pc, 0xd2,0x00,0x00);
	clk += Opcodes::mov_dptr_imm        (aCPU, pc, 0x90,0x03,0xfe);
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0x3c,0x00);
	clk += Opcodes::mov_dptr_imm        (aCPU, pc, 0x90,0x01,0x14);
	clk += Opcodes::jmp_indir_a_dptr    (aCPU, pc, 0x73,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0114(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0114;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x0f,0xdd);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0117(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0117;
	clk += Opcodes::nop                 (aCPU, pc, 0x00,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0118(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0118;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x2d,0xea);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_011b(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x011b;
	clk += Opcodes::nop                 (aCPU, pc, 0x00,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_011c(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x011c;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x0e,0xbb);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_011f(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x011f;
	clk += Opcodes::nop                 (aCPU, pc, 0x00,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0120(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0120;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x0c,0xf7);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0123(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0123;
	clk += Opcodes::nop                 (aCPU, pc, 0x00,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0124(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0124;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x0d,0xd7);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0127(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0127;
	clk += Opcodes::nop                 (aCPU, pc, 0x00,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0128(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0128;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x0e,0x71);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_012b(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x012b;
	clk += Opcodes::nop                 (aCPU, pc, 0x00,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_012c(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x012c;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x02,0xb0);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_012f(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x012f;
	clk += Opcodes::nop                 (aCPU, pc, 0x00,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0130(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0130;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x02,0xce);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0133(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0133;
	clk += Opcodes::nop                 (aCPU, pc, 0x00,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0134(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0134;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x04,0x6d);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0137(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0137;
	clk += Opcodes::nop                 (aCPU, pc, 0x00,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0138(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0138;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x0a,0xd7);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_013b(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x013b;
	clk += Opcodes::nop                 (aCPU, pc, 0x00,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_013c(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x013c;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x0f,0xdd);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_013f(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x013f;
	clk += Opcodes::nop                 (aCPU, pc, 0x00,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0140(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0140;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x0f,0xdd);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0143(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0143;
	clk += Opcodes::nop                 (aCPU, pc, 0x00,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0144(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0144;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x0f,0xdd);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0147(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0147;
	clk += Opcodes::nop                 (aCPU, pc, 0x00,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0148(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0148;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x0f,0xdd);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_014b(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x014b;
	clk += Opcodes::nop                 (aCPU, pc, 0x00,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_014c(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x014c;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x0f,0xdd);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_014f(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x014f;
	clk += Opcodes::nop                 (aCPU, pc, 0x00,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0150(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0150;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x0f,0xdd);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0153(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0153;
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0154(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0154;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x18,0x00);
	clk += Opcodes::xrl_a_mem           (aCPU, pc, 0x65,0x48,0x00);
	clk += Opcodes::jz_offset           (aCPU, pc, 0x60,0x05,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_015a(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x015a;
	clk += Opcodes::xrl_mem_a           (aCPU, pc, 0x62,0x48,0x00);
	clk += Opcodes::orl_mem_imm         (aCPU, pc, 0x43,0x55,0x01);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_015f(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x015f;
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0160(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0160;
	clk += Opcodes::push_mem            (aCPU, pc, 0xc0,0x92,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x92,0x00);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x82,0x00);
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0xdc,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x82,0x00);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x83,0x00);
	clk += Opcodes::addc_a_imm          (aCPU, pc, 0x34,0xff,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x83,0x00);
	clk += Opcodes::pop_mem             (aCPU, pc, 0xd0,0x92,0x00);
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0174(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0174;
	clk += Opcodes::mov_rx_mem          (aCPU, pc, 0xaa,0x26,0x00);
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0x28,0x82);
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0x29,0x83);
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x80,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x3b);
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x80,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x3d);
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xda,0x0c,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_018c(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x018c;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x82,0x00);
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0xdc,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x82,0x00);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x83,0x00);
	clk += Opcodes::addc_a_imm          (aCPU, pc, 0x34,0xff,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x83,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0198(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0198;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x25,0x00);
	clk += Opcodes::add_a_mem           (aCPU, pc, 0x25,0x27,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x80,0x00);
	clk += Opcodes::mov_rx_mem          (aCPU, pc, 0xab,0x23,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_01a0(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x01a0;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xdb,0xf6,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_01aa(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x01aa;
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7b,0x0f,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8a,0x04,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_01ae(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x01ae;
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x80,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x3b);
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x80,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x3d);
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xdc,0x0c,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_01be(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x01be;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x82,0x00);
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0xdc,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x82,0x00);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x83,0x00);
	clk += Opcodes::addc_a_imm          (aCPU, pc, 0x34,0xff,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x83,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_01ca(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x01ca;
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0x27,0x80);
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x20,0xc4);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_01d0(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x01d0;
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xdb,0xdc,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_01d2(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x01d2;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x24,0x00);
	clk += Opcodes::jz_offset           (aCPU, pc, 0x60,0x2e,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_01d6(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x01d6;
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x80,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x3b);
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x80,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x3d);
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xec,0x00,0x00);
	clk += Opcodes::dec_a               (aCPU, pc, 0x14,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfa,0x00,0x00);
	clk += Opcodes::jnz_offset          (aCPU, pc, 0x70,0x0c,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_01e9(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x01e9;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x82,0x00);
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0xdc,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x82,0x00);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x83,0x00);
	clk += Opcodes::addc_a_imm          (aCPU, pc, 0x34,0xff,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x83,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_01f5(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x01f5;
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0x27,0x80);
	clk += Opcodes::mov_rx_mem          (aCPU, pc, 0xaa,0x24,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_01fa(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x01fa;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xda,0xf6,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0204(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0204;
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0205(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0205;
	clk += Opcodes::clr_bitaddr         (aCPU, pc, 0xc2,0xb9,0x00);
	clk += Opcodes::mov_dptr_imm        (aCPU, pc, 0x90,0x03,0xfa);
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfa,0x00,0x00);
	clk += Opcodes::mov_dptr_imm        (aCPU, pc, 0x90,0x03,0xfb);
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfb,0x00,0x00);
	clk += Opcodes::setb_bitaddr        (aCPU, pc, 0xd2,0xb9,0x00);
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xea,0x00,0x00);
	clk += Opcodes::swap_a              (aCPU, pc, 0xc4,0x00,0x00);
	clk += Opcodes::rl_a                (aCPU, pc, 0x23,0x00,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0x1f,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfc,0x00,0x00);
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xeb,0x00,0x00);
	clk += Opcodes::swap_a              (aCPU, pc, 0xc4,0x00,0x00);
	clk += Opcodes::rl_a                (aCPU, pc, 0x23,0x00,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0x1f,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfd,0x00,0x00);
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xeb,0x00,0x00);
	clk += Opcodes::swap_a              (aCPU, pc, 0xc4,0x00,0x00);
	clk += Opcodes::rl_a                (aCPU, pc, 0x23,0x00,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0xe0,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x27,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7b,0x00,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8d,0x28,0x00);
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xeb,0x00,0x00);
	clk += Opcodes::xch_a_mem           (aCPU, pc, 0xc5,0x28,0x00);
	clk += Opcodes::add_a_mem           (aCPU, pc, 0x25,0xe0,0x00);
	clk += Opcodes::xch_a_mem           (aCPU, pc, 0xc5,0x28,0x00);
	clk += Opcodes::rlc_a               (aCPU, pc, 0x33,0x00,0x00);
	clk += Opcodes::xch_a_mem           (aCPU, pc, 0xc5,0x28,0x00);
	clk += Opcodes::add_a_mem           (aCPU, pc, 0x25,0xe0,0x00);
	clk += Opcodes::xch_a_mem           (aCPU, pc, 0xc5,0x28,0x00);
	clk += Opcodes::rlc_a               (aCPU, pc, 0x33,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x29,0x00);
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xeb,0x00,0x00);
	clk += Opcodes::swap_a              (aCPU, pc, 0xc4,0x00,0x00);
	clk += Opcodes::rl_a                (aCPU, pc, 0x23,0x00,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0xe0,0x00);
	clk += Opcodes::xch_a_rx            (aCPU, pc, 0xcd,0x00,0x00);
	clk += Opcodes::swap_a              (aCPU, pc, 0xc4,0x00,0x00);
	clk += Opcodes::rl_a                (aCPU, pc, 0x23,0x00,0x00);
	clk += Opcodes::xch_a_rx            (aCPU, pc, 0xcd,0x00,0x00);
	clk += Opcodes::xrl_a_rx            (aCPU, pc, 0x6d,0x00,0x00);
	clk += Opcodes::xch_a_rx            (aCPU, pc, 0xcd,0x00,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0xe0,0x00);
	clk += Opcodes::xch_a_rx            (aCPU, pc, 0xcd,0x00,0x00);
	clk += Opcodes::xrl_a_rx            (aCPU, pc, 0x6d,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfb,0x00,0x00);
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xed,0x00,0x00);
	clk += Opcodes::add_a_mem           (aCPU, pc, 0x25,0x28,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x28,0x00);
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xeb,0x00,0x00);
	clk += Opcodes::addc_a_mem          (aCPU, pc, 0x35,0x29,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x29,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8c,0x03,0x00);
	clk += Opcodes::clr_a               (aCPU, pc, 0xe4,0x00,0x00);
	clk += Opcodes::xch_a_rx            (aCPU, pc, 0xcb,0x00,0x00);
	clk += Opcodes::add_a_mem           (aCPU, pc, 0x25,0xe0,0x00);
	clk += Opcodes::xch_a_rx            (aCPU, pc, 0xcb,0x00,0x00);
	clk += Opcodes::rlc_a               (aCPU, pc, 0x33,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfd,0x00,0x00);
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xeb,0x00,0x00);
	clk += Opcodes::add_a_mem           (aCPU, pc, 0x25,0x28,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x28,0x00);
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xed,0x00,0x00);
	clk += Opcodes::addc_a_mem          (aCPU, pc, 0x35,0x29,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x29,0x00);
	clk += Opcodes::mov_a_imm           (aCPU, pc, 0x74,0x07,0x00);
	clk += Opcodes::anl_a_rx            (aCPU, pc, 0x5a,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x24,0x00);
	clk += Opcodes::mov_a_imm           (aCPU, pc, 0x74,0x08,0x00);
	clk += Opcodes::clr_c               (aCPU, pc, 0xc3,0x00,0x00);
	clk += Opcodes::subb_a_mem          (aCPU, pc, 0x95,0x24,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x23,0x00);
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xea,0x00,0x00);
	clk += Opcodes::add_a_rx            (aCPU, pc, 0x2a,0x00,0x00);
	clk += Opcodes::add_a_mem           (aCPU, pc, 0x25,0xe0,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfa,0x00,0x00);
	clk += Opcodes::mov_a_imm           (aCPU, pc, 0x74,0x1c,0x00);
	clk += Opcodes::anl_a_rx            (aCPU, pc, 0x5a,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x25,0x00);
	clk += Opcodes::mov_a_imm           (aCPU, pc, 0x74,0x12,0x00);
	clk += Opcodes::clr_c               (aCPU, pc, 0xc3,0x00,0x00);
	clk += Opcodes::subb_a_rx           (aCPU, pc, 0x9c,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x26,0x00);
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0285(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0285;
	clk += Opcodes::mov_a_imm           (aCPU, pc, 0x74,0x20,0x00);
	clk += Opcodes::add_a_mem           (aCPU, pc, 0x25,0x27,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x27,0x00);
	clk += Opcodes::jnz_offset          (aCPU, pc, 0x70,0x22,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_028d(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x028d;
	clk += Opcodes::mov_a_imm           (aCPU, pc, 0x74,0x24,0x00);
	clk += Opcodes::add_a_mem           (aCPU, pc, 0x25,0x28,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x28,0x00);
	clk += Opcodes::clr_a               (aCPU, pc, 0xe4,0x00,0x00);
	clk += Opcodes::addc_a_mem          (aCPU, pc, 0x35,0x29,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x29,0x00);
	clk += Opcodes::clr_c               (aCPU, pc, 0xc3,0x00,0x00);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x28,0x00);
	clk += Opcodes::subb_a_imm          (aCPU, pc, 0x94,0x88,0x00);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x29,0x00);
	clk += Opcodes::subb_a_imm          (aCPU, pc, 0x94,0x02,0x00);
	clk += Opcodes::jc_offset           (aCPU, pc, 0x40,0x0c,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_02a3(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x02a3;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x28,0x00);
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0x78,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x28,0x00);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x29,0x00);
	clk += Opcodes::addc_a_imm          (aCPU, pc, 0x34,0xfd,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x29,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_02af(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x02af;
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_02b0(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x02b0;
	clk += Opcodes::mov_dptr_imm        (aCPU, pc, 0x90,0x03,0xfd);
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfa,0x00,0x00);
	clk += Opcodes::push_mem            (aCPU, pc, 0xc0,0x02,0x00);
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x0f,0xeb);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_02ba(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x02ba;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x02,0x05);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_02bd(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x02bd;
	clk += Opcodes::pop_mem             (aCPU, pc, 0xd0,0x02,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_02bf(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x02bf;
	clk += Opcodes::push_mem            (aCPU, pc, 0xc0,0x02,0x00);
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x01,0x74);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_02c4(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x02c4;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x02,0x85);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_02c7(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x02c7;
	clk += Opcodes::pop_mem             (aCPU, pc, 0xd0,0x02,0x00);
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xda,0xf4,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_02cb(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x02cb;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x10,0x79);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_02ce(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x02ce;
	clk += Opcodes::mov_dptr_imm        (aCPU, pc, 0x90,0x03,0xfd);
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfa,0x00,0x00);
	clk += Opcodes::push_mem            (aCPU, pc, 0xc0,0x02,0x00);
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x0f,0xeb);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_02d8(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x02d8;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x02,0x05);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_02db(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x02db;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x03,0x96);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_02de(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x02de;
	clk += Opcodes::pop_mem             (aCPU, pc, 0xd0,0x02,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_02e0(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x02e0;
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0x06,0x09);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_02e3(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x02e3;
	clk += Opcodes::push_mem            (aCPU, pc, 0xc0,0x02,0x00);
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x01,0x74);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_02e8(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x02e8;
	clk += Opcodes::pop_mem             (aCPU, pc, 0xd0,0x02,0x00);
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x07,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_02ec(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x02ec;
	clk += Opcodes::push_mem            (aCPU, pc, 0xc0,0x02,0x00);
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x2b,0x28);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_02f1(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x02f1;
	clk += Opcodes::pop_mem             (aCPU, pc, 0xd0,0x02,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_02f3(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x02f3;
	clk += Opcodes::push_mem            (aCPU, pc, 0xc0,0x02,0x00);
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x02,0x85);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_02f8(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x02f8;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x04,0x40);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_02fb(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x02fb;
	clk += Opcodes::pop_mem             (aCPU, pc, 0xd0,0x02,0x00);
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xda,0xe1,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_02ff(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x02ff;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x10,0x79);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0302(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0302;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x33,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0xf0,0x00);
	clk += Opcodes::jnz_offset          (aCPU, pc, 0x70,0x5c,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0308(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0308;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x33,0x00);
	clk += Opcodes::rl_a                (aCPU, pc, 0x23,0x00,0x00);
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0xa8,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x82,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x83,0x03);
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0xe9,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::jnz_offset          (aCPU, pc, 0x70,0x03,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0318(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0318;
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::jz_offset           (aCPU, pc, 0x60,0x49,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_031b(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x031b;
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0xea,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xeb,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xec,0x00);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0x01,0x1f);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0327(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0327;
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0x2d,0x84);
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0x2e,0x85);
	clk += Opcodes::mov_rx_mem          (aCPU, pc, 0xa8,0x2f,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x92,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0331(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0331;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0xe9,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0xe9,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xef,0x21);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xe0,0x02);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_033b(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x033b;
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_033d(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x033d;
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xd8,0xf2,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_033f(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x033f;
	clk += Opcodes::dec_mem             (aCPU, pc, 0x15,0x92,0x00);
	clk += Opcodes::anl_mem_imm         (aCPU, pc, 0x53,0x85,0x03);
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x0e,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0346(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0346;
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0x02,0x05);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0349(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0349;
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0x2f,0xef);
	clk += Opcodes::nop                 (aCPU, pc, 0x00,0x00,0x00);
	clk += Opcodes::nop                 (aCPU, pc, 0x00,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_034e(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x034e;
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0x2d,0x84);
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0x2e,0x85);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0354(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0354;
	clk += Opcodes::clr_bitaddr         (aCPU, pc, 0xc2,0x06,0x00);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0xe9,0x00);
	clk += Opcodes::jnz_offset          (aCPU, pc, 0x70,0x0c,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_035a(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x035a;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0xea,0x00);
	clk += Opcodes::jnz_offset          (aCPU, pc, 0x70,0x08,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_035e(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x035e;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0xeb,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0x01,0x00);
	clk += Opcodes::jnz_offset          (aCPU, pc, 0x70,0x02,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0364(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0364;
	clk += Opcodes::setb_bitaddr        (aCPU, pc, 0xd2,0x06,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0366(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0366;
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0367(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0367;
	clk += Opcodes::push_mem            (aCPU, pc, 0xc0,0x00,0x00);
	clk += Opcodes::push_mem            (aCPU, pc, 0xc0,0x01,0x00);
	clk += Opcodes::push_mem            (aCPU, pc, 0xc0,0x02,0x00);
	clk += Opcodes::mov_rx_mem          (aCPU, pc, 0xa8,0x82,0x00);
	clk += Opcodes::mov_rx_mem          (aCPU, pc, 0xa9,0x83,0x00);
	clk += Opcodes::mov_dptr_imm        (aCPU, pc, 0x90,0x1e,0x4c);
	clk += Opcodes::mov_a_imm           (aCPU, pc, 0x74,0x0f,0x00);
	clk += Opcodes::anl_a_rx            (aCPU, pc, 0x58,0x00,0x00);
	clk += Opcodes::movc_a_indir_a_dptr (aCPU, pc, 0x93,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfa,0x00,0x00);
	clk += Opcodes::mov_a_imm           (aCPU, pc, 0x74,0xf0,0x00);
	clk += Opcodes::anl_a_rx            (aCPU, pc, 0x58,0x00,0x00);
	clk += Opcodes::swap_a              (aCPU, pc, 0xc4,0x00,0x00);
	clk += Opcodes::movc_a_indir_a_dptr (aCPU, pc, 0x93,0x00,0x00);
	clk += Opcodes::add_a_rx            (aCPU, pc, 0x2a,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfa,0x00,0x00);
	clk += Opcodes::mov_a_imm           (aCPU, pc, 0x74,0x0f,0x00);
	clk += Opcodes::anl_a_rx            (aCPU, pc, 0x59,0x00,0x00);
	clk += Opcodes::movc_a_indir_a_dptr (aCPU, pc, 0x93,0x00,0x00);
	clk += Opcodes::add_a_rx            (aCPU, pc, 0x2a,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfa,0x00,0x00);
	clk += Opcodes::mov_a_imm           (aCPU, pc, 0x74,0xf0,0x00);
	clk += Opcodes::anl_a_rx            (aCPU, pc, 0x59,0x00,0x00);
	clk += Opcodes::swap_a              (aCPU, pc, 0xc4,0x00,0x00);
	clk += Opcodes::movc_a_indir_a_dptr (aCPU, pc, 0x93,0x00,0x00);
	clk += Opcodes::add_a_rx            (aCPU, pc, 0x2a,0x00,0x00);
	clk += Opcodes::rl_a                (aCPU, pc, 0x23,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x82,0x00);
	clk += Opcodes::pop_mem             (aCPU, pc, 0xd0,0x02,0x00);
	clk += Opcodes::pop_mem             (aCPU, pc, 0xd0,0x01,0x00);
	clk += Opcodes::pop_mem             (aCPU, pc, 0xd0,0x00,0x00);
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0396(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0396;
	clk += Opcodes::clr_bitaddr         (aCPU, pc, 0xc2,0xb9,0x00);
	clk += Opcodes::mov_dptr_imm        (aCPU, pc, 0x90,0x03,0xf8);
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfa,0x00,0x00);
	clk += Opcodes::mov_dptr_imm        (aCPU, pc, 0x90,0x03,0xf9);
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfb,0x00,0x00);
	clk += Opcodes::setb_bitaddr        (aCPU, pc, 0xd2,0xb9,0x00);
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xea,0x00,0x00);
	clk += Opcodes::swap_a              (aCPU, pc, 0xc4,0x00,0x00);
	clk += Opcodes::rl_a                (aCPU, pc, 0x23,0x00,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0x1f,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfc,0x00,0x00);
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xeb,0x00,0x00);
	clk += Opcodes::swap_a              (aCPU, pc, 0xc4,0x00,0x00);
	clk += Opcodes::rl_a                (aCPU, pc, 0x23,0x00,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0x1f,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x33,0x00);
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xeb,0x00,0x00);
	clk += Opcodes::swap_a              (aCPU, pc, 0xc4,0x00,0x00);
	clk += Opcodes::rl_a                (aCPU, pc, 0x23,0x00,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0xe0,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x32,0x00);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x24,0x00);
	clk += Opcodes::clr_c               (aCPU, pc, 0xc3,0x00,0x00);
	clk += Opcodes::subb_a_rx           (aCPU, pc, 0x9a,0x00,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0x07,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfb,0x00,0x00);
	clk += Opcodes::rrc_a               (aCPU, pc, 0x13,0x00,0x00);
	clk += Opcodes::mov_bitaddr_c       (aCPU, pc, 0x92,0x03,0x00);
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xeb,0x00,0x00);
	clk += Opcodes::mov_c_bitaddr       (aCPU, pc, 0xa2,0xe1,0x00);
	clk += Opcodes::mov_bitaddr_c       (aCPU, pc, 0x92,0x04,0x00);
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xeb,0x00,0x00);
	clk += Opcodes::mov_c_bitaddr       (aCPU, pc, 0xa2,0xe2,0x00);
	clk += Opcodes::mov_bitaddr_c       (aCPU, pc, 0x92,0x05,0x00);
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xea,0x00,0x00);
	clk += Opcodes::add_a_rx            (aCPU, pc, 0x2a,0x00,0x00);
	clk += Opcodes::add_a_mem           (aCPU, pc, 0x25,0xe0,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfa,0x00,0x00);
	clk += Opcodes::mov_a_imm           (aCPU, pc, 0x74,0x1c,0x00);
	clk += Opcodes::anl_a_rx            (aCPU, pc, 0x5a,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x30,0x00);
	clk += Opcodes::mov_a_imm           (aCPU, pc, 0x74,0x08,0x00);
	clk += Opcodes::clr_c               (aCPU, pc, 0xc3,0x00,0x00);
	clk += Opcodes::subb_a_rx           (aCPU, pc, 0x9b,0x00,0x00);
	clk += Opcodes::add_a_mem           (aCPU, pc, 0x25,0xe0,0x00);
	clk += Opcodes::add_a_mem           (aCPU, pc, 0x25,0xe0,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfb,0x00,0x00);
	clk += Opcodes::mov_a_imm           (aCPU, pc, 0x74,0x1c,0x00);
	clk += Opcodes::anl_a_rx            (aCPU, pc, 0x5b,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x31,0x00);
	clk += Opcodes::clr_bitaddr         (aCPU, pc, 0xc2,0x02,0x00);
	clk += Opcodes::clr_bitaddr         (aCPU, pc, 0xc2,0x01,0x00);
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xec,0x00,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0xf0,0x00);
	clk += Opcodes::jz_offset           (aCPU, pc, 0x60,0x0a,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_03ed(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x03ed;
	clk += Opcodes::mov_a_imm           (aCPU, pc, 0x74,0x20,0x00);
	clk += Opcodes::clr_c               (aCPU, pc, 0xc3,0x00,0x00);
	clk += Opcodes::subb_a_rx           (aCPU, pc, 0x9c,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x2f,0x00);
	clk += Opcodes::setb_bitaddr        (aCPU, pc, 0xd2,0x02,0x00);
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x07,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_03f7(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x03f7;
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xec,0x00,0x00);
	clk += Opcodes::jz_offset           (aCPU, pc, 0x60,0x04,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_03fa(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x03fa;
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8c,0x2f,0x00);
	clk += Opcodes::setb_bitaddr        (aCPU, pc, 0xd2,0x01,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_03fe(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x03fe;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x2d,0x88);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x2e,0x02);
	clk += Opcodes::mov_a_imm           (aCPU, pc, 0x74,0xf0,0x00);
	clk += Opcodes::add_a_mem           (aCPU, pc, 0x25,0x33,0x00);
	clk += Opcodes::jc_offset           (aCPU, pc, 0x40,0x33,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_040a(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x040a;
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7a,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_040c(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x040c;
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xea,0x00,0x00);
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0x33,0x02);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0410(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0410;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x28,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0412(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0412;
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xea,0x00,0x00);
	clk += Opcodes::add_a_rx            (aCPU, pc, 0x2a,0x00,0x00);
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0xa8,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x82,0x00);
	clk += Opcodes::clr_a               (aCPU, pc, 0xe4,0x00,0x00);
	clk += Opcodes::addc_a_imm          (aCPU, pc, 0x34,0x03,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x83,0x00);
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfb,0x00,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfc,0x00,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8b,0x82,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8c,0x83,0x00);
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x03,0x67);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0429(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0429;
	clk += Opcodes::mov_rx_mem          (aCPU, pc, 0xab,0x82,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7c,0x00,0x00);
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xeb,0x00,0x00);
	clk += Opcodes::add_a_mem           (aCPU, pc, 0x25,0x2d,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x2d,0x00);
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xec,0x00,0x00);
	clk += Opcodes::addc_a_mem          (aCPU, pc, 0x35,0x2e,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x2e,0x00);
	clk += Opcodes::inc_rx              (aCPU, pc, 0x0a,0x00,0x00);
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0xd2,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_043a(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x043a;
	clk += Opcodes::anl_mem_imm         (aCPU, pc, 0x53,0x2e,0x03);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_043d(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x043d;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x03,0x02);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0440(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0440;
	clk += Opcodes::mov_a_imm           (aCPU, pc, 0x74,0x20,0x00);
	clk += Opcodes::add_a_mem           (aCPU, pc, 0x25,0x32,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x32,0x00);
	clk += Opcodes::jz_offset           (aCPU, pc, 0x60,0x03,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0448(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0448;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x04,0x6a);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_044b(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x044b;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x33,0x00);
	clk += Opcodes::inc_a               (aCPU, pc, 0x04,0x00,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0x1f,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x33,0x00);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0x06,0x03);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0455(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0455;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x04,0x6a);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0458(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0458;
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0xe9,0x82);
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0xea,0x83);
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x03,0x67);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0461(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0461;
	clk += Opcodes::add_a_mem           (aCPU, pc, 0x25,0x84,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x2d,0x00);
	clk += Opcodes::clr_a               (aCPU, pc, 0xe4,0x00,0x00);
	clk += Opcodes::addc_a_mem          (aCPU, pc, 0x35,0x85,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x2e,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_046a(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x046a;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x03,0x02);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_046d(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x046d;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x0f,0xeb);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0470(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0470;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x02,0x05);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0473(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0473;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x03,0x96);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0476(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0476;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x04,0xa6);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0479(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0479;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x2c,0x00);
	clk += Opcodes::jz_offset           (aCPU, pc, 0x60,0x0d,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_047d(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x047d;
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0x06,0x05);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0480(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0480;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x0a,0x9a);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0483(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0483;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x10,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0485(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0485;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x0a,0xbb);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0488(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0488;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x0b,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_048a(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x048a;
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0x06,0x05);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_048d(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x048d;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x01,0x74);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0490(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0490;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x03,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0492(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0492;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x2b,0x28);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0495(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0495;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x02,0x85);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0498(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0498;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x04,0x40);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_049b(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x049b;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x04,0xb2);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_049e(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x049e;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x2b,0x00);
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0x2a,0xd6);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_04a3(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x04a3;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x10,0x79);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_04a6(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x04a6;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x2a,0xff);
	clk += Opcodes::mov_dptr_imm        (aCPU, pc, 0x90,0x03,0xfd);
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x2b,0x00);
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x04,0xb2);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_04b2(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x04b2;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x2a,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x2c,0x00);
	clk += Opcodes::mov_dptr_imm        (aCPU, pc, 0x90,0x03,0xc8);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x78,0x34,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7a,0x08,0x00);
	clk += Opcodes::mov_rx_mem          (aCPU, pc, 0xab,0x2a,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_04c0(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x04c0;
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::jz_offset           (aCPU, pc, 0x60,0x6d,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_04c3(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x04c3;
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfc,0x00,0x00);
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfd,0x00,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::add_a_rx            (aCPU, pc, 0x2b,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfe,0x00,0x00);
	clk += Opcodes::anl_a_rx            (aCPU, pc, 0x5c,0x00,0x00);
	clk += Opcodes::jnz_offset          (aCPU, pc, 0x70,0x6a,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_04ce(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x04ce;
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xff,0x00,0x00);
	clk += Opcodes::anl_a_rx            (aCPU, pc, 0x5d,0x00,0x00);
	clk += Opcodes::jz_offset           (aCPU, pc, 0x60,0x05,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_04d4(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x04d4;
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xef,0x00,0x00);
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0x7f,0x00);
	clk += Opcodes::jnc_offset          (aCPU, pc, 0x50,0x67,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_04d9(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x04d9;
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xed,0x00,0x00);
	clk += Opcodes::mov_indir_rx_a      (aCPU, pc, 0xf6,0x00,0x00);
	clk += Opcodes::inc_rx              (aCPU, pc, 0x08,0x00,0x00);
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xef,0x00,0x00);
	clk += Opcodes::mov_indir_rx_a      (aCPU, pc, 0xf6,0x00,0x00);
	clk += Opcodes::inc_rx              (aCPU, pc, 0x08,0x00,0x00);
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xee,0x00,0x00);
	clk += Opcodes::swap_a              (aCPU, pc, 0xc4,0x00,0x00);
	clk += Opcodes::rl_a                (aCPU, pc, 0x23,0x00,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0x1f,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8d,0xf0,0x00);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xf6,0x0b);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_04ea(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x04ea;
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xf5,0x09);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_04ed(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x04ed;
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xf4,0x07);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_04f0(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x04f0;
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xf3,0x05);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_04f3(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x04f3;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x04,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_04f5(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x04f5;
	clk += Opcodes::rl_a                (aCPU, pc, 0x23,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_04f6(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x04f6;
	clk += Opcodes::rl_a                (aCPU, pc, 0x23,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_04f7(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x04f7;
	clk += Opcodes::rl_a                (aCPU, pc, 0x23,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_04f8(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x04f8;
	clk += Opcodes::rl_a                (aCPU, pc, 0x23,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_04f9(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x04f9;
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xf9,0x00,0x00);
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xef,0x00,0x00);
	clk += Opcodes::anl_a_rx            (aCPU, pc, 0x5d,0x00,0x00);
	clk += Opcodes::jnz_offset          (aCPU, pc, 0x70,0x07,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_04fe(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x04fe;
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xef,0x00,0x00);
	clk += Opcodes::swap_a              (aCPU, pc, 0xc4,0x00,0x00);
	clk += Opcodes::rl_a                (aCPU, pc, 0x23,0x00,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0x1f,0x00);
	clk += Opcodes::add_a_rx            (aCPU, pc, 0x29,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xf9,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0505(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0505;
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::add_a_rx            (aCPU, pc, 0x29,0x00,0x00);
	clk += Opcodes::mov_bitaddr_c       (aCPU, pc, 0x92,0xf0,0x00);
	clk += Opcodes::add_a_rx            (aCPU, pc, 0x29,0x00,0x00);
	clk += Opcodes::mov_bitaddr_c       (aCPU, pc, 0x92,0xf1,0x00);
	clk += Opcodes::mov_indir_rx_a      (aCPU, pc, 0xf6,0x00,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::inc_rx              (aCPU, pc, 0x08,0x00,0x00);
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xf0,0x02);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0513(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0513;
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0x02,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0515(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0515;
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xf1,0x02);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0518(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0518;
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0x02,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_051a(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x051a;
	clk += Opcodes::mov_indir_rx_a      (aCPU, pc, 0xf6,0x00,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::inc_rx              (aCPU, pc, 0x08,0x00,0x00);
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xee,0x00,0x00);
	clk += Opcodes::swap_a              (aCPU, pc, 0xc4,0x00,0x00);
	clk += Opcodes::rl_a                (aCPU, pc, 0x23,0x00,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0xe0,0x00);
	clk += Opcodes::mov_indir_rx_a      (aCPU, pc, 0xf6,0x00,0x00);
	clk += Opcodes::inc_rx              (aCPU, pc, 0x08,0x00,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x2c,0x00);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x2c,0x00);
	clk += Opcodes::xrl_a_imm           (aCPU, pc, 0x64,0x04,0x00);
	clk += Opcodes::jz_offset           (aCPU, pc, 0x60,0x1c,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_052c(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x052c;
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xda,0x92,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_052e(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x052e;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x18,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0530(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0530;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x82,0x00);
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0x06,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x82,0x00);
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0xf4,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0538(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0538;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x82,0x00);
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0x04,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x82,0x00);
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0xec,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0540(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0540;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x82,0x00);
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0x03,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x82,0x00);
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0xe4,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0548(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0548;
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0549(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0549;
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0x36,0x80);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x3b);
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0x37,0x80);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x3d);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x35,0x00);
	clk += Opcodes::dec_a               (aCPU, pc, 0x14,0x00,0x00);
	clk += Opcodes::rl_a                (aCPU, pc, 0x23,0x00,0x00);
	clk += Opcodes::rl_a                (aCPU, pc, 0x23,0x00,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0x1c,0x00);
	clk += Opcodes::cjne_a_imm_offset   (aCPU, pc, 0xb4,0x1c,0x13);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_055f(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x055f;
	clk += Opcodes::add_a_mem           (aCPU, pc, 0x25,0x38,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x80,0x00);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x36,0x00);
	clk += Opcodes::inc_a               (aCPU, pc, 0x04,0x00,0x00);
	clk += Opcodes::inc_a               (aCPU, pc, 0x04,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x36,0x00);
	clk += Opcodes::jnz_offset          (aCPU, pc, 0x70,0x04,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_056b(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x056b;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x37,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x37,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_056f(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x056f;
	clk += Opcodes::mov_a_imm           (aCPU, pc, 0x74,0x4f,0x00);
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0572(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0572;
	clk += Opcodes::add_a_mem           (aCPU, pc, 0x25,0x38,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x80,0x00);
	clk += Opcodes::mov_a_imm           (aCPU, pc, 0x74,0x4f,0x00);
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0579(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0579;
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0x3b,0x80);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x3b);
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0x3c,0x80);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x3d);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x3a,0x00);
	clk += Opcodes::dec_a               (aCPU, pc, 0x14,0x00,0x00);
	clk += Opcodes::rl_a                (aCPU, pc, 0x23,0x00,0x00);
	clk += Opcodes::rl_a                (aCPU, pc, 0x23,0x00,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0x1c,0x00);
	clk += Opcodes::cjne_a_imm_offset   (aCPU, pc, 0xb4,0x1c,0x13);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_058f(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x058f;
	clk += Opcodes::add_a_mem           (aCPU, pc, 0x25,0x3d,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x80,0x00);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x3b,0x00);
	clk += Opcodes::inc_a               (aCPU, pc, 0x04,0x00,0x00);
	clk += Opcodes::inc_a               (aCPU, pc, 0x04,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x3b,0x00);
	clk += Opcodes::jnz_offset          (aCPU, pc, 0x70,0x04,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_059b(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x059b;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x3c,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x3c,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_059f(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x059f;
	clk += Opcodes::mov_a_imm           (aCPU, pc, 0x74,0x4f,0x00);
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_05a2(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x05a2;
	clk += Opcodes::add_a_mem           (aCPU, pc, 0x25,0x3d,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x80,0x00);
	clk += Opcodes::mov_a_imm           (aCPU, pc, 0x74,0x4f,0x00);
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_05a9(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x05a9;
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0x40,0x80);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x3b);
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0x41,0x80);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x3d);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x3f,0x00);
	clk += Opcodes::dec_a               (aCPU, pc, 0x14,0x00,0x00);
	clk += Opcodes::rl_a                (aCPU, pc, 0x23,0x00,0x00);
	clk += Opcodes::rl_a                (aCPU, pc, 0x23,0x00,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0x1c,0x00);
	clk += Opcodes::cjne_a_imm_offset   (aCPU, pc, 0xb4,0x1c,0x13);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_05bf(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x05bf;
	clk += Opcodes::add_a_mem           (aCPU, pc, 0x25,0x42,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x80,0x00);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x40,0x00);
	clk += Opcodes::inc_a               (aCPU, pc, 0x04,0x00,0x00);
	clk += Opcodes::inc_a               (aCPU, pc, 0x04,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x40,0x00);
	clk += Opcodes::jnz_offset          (aCPU, pc, 0x70,0x04,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_05cb(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x05cb;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x41,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x41,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_05cf(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x05cf;
	clk += Opcodes::mov_a_imm           (aCPU, pc, 0x74,0x4f,0x00);
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_05d2(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x05d2;
	clk += Opcodes::add_a_mem           (aCPU, pc, 0x25,0x42,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x80,0x00);
	clk += Opcodes::mov_a_imm           (aCPU, pc, 0x74,0x4f,0x00);
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_05d9(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x05d9;
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0x45,0x80);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x3b);
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0x46,0x80);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x3d);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x44,0x00);
	clk += Opcodes::dec_a               (aCPU, pc, 0x14,0x00,0x00);
	clk += Opcodes::rl_a                (aCPU, pc, 0x23,0x00,0x00);
	clk += Opcodes::rl_a                (aCPU, pc, 0x23,0x00,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0x1c,0x00);
	clk += Opcodes::cjne_a_imm_offset   (aCPU, pc, 0xb4,0x1c,0x13);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_05ef(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x05ef;
	clk += Opcodes::add_a_mem           (aCPU, pc, 0x25,0x47,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x80,0x00);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x45,0x00);
	clk += Opcodes::inc_a               (aCPU, pc, 0x04,0x00,0x00);
	clk += Opcodes::inc_a               (aCPU, pc, 0x04,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x45,0x00);
	clk += Opcodes::jnz_offset          (aCPU, pc, 0x70,0x04,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_05fb(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x05fb;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x46,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x46,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_05ff(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x05ff;
	clk += Opcodes::mov_a_imm           (aCPU, pc, 0x74,0x4f,0x00);
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0602(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0602;
	clk += Opcodes::add_a_mem           (aCPU, pc, 0x25,0x47,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x80,0x00);
	clk += Opcodes::mov_a_imm           (aCPU, pc, 0x74,0x4f,0x00);
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0609(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0609;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x34,0x00);
	clk += Opcodes::anl_a_mem           (aCPU, pc, 0x55,0x35,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x35,0x00);
	clk += Opcodes::jz_offset           (aCPU, pc, 0x60,0x01,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0611(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0611;
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0612(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0612;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x35,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0x07,0x00);
	clk += Opcodes::jnz_offset          (aCPU, pc, 0x70,0xf9,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0618(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0618;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x36,0x00);
	clk += Opcodes::inc_a               (aCPU, pc, 0x04,0x00,0x00);
	clk += Opcodes::inc_a               (aCPU, pc, 0x04,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x36,0x00);
	clk += Opcodes::jnz_offset          (aCPU, pc, 0x70,0xf1,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0620(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0620;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x37,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x37,0x00);
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0625(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0625;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x39,0x00);
	clk += Opcodes::anl_a_mem           (aCPU, pc, 0x55,0x3a,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x3a,0x00);
	clk += Opcodes::jz_offset           (aCPU, pc, 0x60,0x01,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_062d(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x062d;
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_062e(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x062e;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x3a,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0x07,0x00);
	clk += Opcodes::jnz_offset          (aCPU, pc, 0x70,0xf9,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0634(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0634;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x3b,0x00);
	clk += Opcodes::inc_a               (aCPU, pc, 0x04,0x00,0x00);
	clk += Opcodes::inc_a               (aCPU, pc, 0x04,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x3b,0x00);
	clk += Opcodes::jnz_offset          (aCPU, pc, 0x70,0xf1,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_063c(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x063c;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x3c,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x3c,0x00);
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0641(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0641;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x3e,0x00);
	clk += Opcodes::anl_a_mem           (aCPU, pc, 0x55,0x3f,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x3f,0x00);
	clk += Opcodes::jz_offset           (aCPU, pc, 0x60,0x01,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0649(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0649;
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_064a(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x064a;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x3f,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0x07,0x00);
	clk += Opcodes::jnz_offset          (aCPU, pc, 0x70,0xf9,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0650(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0650;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x40,0x00);
	clk += Opcodes::inc_a               (aCPU, pc, 0x04,0x00,0x00);
	clk += Opcodes::inc_a               (aCPU, pc, 0x04,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x40,0x00);
	clk += Opcodes::jnz_offset          (aCPU, pc, 0x70,0xf1,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0658(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0658;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x41,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x41,0x00);
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_065d(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x065d;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x43,0x00);
	clk += Opcodes::anl_a_mem           (aCPU, pc, 0x55,0x44,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x44,0x00);
	clk += Opcodes::jz_offset           (aCPU, pc, 0x60,0x01,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0665(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0665;
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0666(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0666;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x44,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0x07,0x00);
	clk += Opcodes::jnz_offset          (aCPU, pc, 0x70,0xf9,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_066c(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x066c;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x45,0x00);
	clk += Opcodes::inc_a               (aCPU, pc, 0x04,0x00,0x00);
	clk += Opcodes::inc_a               (aCPU, pc, 0x04,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x45,0x00);
	clk += Opcodes::jnz_offset          (aCPU, pc, 0x70,0xf1,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0674(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0674;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x46,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x46,0x00);
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0679(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0679;
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xeb,0x00,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0x1f,0x00);
	clk += Opcodes::jnz_offset          (aCPU, pc, 0x70,0x03,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_067e(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x067e;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x07,0x2f);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0681(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0681;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x34,0x00);
	clk += Opcodes::anl_a_mem           (aCPU, pc, 0x55,0x35,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x35,0x00);
	clk += Opcodes::jz_offset           (aCPU, pc, 0x60,0x2c,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0689(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0689;
	clk += Opcodes::cjne_rx_imm_offset  (aCPU, pc, 0xbe,0x01,0x03);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_068c(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x068c;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x07,0x02);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_068f(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x068f;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x39,0x00);
	clk += Opcodes::anl_a_mem           (aCPU, pc, 0x55,0x3a,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x3a,0x00);
	clk += Opcodes::jz_offset           (aCPU, pc, 0x60,0x2a,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0697(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0697;
	clk += Opcodes::cjne_rx_imm_offset  (aCPU, pc, 0xbe,0x02,0x03);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_069a(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x069a;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x07,0x02);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_069d(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x069d;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x3e,0x00);
	clk += Opcodes::anl_a_mem           (aCPU, pc, 0x55,0x3f,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x3f,0x00);
	clk += Opcodes::jz_offset           (aCPU, pc, 0x60,0x28,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_06a5(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x06a5;
	clk += Opcodes::cjne_rx_imm_offset  (aCPU, pc, 0xbe,0x03,0x03);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_06a8(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x06a8;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x07,0x02);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_06ab(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x06ab;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x43,0x00);
	clk += Opcodes::anl_a_mem           (aCPU, pc, 0x55,0x44,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x44,0x00);
	clk += Opcodes::jz_offset           (aCPU, pc, 0x60,0x26,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_06b3(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x06b3;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x4d,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_06b5(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x06b5;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x05,0x49);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_06b8(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x06b8;
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0xa0,0x03);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_06bb(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x06bb;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x06,0x89);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_06be(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x06be;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x06,0xe5);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_06c1(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x06c1;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x05,0x79);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_06c4(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x06c4;
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0xa0,0x03);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_06c7(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x06c7;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x06,0x97);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_06ca(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x06ca;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x06,0xee);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_06cd(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x06cd;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x05,0xa9);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_06d0(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x06d0;
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0xa0,0x03);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_06d3(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x06d3;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x06,0xa5);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_06d6(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x06d6;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x06,0xf7);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_06d9(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x06d9;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x05,0xd9);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_06dc(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x06dc;
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0xa0,0x03);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_06df(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x06df;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x07,0x02);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_06e2(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x06e2;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x07,0x13);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_06e5(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x06e5;
	clk += Opcodes::cjne_rx_imm_offset  (aCPU, pc, 0xbe,0x01,0x03);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_06e8(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x06e8;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x07,0x13);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_06eb(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x06eb;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x06,0x25);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_06ee(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x06ee;
	clk += Opcodes::cjne_rx_imm_offset  (aCPU, pc, 0xbe,0x02,0x03);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_06f1(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x06f1;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x07,0x13);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_06f4(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x06f4;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x06,0x41);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_06f7(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x06f7;
	clk += Opcodes::cjne_rx_imm_offset  (aCPU, pc, 0xbe,0x03,0x03);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_06fa(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x06fa;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x07,0x13);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_06fd(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x06fd;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x06,0x5d);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0700(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0700;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x11,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0702(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0702;
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x80,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x3b);
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x80,0x00);
	clk += Opcodes::dec_mem             (aCPU, pc, 0x15,0x82,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x3d);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8b,0x80,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0713(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0713;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::dec_rx              (aCPU, pc, 0x1d,0x00,0x00);
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xeb,0x00,0x00);
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0x04,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfb,0x00,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0x1f,0x00);
	clk += Opcodes::jnz_offset          (aCPU, pc, 0x70,0x52,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0724(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0724;
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xeb,0x00,0x00);
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0xe0,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfb,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0728(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0728;
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xd9,0x03,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_072c(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x072c;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x01,0x60);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_072f(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x072f;
	clk += Opcodes::mov_rx_mem          (aCPU, pc, 0xa8,0x35,0x00);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x34,0x00);
	clk += Opcodes::anl_a_rx            (aCPU, pc, 0x58,0x00,0x00);
	clk += Opcodes::jz_offset           (aCPU, pc, 0x60,0x40,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0736(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0736;
	clk += Opcodes::mov_a_imm           (aCPU, pc, 0x74,0x08,0x00);
	clk += Opcodes::add_a_rx            (aCPU, pc, 0x28,0x00,0x00);
	clk += Opcodes::jc_offset           (aCPU, pc, 0x40,0x3b,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_073b(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x073b;
	clk += Opcodes::cjne_rx_imm_offset  (aCPU, pc, 0xbe,0x01,0x03);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_073e(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x073e;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x07,0x71);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0741(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0741;
	clk += Opcodes::mov_rx_mem          (aCPU, pc, 0xa8,0x3a,0x00);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x39,0x00);
	clk += Opcodes::anl_a_rx            (aCPU, pc, 0x58,0x00,0x00);
	clk += Opcodes::jz_offset           (aCPU, pc, 0x60,0x2e,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0748(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0748;
	clk += Opcodes::mov_a_imm           (aCPU, pc, 0x74,0x08,0x00);
	clk += Opcodes::add_a_rx            (aCPU, pc, 0x28,0x00,0x00);
	clk += Opcodes::jc_offset           (aCPU, pc, 0x40,0x29,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_074d(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x074d;
	clk += Opcodes::cjne_rx_imm_offset  (aCPU, pc, 0xbe,0x02,0x03);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0750(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0750;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x07,0x71);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0753(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0753;
	clk += Opcodes::mov_rx_mem          (aCPU, pc, 0xa8,0x3f,0x00);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x3e,0x00);
	clk += Opcodes::anl_a_rx            (aCPU, pc, 0x58,0x00,0x00);
	clk += Opcodes::jz_offset           (aCPU, pc, 0x60,0x1c,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_075a(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x075a;
	clk += Opcodes::mov_a_imm           (aCPU, pc, 0x74,0x08,0x00);
	clk += Opcodes::add_a_rx            (aCPU, pc, 0x28,0x00,0x00);
	clk += Opcodes::jc_offset           (aCPU, pc, 0x40,0x17,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_075f(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x075f;
	clk += Opcodes::cjne_rx_imm_offset  (aCPU, pc, 0xbe,0x03,0x03);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0762(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0762;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x07,0x71);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0765(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0765;
	clk += Opcodes::mov_rx_mem          (aCPU, pc, 0xa8,0x44,0x00);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x43,0x00);
	clk += Opcodes::anl_a_rx            (aCPU, pc, 0x58,0x00,0x00);
	clk += Opcodes::jz_offset           (aCPU, pc, 0x60,0x0a,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_076c(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x076c;
	clk += Opcodes::mov_a_imm           (aCPU, pc, 0x74,0x08,0x00);
	clk += Opcodes::add_a_rx            (aCPU, pc, 0x28,0x00,0x00);
	clk += Opcodes::jc_offset           (aCPU, pc, 0x40,0x05,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0771(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0771;
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xed,0x00,0x00);
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0xf8,0x00);
	clk += Opcodes::jc_offset           (aCPU, pc, 0x40,0x07,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0776(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0776;
	clk += Opcodes::cjne_rx_imm_offset  (aCPU, pc, 0xbd,0x00,0x01);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0779(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0779;
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_077a(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x077a;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x06,0x81);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_077d(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x077d;
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfd,0x00,0x00);
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x80,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x3b);
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x80,0x00);
	clk += Opcodes::dec_mem             (aCPU, pc, 0x15,0x82,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x3d);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8b,0x80,0x00);
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x20,0xc4);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0792(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0792;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x35,0x00);
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0x08,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x35,0x00);
	clk += Opcodes::cjne_rx_imm_offset  (aCPU, pc, 0xbe,0x01,0x03);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_079b(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x079b;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x07,0xbc);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_079e(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x079e;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x3a,0x00);
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0x08,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x3a,0x00);
	clk += Opcodes::cjne_rx_imm_offset  (aCPU, pc, 0xbe,0x02,0x03);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_07a7(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x07a7;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x07,0xbc);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_07aa(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x07aa;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x3f,0x00);
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0x08,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x3f,0x00);
	clk += Opcodes::cjne_rx_imm_offset  (aCPU, pc, 0xbe,0x03,0x03);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_07b3(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x07b3;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x07,0xbc);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_07b6(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x07b6;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x44,0x00);
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0x08,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x44,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_07bc(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x07bc;
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xed,0x00,0x00);
	clk += Opcodes::jz_offset           (aCPU, pc, 0x60,0xba,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_07bf(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x07bf;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x07,0x28);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_07c2(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x07c2;
	clk += Opcodes::mov_rx_mem          (aCPU, pc, 0xaf,0x35,0x00);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x34,0x00);
	clk += Opcodes::anl_a_rx            (aCPU, pc, 0x5f,0x00,0x00);
	clk += Opcodes::jnz_offset          (aCPU, pc, 0x70,0x12,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_07c9(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x07c9;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x34,0x00);
	clk += Opcodes::add_a_rx            (aCPU, pc, 0x2f,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xf8,0x00,0x00);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x35,0x00);
	clk += Opcodes::rl_a                (aCPU, pc, 0x23,0x00,0x00);
	clk += Opcodes::rl_a                (aCPU, pc, 0x23,0x00,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0x1c,0x00);
	clk += Opcodes::add_a_mem           (aCPU, pc, 0x25,0x38,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfc,0x00,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7f,0x80,0x00);
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x08,0x50);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_07db(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x07db;
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xef,0x00,0x00);
	clk += Opcodes::cpl_a               (aCPU, pc, 0xf4,0x00,0x00);
	clk += Opcodes::inc_a               (aCPU, pc, 0x04,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xf8,0x00,0x00);
	clk += Opcodes::mov_a_imm           (aCPU, pc, 0x74,0x80,0x00);
	clk += Opcodes::clr_c               (aCPU, pc, 0xc3,0x00,0x00);
	clk += Opcodes::subb_a_rx           (aCPU, pc, 0x98,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xff,0x00,0x00);
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x80,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x3b);
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x80,0x00);
	clk += Opcodes::dec_mem             (aCPU, pc, 0x15,0x82,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x3d);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8b,0x80,0x00);
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xe8,0x00,0x00);
	clk += Opcodes::clr_c               (aCPU, pc, 0xc3,0x00,0x00);
	clk += Opcodes::subb_a_mem          (aCPU, pc, 0x95,0x23,0x00);
	clk += Opcodes::jnc_offset          (aCPU, pc, 0x50,0x0c,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_07fb(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x07fb;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xd8,0xf6,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0805(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0805;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x40,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0807(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0807;
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xf8,0x00,0x00);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x23,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_080a(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x080a;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::djnz_mem_offset     (aCPU, pc, 0xd5,0xe0,0xf5);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0815(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0815;
	clk += Opcodes::mov_rx_mem          (aCPU, pc, 0xab,0x27,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0817(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0817;
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xd9,0x03,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_081b(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x081b;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x01,0x60);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_081e(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x081e;
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x80,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x3b);
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x80,0x00);
	clk += Opcodes::dec_mem             (aCPU, pc, 0x15,0x82,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x3d);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8b,0x80,0x00);
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xe8,0x00,0x00);
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0xf8,0x00);
	clk += Opcodes::jnc_offset          (aCPU, pc, 0x50,0x06,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0834(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0834;
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xf8,0x00,0x00);
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x20,0xc4);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0838(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0838;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0xdd,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_083a(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x083a;
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xe8,0x00,0x00);
	clk += Opcodes::jz_offset           (aCPU, pc, 0x60,0x0a,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_083d(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x083d;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xd8,0xf6,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0847(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0847;
	clk += Opcodes::mov_rx_mem          (aCPU, pc, 0xab,0x80,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x35,0x00);
	clk += Opcodes::mov_rx_mem          (aCPU, pc, 0xa8,0x34,0x00);
	clk += Opcodes::mov_rx_mem          (aCPU, pc, 0xac,0x38,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0850(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0850;
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0x36,0x80);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x3b);
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0x37,0x80);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x3d);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8c,0x80,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_085e(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x085e;
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8c,0x80,0x00);
	clk += Opcodes::mov_a_imm           (aCPU, pc, 0x74,0x4f,0x00);
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0xa0,0x2a);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0865(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0865;
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x80,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x3b);
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x80,0x00);
	clk += Opcodes::dec_mem             (aCPU, pc, 0x15,0x82,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x3d);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8b,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0x36,0x80);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x3b);
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0x37,0x80);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x3d);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8c,0x80,0x00);
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xdf,0x0c,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_088e(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x088e;
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_088f(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x088f;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xdf,0x01,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0899(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0899;
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_089a(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x089a;
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xeb,0x00,0x00);
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0x04,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfb,0x00,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0x1f,0x00);
	clk += Opcodes::jnz_offset          (aCPU, pc, 0x70,0x0b,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_08a2(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x08a2;
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xeb,0x00,0x00);
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0xe0,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfb,0x00,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xd9,0x03,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_08aa(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x08aa;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x01,0x60);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_08ad(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x08ad;
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xec,0x00,0x00);
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0x04,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfc,0x00,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0x1f,0x00);
	clk += Opcodes::jnz_offset          (aCPU, pc, 0x70,0x1c,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_08b5(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x08b5;
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xec,0x00,0x00);
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0xe0,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfc,0x00,0x00);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x36,0x00);
	clk += Opcodes::inc_a               (aCPU, pc, 0x04,0x00,0x00);
	clk += Opcodes::inc_a               (aCPU, pc, 0x04,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x36,0x00);
	clk += Opcodes::jnz_offset          (aCPU, pc, 0x70,0x04,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_08c1(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x08c1;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x37,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x37,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_08c5(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x08c5;
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0x36,0x80);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x3b);
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0x37,0x80);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x3d);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_08d1(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x08d1;
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xe8,0x00,0x00);
	clk += Opcodes::inc_a               (aCPU, pc, 0x04,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xf8,0x00,0x00);
	clk += Opcodes::jnz_offset          (aCPU, pc, 0x70,0x88,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_08d6(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x08d6;
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xeb,0x00,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0x1f,0x00);
	clk += Opcodes::jz_offset           (aCPU, pc, 0x60,0x29,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_08db(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x08db;
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x80,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x3b);
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x80,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x3d);
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xd9,0x03,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_08eb(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x08eb;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x01,0x60);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_08ee(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x08ee;
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8b,0x80,0x00);
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xeb,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_08f1(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x08f1;
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0x1f,0x00);
	clk += Opcodes::jz_offset           (aCPU, pc, 0x60,0x0f,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_08f5(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x08f5;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xdf,0x01,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_08ff(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x08ff;
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0900(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0900;
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0x04,0x00);
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0xed,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0904(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0904;
	clk += Opcodes::mov_rx_mem          (aCPU, pc, 0xab,0x27,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0906(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0906;
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x80,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x3b);
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x80,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x3d);
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xd9,0x03,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0916(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0916;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x01,0x60);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0919(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0919;
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8b,0x80,0x00);
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xef,0x00,0x00);
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0xf8,0x00);
	clk += Opcodes::jnc_offset          (aCPU, pc, 0x50,0x06,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0920(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0920;
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xff,0x00,0x00);
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x20,0xc4);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0924(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0924;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0xe0,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0926(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0926;
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xef,0x00,0x00);
	clk += Opcodes::jz_offset           (aCPU, pc, 0x60,0x0a,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0929(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0929;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xdf,0xf6,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0933(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0933;
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0934(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0934;
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xeb,0x00,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0x1f,0x00);
	clk += Opcodes::jnz_offset          (aCPU, pc, 0x70,0x03,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0939(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0939;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x0a,0x0c);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_093c(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x093c;
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xf0,0x06);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_093f(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x093f;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x20,0x14);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0942(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0942;
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0xa0,0x65);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0945(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0945;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x34,0x00);
	clk += Opcodes::anl_a_mem           (aCPU, pc, 0x55,0x35,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x35,0x00);
	clk += Opcodes::jz_offset           (aCPU, pc, 0x60,0x2d,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_094d(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x094d;
	clk += Opcodes::cjne_rx_imm_offset  (aCPU, pc, 0xbe,0x01,0x03);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0950(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0950;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x09,0xca);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0953(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0953;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x39,0x00);
	clk += Opcodes::anl_a_mem           (aCPU, pc, 0x55,0x3a,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x3a,0x00);
	clk += Opcodes::jz_offset           (aCPU, pc, 0x60,0x2b,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_095b(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x095b;
	clk += Opcodes::cjne_rx_imm_offset  (aCPU, pc, 0xbe,0x02,0x03);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_095e(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x095e;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x09,0xca);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0961(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0961;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x3e,0x00);
	clk += Opcodes::anl_a_mem           (aCPU, pc, 0x55,0x3f,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x3f,0x00);
	clk += Opcodes::jz_offset           (aCPU, pc, 0x60,0x29,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0969(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0969;
	clk += Opcodes::cjne_rx_imm_offset  (aCPU, pc, 0xbe,0x03,0x03);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_096c(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x096c;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x09,0xca);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_096f(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x096f;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x43,0x00);
	clk += Opcodes::anl_a_mem           (aCPU, pc, 0x55,0x44,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x44,0x00);
	clk += Opcodes::jz_offset           (aCPU, pc, 0x60,0x27,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0977(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0977;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x09,0xca);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_097a(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x097a;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x05,0x49);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_097d(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x097d;
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0xa0,0x03);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0980(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0980;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x09,0x4d);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0983(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0983;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x09,0xad);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0986(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0986;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x05,0x79);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0989(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0989;
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0xa0,0x03);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_098c(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x098c;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x09,0x5b);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_098f(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x098f;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x09,0xb6);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0992(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0992;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x05,0xa9);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0995(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0995;
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0xa0,0x03);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0998(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0998;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x09,0x69);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_099b(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x099b;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x09,0xbf);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_099e(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x099e;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x05,0xd9);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_09a1(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x09a1;
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0xa0,0x03);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_09a4(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x09a4;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x09,0xca);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_09a7(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x09a7;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x09,0xcd);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_09aa(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x09aa;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x06,0x09);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_09ad(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x09ad;
	clk += Opcodes::cjne_rx_imm_offset  (aCPU, pc, 0xbe,0x01,0x03);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_09b0(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x09b0;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x09,0xcd);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_09b3(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x09b3;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x06,0x25);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_09b6(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x09b6;
	clk += Opcodes::cjne_rx_imm_offset  (aCPU, pc, 0xbe,0x02,0x03);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_09b9(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x09b9;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x09,0xcd);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_09bc(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x09bc;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x06,0x41);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_09bf(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x09bf;
	clk += Opcodes::cjne_rx_imm_offset  (aCPU, pc, 0xbe,0x03,0x03);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_09c2(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x09c2;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x09,0xcd);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_09c5(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x09c5;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x06,0x5d);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_09c8(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x09c8;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x03,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_09ca(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x09ca;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x20,0x7e);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_09cd(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x09cd;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::dec_rx              (aCPU, pc, 0x1d,0x00,0x00);
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xec,0x00,0x00);
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0x04,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfc,0x00,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0x1f,0x00);
	clk += Opcodes::jnz_offset          (aCPU, pc, 0x70,0x18,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_09de(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x09de;
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0xf0,0xe9);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xef,0x21);
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xec,0x00,0x00);
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0xe0,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfc,0x00,0x00);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xf0,0x08);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_09eb(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x09eb;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x92,0x01);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::anl_mem_imm         (aCPU, pc, 0x53,0x85,0x03);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_09f3(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x09f3;
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0xe9,0xf0);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_09f6(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x09f6;
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xeb,0x00,0x00);
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0x04,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfb,0x00,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0x1f,0x00);
	clk += Opcodes::jnz_offset          (aCPU, pc, 0x70,0x55,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_09fe(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x09fe;
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xeb,0x00,0x00);
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0xe0,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfb,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0a02(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0a02;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x92,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xd9,0x03,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0a09(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0a09;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x01,0x60);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0a0c(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0a0c;
	clk += Opcodes::mov_rx_mem          (aCPU, pc, 0xa8,0x35,0x00);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x34,0x00);
	clk += Opcodes::anl_a_rx            (aCPU, pc, 0x58,0x00,0x00);
	clk += Opcodes::jz_offset           (aCPU, pc, 0x60,0x40,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0a13(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0a13;
	clk += Opcodes::mov_a_imm           (aCPU, pc, 0x74,0x08,0x00);
	clk += Opcodes::add_a_rx            (aCPU, pc, 0x28,0x00,0x00);
	clk += Opcodes::jc_offset           (aCPU, pc, 0x40,0x3b,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0a18(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0a18;
	clk += Opcodes::cjne_rx_imm_offset  (aCPU, pc, 0xbe,0x01,0x03);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0a1b(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0a1b;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x0a,0x4e);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0a1e(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0a1e;
	clk += Opcodes::mov_rx_mem          (aCPU, pc, 0xa8,0x3a,0x00);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x39,0x00);
	clk += Opcodes::anl_a_rx            (aCPU, pc, 0x58,0x00,0x00);
	clk += Opcodes::jz_offset           (aCPU, pc, 0x60,0x2e,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0a25(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0a25;
	clk += Opcodes::mov_a_imm           (aCPU, pc, 0x74,0x08,0x00);
	clk += Opcodes::add_a_rx            (aCPU, pc, 0x28,0x00,0x00);
	clk += Opcodes::jc_offset           (aCPU, pc, 0x40,0x29,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0a2a(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0a2a;
	clk += Opcodes::cjne_rx_imm_offset  (aCPU, pc, 0xbe,0x02,0x03);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0a2d(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0a2d;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x0a,0x4e);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0a30(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0a30;
	clk += Opcodes::mov_rx_mem          (aCPU, pc, 0xa8,0x3f,0x00);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x3e,0x00);
	clk += Opcodes::anl_a_rx            (aCPU, pc, 0x58,0x00,0x00);
	clk += Opcodes::jz_offset           (aCPU, pc, 0x60,0x1c,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0a37(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0a37;
	clk += Opcodes::mov_a_imm           (aCPU, pc, 0x74,0x08,0x00);
	clk += Opcodes::add_a_rx            (aCPU, pc, 0x28,0x00,0x00);
	clk += Opcodes::jc_offset           (aCPU, pc, 0x40,0x17,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0a3c(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0a3c;
	clk += Opcodes::cjne_rx_imm_offset  (aCPU, pc, 0xbe,0x03,0x03);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0a3f(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0a3f;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x0a,0x4e);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0a42(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0a42;
	clk += Opcodes::mov_rx_mem          (aCPU, pc, 0xa8,0x44,0x00);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x43,0x00);
	clk += Opcodes::anl_a_rx            (aCPU, pc, 0x58,0x00,0x00);
	clk += Opcodes::jz_offset           (aCPU, pc, 0x60,0x0a,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0a49(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0a49;
	clk += Opcodes::mov_a_imm           (aCPU, pc, 0x74,0x08,0x00);
	clk += Opcodes::add_a_rx            (aCPU, pc, 0x28,0x00,0x00);
	clk += Opcodes::jc_offset           (aCPU, pc, 0x40,0x05,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0a4e(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0a4e;
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xed,0x00,0x00);
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0xf8,0x00);
	clk += Opcodes::jc_offset           (aCPU, pc, 0x40,0x0a,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0a53(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0a53;
	clk += Opcodes::cjne_rx_imm_offset  (aCPU, pc, 0xbd,0x00,0x04);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0a56(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0a56;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x92,0x00);
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0a5a(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0a5a;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x09,0x3c);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0a5d(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0a5d;
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xf8,0x00,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7d,0x01,0x00);
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x2a,0xa9);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0a63(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0a63;
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xe8,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfd,0x00,0x00);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x32,0x00);
	clk += Opcodes::add_a_mem           (aCPU, pc, 0x25,0x31,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfc,0x00,0x00);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x35,0x00);
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0x08,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x35,0x00);
	clk += Opcodes::cjne_rx_imm_offset  (aCPU, pc, 0xbe,0x01,0x03);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0a73(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0a73;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x0a,0x94);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0a76(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0a76;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x3a,0x00);
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0x08,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x3a,0x00);
	clk += Opcodes::cjne_rx_imm_offset  (aCPU, pc, 0xbe,0x02,0x03);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0a7f(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0a7f;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x0a,0x94);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0a82(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0a82;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x3f,0x00);
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0x08,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x3f,0x00);
	clk += Opcodes::cjne_rx_imm_offset  (aCPU, pc, 0xbe,0x03,0x03);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0a8b(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0a8b;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x0a,0x94);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0a8e(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0a8e;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x44,0x00);
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0x08,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x44,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0a94(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0a94;
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xed,0x00,0x00);
	clk += Opcodes::jz_offset           (aCPU, pc, 0x60,0xbf,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0a97(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0a97;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x0a,0x0c);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0a9a(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0a9a;
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0x28,0x82);
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0x29,0x83);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x25,0x00);
	clk += Opcodes::add_a_mem           (aCPU, pc, 0x25,0x27,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfb,0x00,0x00);
	clk += Opcodes::mov_rx_mem          (aCPU, pc, 0xa9,0x26,0x00);
	clk += Opcodes::mov_a_imm           (aCPU, pc, 0x74,0x01,0x00);
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0x2c,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0aac(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0aac;
	clk += Opcodes::jc_offset           (aCPU, pc, 0x40,0x03,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0aae(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0aae;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x0a,0xb8);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0ab1(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0ab1;
	clk += Opcodes::mov_rx_mem          (aCPU, pc, 0xae,0x2c,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7d,0x80,0x00);
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x06,0x79);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0ab8(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0ab8;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x07,0xc2);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0abb(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0abb;
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0x28,0x82);
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0x29,0x83);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x27,0x00);
	clk += Opcodes::add_a_mem           (aCPU, pc, 0x25,0x25,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfb,0x00,0x00);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x32,0x00);
	clk += Opcodes::add_a_mem           (aCPU, pc, 0x25,0x30,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfc,0x00,0x00);
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0xe9,0xf0);
	clk += Opcodes::mov_rx_mem          (aCPU, pc, 0xa9,0x26,0x00);
	clk += Opcodes::mov_rx_mem          (aCPU, pc, 0xae,0x2c,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7d,0x80,0x00);
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x09,0x34);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0ad7(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0ad7;
	clk += Opcodes::clr_bitaddr         (aCPU, pc, 0xc2,0xb9,0x00);
	clk += Opcodes::mov_dptr_imm        (aCPU, pc, 0x90,0x02,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x78,0x34,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x79,0x0e,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0ae0(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0ae0;
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_indir_rx_a      (aCPU, pc, 0xf6,0x00,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::inc_rx              (aCPU, pc, 0x08,0x00,0x00);
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xd9,0xfa,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0ae6(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0ae6;
	clk += Opcodes::setb_bitaddr        (aCPU, pc, 0xd2,0xb9,0x00);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x34,0x00);
	clk += Opcodes::clr_c               (aCPU, pc, 0xc3,0x00,0x00);
	clk += Opcodes::subb_a_mem          (aCPU, pc, 0x95,0x38,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfa,0x00,0x00);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x35,0x00);
	clk += Opcodes::subb_a_mem          (aCPU, pc, 0x95,0x39,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfb,0x00,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8a,0x34,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8b,0x35,0x00);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x36,0x00);
	clk += Opcodes::clr_c               (aCPU, pc, 0xc3,0x00,0x00);
	clk += Opcodes::subb_a_mem          (aCPU, pc, 0x95,0x3a,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfa,0x00,0x00);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x37,0x00);
	clk += Opcodes::subb_a_mem          (aCPU, pc, 0x95,0x3b,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfb,0x00,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8a,0x36,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8b,0x37,0x00);
	clk += Opcodes::mov_dptr_imm        (aCPU, pc, 0x90,0x03,0xfd);
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfa,0x00,0x00);
	clk += Opcodes::push_mem            (aCPU, pc, 0xc0,0x02,0x00);
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x0f,0xeb);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0b10(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0b10;
	clk += Opcodes::pop_mem             (aCPU, pc, 0xd0,0x02,0x00);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x16,0x00);
	clk += Opcodes::clr_c               (aCPU, pc, 0xc3,0x00,0x00);
	clk += Opcodes::rlc_a               (aCPU, pc, 0x33,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x82,0x00);
	clk += Opcodes::clr_a               (aCPU, pc, 0xe4,0x00,0x00);
	clk += Opcodes::rlc_a               (aCPU, pc, 0x33,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x83,0x00);
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x80,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x3b);
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x80,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x3d);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0b29(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0b29;
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0x34,0x10);
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0x35,0x11);
	clk += Opcodes::mov_rx_mem          (aCPU, pc, 0xab,0x36,0x00);
	clk += Opcodes::mov_rx_mem          (aCPU, pc, 0xac,0x37,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8b,0x12,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8c,0x13,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x17,0x80);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xd0,0x10);
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xe8,0x00,0x00);
	clk += Opcodes::add_a_mem           (aCPU, pc, 0x25,0x38,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xf8,0x00,0x00);
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xe9,0x00,0x00);
	clk += Opcodes::addc_a_mem          (aCPU, pc, 0x35,0x39,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xf9,0x00,0x00);
	clk += Opcodes::rlc_a               (aCPU, pc, 0x33,0x00,0x00);
	clk += Opcodes::jc_offset           (aCPU, pc, 0x40,0x48,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0b48(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0b48;
	clk += Opcodes::swap_a              (aCPU, pc, 0xc4,0x00,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0x0f,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfc,0x00,0x00);
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xea,0x00,0x00);
	clk += Opcodes::add_a_mem           (aCPU, pc, 0x25,0x3a,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfa,0x00,0x00);
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xeb,0x00,0x00);
	clk += Opcodes::addc_a_mem          (aCPU, pc, 0x35,0x3b,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfb,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0b54(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0b54;
	clk += Opcodes::rlc_a               (aCPU, pc, 0x33,0x00,0x00);
	clk += Opcodes::jc_offset           (aCPU, pc, 0x40,0x3c,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0b57(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0b57;
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0xf0,0x00);
	clk += Opcodes::orl_a_rx            (aCPU, pc, 0x4c,0x00,0x00);
	clk += Opcodes::xrl_a_rx            (aCPU, pc, 0x6e,0x00,0x00);
	clk += Opcodes::jz_offset           (aCPU, pc, 0x60,0x17,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0b5d(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0b5d;
	clk += Opcodes::xrl_a_rx            (aCPU, pc, 0x6e,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfe,0x00,0x00);
	clk += Opcodes::clr_c               (aCPU, pc, 0xc3,0x00,0x00);
	clk += Opcodes::rlc_a               (aCPU, pc, 0x33,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x82,0x00);
	clk += Opcodes::clr_a               (aCPU, pc, 0xe4,0x00,0x00);
	clk += Opcodes::rlc_a               (aCPU, pc, 0x33,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x83,0x00);
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x80,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x3b);
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x80,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x3d);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0b74(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0b74;
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xeb,0x00,0x00);
	clk += Opcodes::swap_a              (aCPU, pc, 0xc4,0x00,0x00);
	clk += Opcodes::rl_a                (aCPU, pc, 0x23,0x00,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0xe0,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfd,0x00,0x00);
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xe9,0x00,0x00);
	clk += Opcodes::rl_a                (aCPU, pc, 0x23,0x00,0x00);
	clk += Opcodes::rl_a                (aCPU, pc, 0x23,0x00,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0x1c,0x00);
	clk += Opcodes::orl_a_rx            (aCPU, pc, 0x4d,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfd,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xdf,0x09,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0b8d(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0b8d;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x0c,0x48);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0b90(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0b90;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x0c,0x02);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0b93(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0b93;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x0c,0x0a);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0b96(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0b96;
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xe8,0x00,0x00);
	clk += Opcodes::add_a_mem           (aCPU, pc, 0x25,0x38,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xf8,0x00,0x00);
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xe9,0x00,0x00);
	clk += Opcodes::addc_a_mem          (aCPU, pc, 0x35,0x39,0x00);
	clk += Opcodes::xrl_a_rx            (aCPU, pc, 0x69,0x00,0x00);
	clk += Opcodes::jz_offset           (aCPU, pc, 0x60,0x4c,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0ba0(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0ba0;
	clk += Opcodes::xrl_a_rx            (aCPU, pc, 0x69,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xf9,0x00,0x00);
	clk += Opcodes::rlc_a               (aCPU, pc, 0x33,0x00,0x00);
	clk += Opcodes::jc_offset           (aCPU, pc, 0x40,0x5d,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0ba5(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0ba5;
	clk += Opcodes::swap_a              (aCPU, pc, 0xc4,0x00,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0x0f,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfc,0x00,0x00);
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xea,0x00,0x00);
	clk += Opcodes::add_a_mem           (aCPU, pc, 0x25,0x3a,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfa,0x00,0x00);
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xeb,0x00,0x00);
	clk += Opcodes::addc_a_mem          (aCPU, pc, 0x35,0x3b,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfb,0x00,0x00);
	clk += Opcodes::rlc_a               (aCPU, pc, 0x33,0x00,0x00);
	clk += Opcodes::jc_offset           (aCPU, pc, 0x40,0x56,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0bb4(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0bb4;
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0xf0,0x00);
	clk += Opcodes::orl_a_rx            (aCPU, pc, 0x4c,0x00,0x00);
	clk += Opcodes::xrl_a_rx            (aCPU, pc, 0x6e,0x00,0x00);
	clk += Opcodes::jz_offset           (aCPU, pc, 0x60,0x17,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0bba(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0bba;
	clk += Opcodes::xrl_a_rx            (aCPU, pc, 0x6e,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfe,0x00,0x00);
	clk += Opcodes::clr_c               (aCPU, pc, 0xc3,0x00,0x00);
	clk += Opcodes::rlc_a               (aCPU, pc, 0x33,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x82,0x00);
	clk += Opcodes::clr_a               (aCPU, pc, 0xe4,0x00,0x00);
	clk += Opcodes::rlc_a               (aCPU, pc, 0x33,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x83,0x00);
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x80,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x3b);
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x80,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x3d);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0bd1(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0bd1;
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xeb,0x00,0x00);
	clk += Opcodes::swap_a              (aCPU, pc, 0xc4,0x00,0x00);
	clk += Opcodes::rl_a                (aCPU, pc, 0x23,0x00,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0xe0,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfd,0x00,0x00);
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xe9,0x00,0x00);
	clk += Opcodes::rl_a                (aCPU, pc, 0x23,0x00,0x00);
	clk += Opcodes::rl_a                (aCPU, pc, 0x23,0x00,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0x1c,0x00);
	clk += Opcodes::orl_a_rx            (aCPU, pc, 0x4d,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfd,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xdf,0xac,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0bea(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0bea;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x5c,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0bec(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0bec;
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xea,0x00,0x00);
	clk += Opcodes::add_a_mem           (aCPU, pc, 0x25,0x3a,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfa,0x00,0x00);
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xeb,0x00,0x00);
	clk += Opcodes::addc_a_mem          (aCPU, pc, 0x35,0x3b,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfb,0x00,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8d,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xdf,0x96,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0c00(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0c00;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x46,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0c02(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0c02;
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xea,0x00,0x00);
	clk += Opcodes::add_a_mem           (aCPU, pc, 0x25,0x3a,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfa,0x00,0x00);
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xeb,0x00,0x00);
	clk += Opcodes::addc_a_mem          (aCPU, pc, 0x35,0x3b,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfb,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0c0a(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0c0a;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x79);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x95,0x00);
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x24,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0c12(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0c12;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x95,0xff);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x39);
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xe9,0x00,0x00);
	clk += Opcodes::rlc_a               (aCPU, pc, 0x33,0x00,0x00);
	clk += Opcodes::swap_a              (aCPU, pc, 0xc4,0x00,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0x0f,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfc,0x00,0x00);
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xeb,0x00,0x00);
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x0b,0x54);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0c22(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0c22;
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xe8,0x00,0x00);
	clk += Opcodes::add_a_mem           (aCPU, pc, 0x25,0x38,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xf8,0x00,0x00);
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xe9,0x00,0x00);
	clk += Opcodes::addc_a_mem          (aCPU, pc, 0x35,0x39,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xf9,0x00,0x00);
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xea,0x00,0x00);
	clk += Opcodes::add_a_mem           (aCPU, pc, 0x25,0x3a,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfa,0x00,0x00);
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xeb,0x00,0x00);
	clk += Opcodes::addc_a_mem          (aCPU, pc, 0x35,0x3b,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfb,0x00,0x00);
	clk += Opcodes::orl_a_rx            (aCPU, pc, 0x49,0x00,0x00);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xe7,0xdc);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0c36(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0c36;
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0x41,0xa0);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0x40,0xa0);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xdf,0xdc,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0c46(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0c46;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0c48(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0c48;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x95,0xff);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xd0,0x00);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x3c,0x00);
	clk += Opcodes::add_a_mem           (aCPU, pc, 0x25,0x34,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfd,0x00,0x00);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x3d,0x00);
	clk += Opcodes::addc_a_mem          (aCPU, pc, 0x35,0x35,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfe,0x00,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8d,0x34,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8e,0x35,0x00);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x3e,0x00);
	clk += Opcodes::add_a_rx            (aCPU, pc, 0x2b,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfb,0x00,0x00);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x3f,0x00);
	clk += Opcodes::addc_a_rx           (aCPU, pc, 0x3c,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfc,0x00,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8b,0x36,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8c,0x37,0x00);
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xda,0x02,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0c6a(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0c6a;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x03,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0c6c(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0c6c;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x0b,0x29);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0c6f(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0c6f;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x10,0x79);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0c72(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0c72;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x85,0x03);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7c,0x10,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0c77(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0c77;
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfd,0x00,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x92,0x01);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0x0f,0x00);
	clk += Opcodes::rl_a                (aCPU, pc, 0x23,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x84,0x00);
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xf8,0x00,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0xa0,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x88,0xa0,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0xa0,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x88,0xa0,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0xa0,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x88,0xa0,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0xa0,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x88,0xa0,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xed,0x00,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0xf0,0x00);
	clk += Opcodes::swap_a              (aCPU, pc, 0xc4,0x00,0x00);
	clk += Opcodes::rl_a                (aCPU, pc, 0x23,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x84,0x00);
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xf8,0x00,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0xa0,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x88,0xa0,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0xa0,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x88,0xa0,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0xa0,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x88,0xa0,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0xa0,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x88,0xa0,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x92,0x00);
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xdc,0x81,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0cf6(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0cf6;
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0cf7(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0cf7;
	clk += Opcodes::mov_dptr_imm        (aCPU, pc, 0x90,0x03,0xfd);
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfa,0x00,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7b,0x00,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7c,0x00,0x00);
	clk += Opcodes::push_mem            (aCPU, pc, 0xc0,0x02,0x00);
	clk += Opcodes::push_mem            (aCPU, pc, 0xc0,0x03,0x00);
	clk += Opcodes::push_mem            (aCPU, pc, 0xc0,0x04,0x00);
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x0f,0xeb);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0d09(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0d09;
	clk += Opcodes::pop_mem             (aCPU, pc, 0xd0,0x04,0x00);
	clk += Opcodes::pop_mem             (aCPU, pc, 0xd0,0x03,0x00);
	clk += Opcodes::pop_mem             (aCPU, pc, 0xd0,0x02,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x95,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0d12(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0d12;
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8b,0x82,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8c,0x83,0x00);
	clk += Opcodes::push_mem            (aCPU, pc, 0xc0,0x02,0x00);
	clk += Opcodes::push_mem            (aCPU, pc, 0xc0,0x03,0x00);
	clk += Opcodes::push_mem            (aCPU, pc, 0xc0,0x04,0x00);
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x0c,0x72);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0d1f(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0d1f;
	clk += Opcodes::pop_mem             (aCPU, pc, 0xd0,0x04,0x00);
	clk += Opcodes::pop_mem             (aCPU, pc, 0xd0,0x03,0x00);
	clk += Opcodes::pop_mem             (aCPU, pc, 0xd0,0x02,0x00);
	clk += Opcodes::dec_rx              (aCPU, pc, 0x1a,0x00,0x00);
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xea,0x00,0x00);
	clk += Opcodes::jz_offset           (aCPU, pc, 0x60,0x50,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0d29(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0d29;
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8b,0x82,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8c,0x83,0x00);
	clk += Opcodes::push_mem            (aCPU, pc, 0xc0,0x02,0x00);
	clk += Opcodes::push_mem            (aCPU, pc, 0xc0,0x03,0x00);
	clk += Opcodes::push_mem            (aCPU, pc, 0xc0,0x04,0x00);
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x0c,0x72);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0d36(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0d36;
	clk += Opcodes::pop_mem             (aCPU, pc, 0xd0,0x04,0x00);
	clk += Opcodes::pop_mem             (aCPU, pc, 0xd0,0x03,0x00);
	clk += Opcodes::pop_mem             (aCPU, pc, 0xd0,0x02,0x00);
	clk += Opcodes::dec_rx              (aCPU, pc, 0x1a,0x00,0x00);
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xea,0x00,0x00);
	clk += Opcodes::jz_offset           (aCPU, pc, 0x60,0x39,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0d40(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0d40;
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8b,0x82,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8c,0x83,0x00);
	clk += Opcodes::push_mem            (aCPU, pc, 0xc0,0x02,0x00);
	clk += Opcodes::push_mem            (aCPU, pc, 0xc0,0x03,0x00);
	clk += Opcodes::push_mem            (aCPU, pc, 0xc0,0x04,0x00);
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x0c,0x72);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0d4d(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0d4d;
	clk += Opcodes::pop_mem             (aCPU, pc, 0xd0,0x04,0x00);
	clk += Opcodes::pop_mem             (aCPU, pc, 0xd0,0x03,0x00);
	clk += Opcodes::pop_mem             (aCPU, pc, 0xd0,0x02,0x00);
	clk += Opcodes::dec_rx              (aCPU, pc, 0x1a,0x00,0x00);
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xea,0x00,0x00);
	clk += Opcodes::jz_offset           (aCPU, pc, 0x60,0x22,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0d57(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0d57;
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8b,0x82,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8c,0x83,0x00);
	clk += Opcodes::push_mem            (aCPU, pc, 0xc0,0x02,0x00);
	clk += Opcodes::push_mem            (aCPU, pc, 0xc0,0x03,0x00);
	clk += Opcodes::push_mem            (aCPU, pc, 0xc0,0x04,0x00);
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x0c,0x72);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0d64(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0d64;
	clk += Opcodes::pop_mem             (aCPU, pc, 0xd0,0x04,0x00);
	clk += Opcodes::pop_mem             (aCPU, pc, 0xd0,0x03,0x00);
	clk += Opcodes::pop_mem             (aCPU, pc, 0xd0,0x02,0x00);
	clk += Opcodes::mov_a_imm           (aCPU, pc, 0x74,0x10,0x00);
	clk += Opcodes::add_a_rx            (aCPU, pc, 0x2b,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfb,0x00,0x00);
	clk += Opcodes::clr_a               (aCPU, pc, 0xe4,0x00,0x00);
	clk += Opcodes::addc_a_rx           (aCPU, pc, 0x3c,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfc,0x00,0x00);
	clk += Opcodes::anl_mem_imm         (aCPU, pc, 0x53,0x03,0xf0);
	clk += Opcodes::anl_mem_imm         (aCPU, pc, 0x53,0x04,0x01);
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xda,0x99,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0d79(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0d79;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x95,0xff);
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x10,0x79);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0d7f(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0d7f;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x92,0x01);
	clk += Opcodes::mov_dptr_imm        (aCPU, pc, 0x90,0x03,0x00);
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfc,0x00,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfd,0x00,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfe,0x00,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xff,0x00,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x92,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7a,0x08,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0d95(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0d95;
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7b,0x08,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0d99(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0d99;
	clk += Opcodes::rrc_a               (aCPU, pc, 0x13,0x00,0x00);
	clk += Opcodes::jc_offset           (aCPU, pc, 0x40,0x1e,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0d9c(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0d9c;
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8d,0xa0,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8c,0xa0,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8d,0xa0,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8c,0xa0,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xdb,0xe3,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0db6(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0db6;
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xda,0xdd,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0db8(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0db8;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x1c,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0dba(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0dba;
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8f,0xa0,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8e,0xa0,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8f,0xa0,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8e,0xa0,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xdb,0xc5,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0dd4(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0dd4;
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xda,0xbf,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0dd6(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0dd6;
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0dd7(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0dd7;
	clk += Opcodes::mov_dptr_imm        (aCPU, pc, 0x90,0x03,0xfd);
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfa,0x00,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7b,0x00,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7c,0x00,0x00);
	clk += Opcodes::push_mem            (aCPU, pc, 0xc0,0x02,0x00);
	clk += Opcodes::push_mem            (aCPU, pc, 0xc0,0x03,0x00);
	clk += Opcodes::push_mem            (aCPU, pc, 0xc0,0x04,0x00);
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x0f,0xeb);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0de9(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0de9;
	clk += Opcodes::pop_mem             (aCPU, pc, 0xd0,0x04,0x00);
	clk += Opcodes::pop_mem             (aCPU, pc, 0xd0,0x03,0x00);
	clk += Opcodes::pop_mem             (aCPU, pc, 0xd0,0x02,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x95,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0df2(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0df2;
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8b,0x82,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8c,0x83,0x00);
	clk += Opcodes::push_mem            (aCPU, pc, 0xc0,0x02,0x00);
	clk += Opcodes::push_mem            (aCPU, pc, 0xc0,0x03,0x00);
	clk += Opcodes::push_mem            (aCPU, pc, 0xc0,0x04,0x00);
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x0d,0x7f);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0dff(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0dff;
	clk += Opcodes::pop_mem             (aCPU, pc, 0xd0,0x04,0x00);
	clk += Opcodes::pop_mem             (aCPU, pc, 0xd0,0x03,0x00);
	clk += Opcodes::pop_mem             (aCPU, pc, 0xd0,0x02,0x00);
	clk += Opcodes::dec_rx              (aCPU, pc, 0x1a,0x00,0x00);
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xea,0x00,0x00);
	clk += Opcodes::jz_offset           (aCPU, pc, 0x60,0x22,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0e09(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0e09;
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8b,0x82,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8c,0x83,0x00);
	clk += Opcodes::push_mem            (aCPU, pc, 0xc0,0x02,0x00);
	clk += Opcodes::push_mem            (aCPU, pc, 0xc0,0x03,0x00);
	clk += Opcodes::push_mem            (aCPU, pc, 0xc0,0x04,0x00);
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x0d,0x7f);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0e16(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0e16;
	clk += Opcodes::pop_mem             (aCPU, pc, 0xd0,0x04,0x00);
	clk += Opcodes::pop_mem             (aCPU, pc, 0xd0,0x03,0x00);
	clk += Opcodes::pop_mem             (aCPU, pc, 0xd0,0x02,0x00);
	clk += Opcodes::mov_a_imm           (aCPU, pc, 0x74,0x08,0x00);
	clk += Opcodes::add_a_rx            (aCPU, pc, 0x2b,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfb,0x00,0x00);
	clk += Opcodes::clr_a               (aCPU, pc, 0xe4,0x00,0x00);
	clk += Opcodes::addc_a_rx           (aCPU, pc, 0x3c,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfc,0x00,0x00);
	clk += Opcodes::anl_mem_imm         (aCPU, pc, 0x53,0x03,0xf8);
	clk += Opcodes::anl_mem_imm         (aCPU, pc, 0x53,0x04,0x01);
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xda,0xc7,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0e2b(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0e2b;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x95,0xff);
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x10,0x79);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0e31(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0e31;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x92,0x01);
	clk += Opcodes::mov_dptr_imm        (aCPU, pc, 0x90,0x03,0x00);
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfc,0x00,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfd,0x00,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfe,0x00,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xff,0x00,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x92,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7a,0x10,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0e47(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0e47;
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7b,0x08,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0e4b(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0e4b;
	clk += Opcodes::rrc_a               (aCPU, pc, 0x13,0x00,0x00);
	clk += Opcodes::jc_offset           (aCPU, pc, 0x40,0x12,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0e4e(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0e4e;
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8d,0xa0,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8c,0xa0,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xdb,0xef,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0e5c(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0e5c;
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xda,0xe9,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0e5e(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0e5e;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x10,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0e60(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0e60;
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8f,0xa0,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8e,0xa0,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xdb,0xdd,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0e6e(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0e6e;
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xda,0xd7,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0e70(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0e70;
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0e71(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0e71;
	clk += Opcodes::mov_dptr_imm        (aCPU, pc, 0x90,0x03,0xfd);
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfa,0x00,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7b,0x00,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7c,0x00,0x00);
	clk += Opcodes::push_mem            (aCPU, pc, 0xc0,0x02,0x00);
	clk += Opcodes::push_mem            (aCPU, pc, 0xc0,0x03,0x00);
	clk += Opcodes::push_mem            (aCPU, pc, 0xc0,0x04,0x00);
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x0f,0xeb);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0e83(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0e83;
	clk += Opcodes::pop_mem             (aCPU, pc, 0xd0,0x04,0x00);
	clk += Opcodes::pop_mem             (aCPU, pc, 0xd0,0x03,0x00);
	clk += Opcodes::pop_mem             (aCPU, pc, 0xd0,0x02,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x95,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0e8c(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0e8c;
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8b,0x82,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8c,0x83,0x00);
	clk += Opcodes::push_mem            (aCPU, pc, 0xc0,0x02,0x00);
	clk += Opcodes::push_mem            (aCPU, pc, 0xc0,0x03,0x00);
	clk += Opcodes::push_mem            (aCPU, pc, 0xc0,0x04,0x00);
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x0e,0x31);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0e99(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0e99;
	clk += Opcodes::pop_mem             (aCPU, pc, 0xd0,0x04,0x00);
	clk += Opcodes::pop_mem             (aCPU, pc, 0xd0,0x03,0x00);
	clk += Opcodes::pop_mem             (aCPU, pc, 0xd0,0x02,0x00);
	clk += Opcodes::mov_a_imm           (aCPU, pc, 0x74,0x10,0x00);
	clk += Opcodes::add_a_rx            (aCPU, pc, 0x2b,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfb,0x00,0x00);
	clk += Opcodes::clr_a               (aCPU, pc, 0xe4,0x00,0x00);
	clk += Opcodes::addc_a_rx           (aCPU, pc, 0x3c,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfc,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfd,0x00,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7e,0x00,0x00);
	clk += Opcodes::cjne_rx_imm_offset  (aCPU, pc, 0xbd,0x03,0x07);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0eac(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0eac;
	clk += Opcodes::cjne_rx_imm_offset  (aCPU, pc, 0xbe,0x00,0x04);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0eaf(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0eaf;
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7b,0x00,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7c,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0eb3(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0eb3;
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xda,0xd7,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0eb5(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0eb5;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x95,0xff);
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x10,0x79);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0ebb(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0ebb;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x0f,0xeb);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0ebe(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0ebe;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x95,0x00);
	clk += Opcodes::mov_dptr_imm        (aCPU, pc, 0x90,0x03,0xfd);
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xf9,0x00,0x00);
	clk += Opcodes::mov_dptr_imm        (aCPU, pc, 0x90,0x03,0x00);
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xf8,0x00,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0ecd(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0ecd;
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7a,0x80,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0ecf(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0ecf;
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0xa0,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x88,0xa0,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xda,0xf2,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0edd(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0edd;
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xd9,0xee,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0edf(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0edf;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x95,0xff);
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x10,0x79);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0ee5(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0ee5;
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7a,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0ee7(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0ee7;
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7b,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0ee9(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0ee9;
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xdb,0xfe,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0eeb(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0eeb;
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xda,0xfa,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0eed(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0eed;
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0eee(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0eee;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0xa4,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xae,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xce,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xa4,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x90,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0efc(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0efc;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x80,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x95,0xff);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x94,0xf3);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0f08(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0f08;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x96,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x93,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x08);
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x0e,0xe5);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0f14(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0f14;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x18);
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x0e,0xe5);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0f1a(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0f1a;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x79);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x90,0x0c);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0f20(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0f20;
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0f21(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0f21;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x0f,0xdd);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0f24(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0f24;
	clk += Opcodes::clr_bitaddr         (aCPU, pc, 0xc2,0xaf,0x00);
	clk += Opcodes::clr_bitaddr         (aCPU, pc, 0xc2,0xe8,0x00);
	clk += Opcodes::clr_bitaddr         (aCPU, pc, 0xc2,0xea,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xd6,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xd3,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xe2,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0f33(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0f33;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x98,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xfc,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xe4,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x95,0xff);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x80,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x90,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0f45(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0f45;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x18);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x08);
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x0e,0xe5);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0f4e(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0f4e;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x93,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x94,0xff);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0f57(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0f57;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x96,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xa0,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x95,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xce,0x80);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xae,0x02);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0f66(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0f66;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xa4,0x01);
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0xfb,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0f6b(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0f6b;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x95,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0f6e(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0f6e;
	clk += Opcodes::clr_a               (aCPU, pc, 0xe4,0x00,0x00);
	clk += Opcodes::movc_a_indir_a_dptr (aCPU, pc, 0x93,0x00,0x00);
	clk += Opcodes::jz_offset           (aCPU, pc, 0x60,0x17,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0f72(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0f72;
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::jb_bitaddr_offset   (aCPU, pc, 0x20,0xe7,0x17);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0f76(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0f76;
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xf8,0x00,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x78);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0f7a(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0f7a;
	clk += Opcodes::clr_a               (aCPU, pc, 0xe4,0x00,0x00);
	clk += Opcodes::movc_a_indir_a_dptr (aCPU, pc, 0x93,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0xa0,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x21,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0f82(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0f82;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x79);
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xd8,0xf3,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0f87(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0f87;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0xe5,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0f89(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0f89;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x95,0xff);
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0f8d(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0f8d;
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0x82,0x00);
	clk += Opcodes::add_a_mem           (aCPU, pc, 0x25,0x58,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xf8,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0f92(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0f92;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x58,0x00);
	clk += Opcodes::xrl_a_rx            (aCPU, pc, 0x68,0x00,0x00);
	clk += Opcodes::jnz_offset          (aCPU, pc, 0x70,0xfb,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0f97(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0f97;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0xd5,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0f99(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0f99;
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7a,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0f9b(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0f9b;
	clk += Opcodes::cjne_rx_imm_offset  (aCPU, pc, 0xba,0x1f,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0f9e(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0f9e;
	clk += Opcodes::jnc_offset          (aCPU, pc, 0x50,0x0b,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0fa0(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0fa0;
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xea,0x00,0x00);
	clk += Opcodes::add_a_rx            (aCPU, pc, 0x2a,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0xa0,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_rx              (aCPU, pc, 0x0a,0x00,0x00);
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0xf0,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0fab(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0fab;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xa0,0x3f);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0fb3(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0fb3;
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7a,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0fb5(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0fb5;
	clk += Opcodes::cjne_rx_imm_offset  (aCPU, pc, 0xba,0x40,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0fb8(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0fb8;
	clk += Opcodes::jnc_offset          (aCPU, pc, 0x50,0x09,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0fba(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0fba;
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8a,0xa0,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_rx              (aCPU, pc, 0x0a,0x00,0x00);
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0xf2,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0fc3(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0fc3;
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0fc4(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0fc4;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x95,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x78);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xa0,0x2d);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x79);
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x0f,0x99);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0fd7(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0fd7;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x0f,0xb3);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0fda(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0fda;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x0f,0x99);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0fdd(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0fdd;
	clk += Opcodes::jbc_bitaddr_offset  (aCPU, pc, 0x10,0x07,0x01);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0fe0(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0fe0;
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0fe1(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0fe1;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x78);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x7a);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x7c);
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0feb(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0feb;
	clk += Opcodes::mov_dptr_imm        (aCPU, pc, 0x90,0x03,0xff);
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfa,0x00,0x00);
	clk += Opcodes::mov_dptr_imm        (aCPU, pc, 0x90,0x03,0xfe);
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_dptr_imm        (aCPU, pc, 0x90,0x03,0xfc);
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfb,0x00,0x00);
	clk += Opcodes::jb_bitaddr_offset   (aCPU, pc, 0x20,0x07,0x1f);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_0ffc(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x0ffc;
	clk += Opcodes::setb_bitaddr        (aCPU, pc, 0xd2,0x07,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x78);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x7c);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x79);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x7d);
	clk += Opcodes::mov_dptr_imm        (aCPU, pc, 0x90,0x1e,0x5c);
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x0f,0x6b);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1010(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1010;
	clk += Opcodes::push_mem            (aCPU, pc, 0xc0,0x02,0x00);
	clk += Opcodes::push_mem            (aCPU, pc, 0xc0,0x03,0x00);
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x0f,0xc4);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1017(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1017;
	clk += Opcodes::pop_mem             (aCPU, pc, 0xd0,0x03,0x00);
	clk += Opcodes::pop_mem             (aCPU, pc, 0xd0,0x02,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_101b(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x101b;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x95,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x78);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xa0,0x36);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x79);
	clk += Opcodes::mov_a_imm           (aCPU, pc, 0x74,0xe0,0x00);
	clk += Opcodes::anl_a_rx            (aCPU, pc, 0x5a,0x00,0x00);
	clk += Opcodes::xrl_a_imm           (aCPU, pc, 0x64,0x08,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0xa0,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x78);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xa0,0x2b);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x79);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xa0,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8b,0xa0,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xa0,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xa0,0x7f);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x78);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xa0,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x80,0x01);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xa0,0x2c);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x79);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x95,0xff);
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1079(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1079;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x79);
	clk += Opcodes::mov_dptr_imm        (aCPU, pc, 0x90,0x1e,0xaa);
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x0f,0x6b);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1082(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1082;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x7b);
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1086(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1086;
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xeb,0x00,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0x03,0x00);
	clk += Opcodes::jz_offset           (aCPU, pc, 0x60,0x36,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_108b(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x108b;
	clk += Opcodes::dec_a               (aCPU, pc, 0x14,0x00,0x00);
	clk += Opcodes::jz_offset           (aCPU, pc, 0x60,0x23,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_108e(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x108e;
	clk += Opcodes::dec_a               (aCPU, pc, 0x14,0x00,0x00);
	clk += Opcodes::jz_offset           (aCPU, pc, 0x60,0x10,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1091(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1091;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x84,0x00);
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0xda,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x82,0x00);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x85,0x00);
	clk += Opcodes::addc_a_imm          (aCPU, pc, 0x34,0xff,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0x03,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x83,0x00);
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x2e,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_10a1(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x10a1;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x84,0x00);
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0xdc,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x82,0x00);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x85,0x00);
	clk += Opcodes::addc_a_imm          (aCPU, pc, 0x34,0xff,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0x03,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x83,0x00);
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x1e,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_10b1(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x10b1;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x84,0x00);
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0xfc,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x82,0x00);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x85,0x00);
	clk += Opcodes::addc_a_imm          (aCPU, pc, 0x34,0xff,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0x03,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x83,0x00);
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x0e,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_10c1(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x10c1;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x84,0x00);
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0xfe,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x82,0x00);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x85,0x00);
	clk += Opcodes::addc_a_imm          (aCPU, pc, 0x34,0xff,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0x03,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x83,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_10cf(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x10cf;
	clk += Opcodes::inc_rx              (aCPU, pc, 0x09,0x00,0x00);
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xec,0x00,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0x0f,0x00);
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0xf9,0x00);
	clk += Opcodes::clr_c               (aCPU, pc, 0xc3,0x00,0x00);
	clk += Opcodes::rlc_a               (aCPU, pc, 0x33,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfd,0x00,0x00);
	clk += Opcodes::jb_bitaddr_offset   (aCPU, pc, 0x20,0xe7,0x21);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_10db(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x10db;
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::add_a_rx            (aCPU, pc, 0x2d,0x00,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x92,0x01);
	clk += Opcodes::movx_indir_dptr_a   (aCPU, pc, 0xf0,0x00,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x92,0x00);
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::jnc_offset          (aCPU, pc, 0x50,0x02,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_10ea(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x10ea;
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0x02,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_10ec(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x10ec;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x92,0x01);
	clk += Opcodes::movx_indir_dptr_a   (aCPU, pc, 0xf0,0x00,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x92,0x00);
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xd9,0xe5,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_10f6(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x10f6;
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7d,0x00,0x00);
	clk += Opcodes::mov_dptr_imm        (aCPU, pc, 0x90,0x11,0xba);
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_10fc(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x10fc;
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::add_a_rx            (aCPU, pc, 0x2d,0x00,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x92,0x01);
	clk += Opcodes::movx_indir_dptr_a   (aCPU, pc, 0xf0,0x00,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x92,0x00);
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::jc_offset           (aCPU, pc, 0x40,0x02,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_110b(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x110b;
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0xfe,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_110d(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x110d;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x92,0x01);
	clk += Opcodes::movx_indir_dptr_a   (aCPU, pc, 0xf0,0x00,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x92,0x00);
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xd9,0xe5,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1117(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1117;
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7d,0x00,0x00);
	clk += Opcodes::mov_dptr_imm        (aCPU, pc, 0x90,0x11,0xba);
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_111d(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x111d;
	clk += Opcodes::push_mem            (aCPU, pc, 0xc0,0xe0,0x00);
	clk += Opcodes::push_mem            (aCPU, pc, 0xc0,0x82,0x00);
	clk += Opcodes::push_mem            (aCPU, pc, 0xc0,0x83,0x00);
	clk += Opcodes::push_mem            (aCPU, pc, 0xc0,0x92,0x00);
	clk += Opcodes::push_mem            (aCPU, pc, 0xc0,0x84,0x00);
	clk += Opcodes::push_mem            (aCPU, pc, 0xc0,0x85,0x00);
	clk += Opcodes::push_mem            (aCPU, pc, 0xc0,0xd0,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xd0,0x08);
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0x56,0x84);
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0x57,0x85);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1134(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1134;
	clk += Opcodes::jb_bitaddr_offset   (aCPU, pc, 0x20,0x08,0x0a);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1137(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1137;
	clk += Opcodes::setb_bitaddr        (aCPU, pc, 0xd2,0x08,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7d,0x00,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x84,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x85,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1141(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1141;
	clk += Opcodes::clr_bitaddr         (aCPU, pc, 0xc2,0xe9,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xe7,0x60);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1146(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1146;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xe7,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1149(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1149;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0xe6,0x00);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xe2,0xfb);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_114e(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x114e;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0xe7,0x00);
	clk += Opcodes::orl_a_imm           (aCPU, pc, 0x44,0xf1,0x00);
	clk += Opcodes::inc_a               (aCPU, pc, 0x04,0x00,0x00);
	clk += Opcodes::jnz_offset          (aCPU, pc, 0x70,0x0c,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1155(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1155;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0xe6,0x00);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xe2,0xfb);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_115a(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x115a;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0xe7,0x00);
	clk += Opcodes::setb_bitaddr        (aCPU, pc, 0xd2,0xe9,0x00);
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x13,0xbb);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1161(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1161;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0xe6,0x00);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xe2,0xfb);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1166(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1166;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0xe7,0x00);
	clk += Opcodes::setb_bitaddr        (aCPU, pc, 0xd2,0xe9,0x00);
	clk += Opcodes::jz_offset           (aCPU, pc, 0x60,0x06,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_116c(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x116c;
	clk += Opcodes::rl_a                (aCPU, pc, 0x23,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xff,0x00,0x00);
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0xbf,0x00);
	clk += Opcodes::jnc_offset          (aCPU, pc, 0x50,0x11,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1172(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1172;
	clk += Opcodes::clr_bitaddr         (aCPU, pc, 0xc2,0x08,0x00);
	clk += Opcodes::clr_bitaddr         (aCPU, pc, 0xc2,0xe9,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xe7,0xe2);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1179(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1179;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0xe6,0x00);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xe2,0xfb);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_117e(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x117e;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0xe7,0x00);
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x13,0x2c);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1183(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1183;
	clk += Opcodes::inc_a               (aCPU, pc, 0x04,0x00,0x00);
	clk += Opcodes::jz_offset           (aCPU, pc, 0x60,0x02,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1186(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1186;
	clk += Opcodes::clr_bitaddr         (aCPU, pc, 0xc2,0x08,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1188(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1188;
	clk += Opcodes::clr_bitaddr         (aCPU, pc, 0xc2,0xe9,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xe7,0x61);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_118d(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x118d;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xe7,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1190(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1190;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0xe6,0x00);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xe2,0xfb);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1195(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1195;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0xe7,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x92,0x00);
	clk += Opcodes::mov_dptr_imm        (aCPU, pc, 0x90,0x11,0xba);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_119d(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x119d;
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xef,0x00,0x00);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xe0,0x04);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_11a1(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x11a1;
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xee,0x00,0x00);
	clk += Opcodes::swap_a              (aCPU, pc, 0xc4,0x00,0x00);
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x0a,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_11a5(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x11a5;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0xe6,0x00);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xe2,0xfb);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_11aa(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x11aa;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0xe7,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xe7,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_11af(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x11af;
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfe,0x00,0x00);
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xed,0x00,0x00);
	clk += Opcodes::jmp_indir_a_dptr    (aCPU, pc, 0x73,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_11b2(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x11b2;
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfc,0x00,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x79,0x00,0x00);
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x10,0x86);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_11b8(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x11b8;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x37,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_11ba(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x11ba;
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xee,0x00,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0x0c,0x00);
	clk += Opcodes::jnz_offset          (aCPU, pc, 0x70,0x09,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_11bf(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x11bf;
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8e,0x09,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7d,0x71,0x00);
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xdf,0xd8,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_11c5(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x11c5;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x13,0x25);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_11c8(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x11c8;
	clk += Opcodes::cjne_a_imm_offset   (aCPU, pc, 0xb4,0x04,0x0e);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_11cb(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x11cb;
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8e,0x0b,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7c,0x07,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x79,0x00,0x00);
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x10,0x86);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_11d4(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x11d4;
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xdf,0xc7,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_11d6(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x11d6;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x13,0x25);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_11d9(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x11d9;
	clk += Opcodes::cjne_a_imm_offset   (aCPU, pc, 0xb4,0x08,0x09);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_11dc(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x11dc;
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8e,0x0b,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7d,0x3c,0x00);
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xdf,0xbb,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_11e2(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x11e2;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x13,0x25);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_11e5(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x11e5;
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xee,0x00,0x00);
	clk += Opcodes::rr_a                (aCPU, pc, 0x03,0x00,0x00);
	clk += Opcodes::rr_a                (aCPU, pc, 0x03,0x00,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0xc0,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfa,0x00,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7b,0x00,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7c,0x07,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7d,0x45,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_11f1(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x11f1;
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xdf,0xaa,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_11f3(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x11f3;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x13,0x25);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_11f6(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x11f6;
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xee,0x00,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0x0f,0x00);
	clk += Opcodes::cjne_a_imm_offset   (aCPU, pc, 0xb4,0x07,0xb6);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_11fc(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x11fc;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x12,0xe3);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_11ff(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x11ff;
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xee,0x00,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0x0f,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xf9,0x00,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7d,0x4d,0x00);
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0xea,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1207(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1207;
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xee,0x00,0x00);
	clk += Opcodes::swap_a              (aCPU, pc, 0xc4,0x00,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0xf0,0x00);
	clk += Opcodes::orl_mem_a           (aCPU, pc, 0x42,0x09,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7d,0x57,0x00);
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0xe0,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1211(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1211;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x92,0x01);
	clk += Opcodes::clr_c               (aCPU, pc, 0xc3,0x00,0x00);
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xe9,0x00,0x00);
	clk += Opcodes::rlc_a               (aCPU, pc, 0x33,0x00,0x00);
	clk += Opcodes::movx_indir_dptr_a   (aCPU, pc, 0xf0,0x00,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xee,0x00,0x00);
	clk += Opcodes::rlc_a               (aCPU, pc, 0x33,0x00,0x00);
	clk += Opcodes::rlc_a               (aCPU, pc, 0x33,0x00,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0x3e,0x00);
	clk += Opcodes::orl_a_rx            (aCPU, pc, 0x4a,0x00,0x00);
	clk += Opcodes::movx_indir_dptr_a   (aCPU, pc, 0xf0,0x00,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::anl_mem_imm         (aCPU, pc, 0x53,0x85,0x03);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x92,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7d,0x00,0x00);
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0xc6,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_122b(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x122b;
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xee,0x00,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0x0c,0x00);
	clk += Opcodes::jz_offset           (aCPU, pc, 0x60,0x09,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1230(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1230;
	clk += Opcodes::anl_mem_imm         (aCPU, pc, 0x53,0x09,0x0f);
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x10,0x86);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1236(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1236;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x11,0xba);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1239(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1239;
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xe9,0x00,0x00);
	clk += Opcodes::jb_bitaddr_offset   (aCPU, pc, 0x20,0xe1,0x1f);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_123d(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x123d;
	clk += Opcodes::rrc_a               (aCPU, pc, 0x13,0x00,0x00);
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xee,0x00,0x00);
	clk += Opcodes::rlc_a               (aCPU, pc, 0x33,0x00,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0x07,0x00);
	clk += Opcodes::inc_a               (aCPU, pc, 0x04,0x00,0x00);
	clk += Opcodes::rl_a                (aCPU, pc, 0x23,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xf9,0x00,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x92,0x01);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x84,0x00);
	clk += Opcodes::add_a_rx            (aCPU, pc, 0x29,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x84,0x00);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x85,0x00);
	clk += Opcodes::addc_a_imm          (aCPU, pc, 0x34,0x00,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0x03,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x85,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x92,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7d,0x00,0x00);
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x95,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_125c(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x125c;
	clk += Opcodes::jb_bitaddr_offset   (aCPU, pc, 0x20,0xe0,0x0b);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_125f(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x125f;
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xee,0x00,0x00);
	clk += Opcodes::swap_a              (aCPU, pc, 0xc4,0x00,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0x30,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xf9,0x00,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7d,0xae,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1266(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1266;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x89,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1268(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1268;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x6d,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_126a(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x126a;
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xee,0x00,0x00);
	clk += Opcodes::jb_bitaddr_offset   (aCPU, pc, 0x20,0xe1,0x27);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_126e(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x126e;
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xee,0x00,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0x01,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfa,0x00,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7d,0xbc,0x00);
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0xf0,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1276(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1276;
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xee,0x00,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0x0f,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xf9,0x00,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7d,0xc4,0x00);
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0xe8,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_127e(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x127e;
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xee,0x00,0x00);
	clk += Opcodes::swap_a              (aCPU, pc, 0xc4,0x00,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0xf0,0x00);
	clk += Opcodes::orl_a_rx            (aCPU, pc, 0x49,0x00,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x92,0x01);
	clk += Opcodes::clr_c               (aCPU, pc, 0xc3,0x00,0x00);
	clk += Opcodes::rlc_a               (aCPU, pc, 0x33,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x84,0x00);
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xea,0x00,0x00);
	clk += Opcodes::rlc_a               (aCPU, pc, 0x33,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x85,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x92,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7d,0x00,0x00);
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0xd1,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1295(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1295;
	clk += Opcodes::jb_bitaddr_offset   (aCPU, pc, 0x20,0xe0,0x3b);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1298(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1298;
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7d,0xe2,0x00);
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0xca,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_129c(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x129c;
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xee,0x00,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0x0f,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xf9,0x00,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7d,0xea,0x00);
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0xc2,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_12a4(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x12a4;
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xee,0x00,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0x0f,0x00);
	clk += Opcodes::swap_a              (aCPU, pc, 0xc4,0x00,0x00);
	clk += Opcodes::orl_mem_a           (aCPU, pc, 0x42,0x09,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7d,0xf4,0x00);
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0xb8,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_12ae(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x12ae;
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xee,0x00,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0x0f,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfa,0x00,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7d,0xfc,0x00);
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0xb0,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_12b6(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x12b6;
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xee,0x00,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0x0f,0x00);
	clk += Opcodes::swap_a              (aCPU, pc, 0xc4,0x00,0x00);
	clk += Opcodes::orl_mem_a           (aCPU, pc, 0x42,0x0a,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x92,0x01);
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xe9,0x00,0x00);
	clk += Opcodes::movx_indir_dptr_a   (aCPU, pc, 0xf0,0x00,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xea,0x00,0x00);
	clk += Opcodes::movx_indir_dptr_a   (aCPU, pc, 0xf0,0x00,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::anl_mem_imm         (aCPU, pc, 0x53,0x85,0x03);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x92,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7b,0x00,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7c,0x07,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7d,0x00,0x00);
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x93,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_12d3(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x12d3;
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7d,0x00,0x00);
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x29,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_12d7(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x12d7;
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xee,0x00,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0x0f,0x00);
	clk += Opcodes::orl_a_rx            (aCPU, pc, 0x49,0x00,0x00);
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0x04,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xf9,0x00,0x00);
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x10,0x86);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_12e1(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x12e1;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x83,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_12e3(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x12e3;
	clk += Opcodes::anl_mem_imm         (aCPU, pc, 0x53,0x0b,0x03);
	clk += Opcodes::cjne_rx_imm_offset  (aCPU, pc, 0xbb,0x00,0x15);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_12e9(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x12e9;
	clk += Opcodes::clr_bitaddr         (aCPU, pc, 0xc2,0x8c,0x00);
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0xe7,0x8a);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_12ee(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x12ee;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xe7,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_12f1(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x12f1;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0xe6,0x00);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xe2,0xfb);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_12f6(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x12f6;
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0xe7,0x8c);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_12f9(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x12f9;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xe7,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_12fc(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x12fc;
	clk += Opcodes::setb_bitaddr        (aCPU, pc, 0xd2,0x8c,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_12fe(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x12fe;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x25,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1300(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1300;
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xef,0x00,0x00);
	clk += Opcodes::dec_a               (aCPU, pc, 0x14,0x00,0x00);
	clk += Opcodes::clr_c               (aCPU, pc, 0xc3,0x00,0x00);
	clk += Opcodes::rrc_a               (aCPU, pc, 0x13,0x00,0x00);
	clk += Opcodes::jz_offset           (aCPU, pc, 0x60,0x1c,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1306(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1306;
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xff,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1307(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1307;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x62,0x00);
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0x74,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xf8,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_130c(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x130c;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0xe6,0x00);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xe2,0xfb);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1311(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1311;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0xe7,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xe7,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1316(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1316;
	clk += Opcodes::mov_indir_rx_a      (aCPU, pc, 0xf6,0x00,0x00);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x62,0x00);
	clk += Opcodes::inc_a               (aCPU, pc, 0x04,0x00,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0x3f,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x62,0x00);
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xdf,0xe7,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1320(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1320;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x03,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1322(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1322;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x62,0xff);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1325(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1325;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0xe6,0x00);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xe2,0xfb);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_132a(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x132a;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0xe7,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_132c(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x132c;
	clk += Opcodes::setb_bitaddr        (aCPU, pc, 0xd2,0xe9,0x00);
	clk += Opcodes::clr_bitaddr         (aCPU, pc, 0xc2,0xe9,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xe7,0x27);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1333(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1333;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xe7,0x40);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1336(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1336;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0xe6,0x00);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xe2,0xfb);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_133b(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x133b;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0xe7,0x00);
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0x59,0x19);
	clk += Opcodes::orl_a_imm           (aCPU, pc, 0x44,0xf1,0x00);
	clk += Opcodes::inc_a               (aCPU, pc, 0x04,0x00,0x00);
	clk += Opcodes::jz_offset           (aCPU, pc, 0x60,0x0c,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1345(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1345;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0xe6,0x00);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xe2,0xfb);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_134a(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x134a;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0xe7,0x00);
	clk += Opcodes::setb_bitaddr        (aCPU, pc, 0xd2,0xe9,0x00);
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x11,0x34);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1351(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1351;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0xe6,0x00);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xe2,0xfb);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1356(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1356;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0xe7,0x00);
	clk += Opcodes::setb_bitaddr        (aCPU, pc, 0xd2,0xe9,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_135a(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x135a;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x55,0x00);
	clk += Opcodes::jz_offset           (aCPU, pc, 0x60,0x5d,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_135e(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x135e;
	clk += Opcodes::clr_bitaddr         (aCPU, pc, 0xc2,0xe9,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xe7,0xa8);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1363(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1363;
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x78,0x48,0x00);
	clk += Opcodes::clr_c               (aCPU, pc, 0xc3,0x00,0x00);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xe5,0x05);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1369(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1369;
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7e,0x0b,0x00);
	clk += Opcodes::setb_c              (aCPU, pc, 0xd3,0x00,0x00);
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x1e,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_136e(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x136e;
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xe4,0x04);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1371(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1371;
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7e,0x0b,0x00);
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x17,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1375(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1375;
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xe3,0x04);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1378(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1378;
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7e,0x09,0x00);
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x10,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_137c(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x137c;
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xe2,0x04);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_137f(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x137f;
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7e,0x08,0x00);
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x09,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1383(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1383;
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xe1,0x04);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1386(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1386;
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7e,0x04,0x00);
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x02,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_138a(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x138a;
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7e,0x01,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_138c(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x138c;
	clk += Opcodes::mov_mem_indir_rx    (aCPU, pc, 0x86,0xe7,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_138e(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x138e;
	clk += Opcodes::inc_rx              (aCPU, pc, 0x08,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_138f(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x138f;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0xe6,0x00);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xe2,0xfb);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1394(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1394;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0xe7,0x00);
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xde,0xf4,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1398(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1398;
	clk += Opcodes::jnc_offset          (aCPU, pc, 0x50,0x15,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_139a(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x139a;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x92,0x00);
	clk += Opcodes::mov_dptr_imm        (aCPU, pc, 0x90,0xfc,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7e,0x08,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_13a2(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x13a2;
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0xe7,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_13a5(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x13a5;
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_13a6(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x13a6;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0xe6,0x00);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xe2,0xfb);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_13ab(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x13ab;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0xe7,0x00);
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xde,0xf3,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_13af(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x13af;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x55,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_13b2(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x13b2;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0xe6,0x00);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xe2,0xfb);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_13b7(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x13b7;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0xe7,0x00);
	clk += Opcodes::setb_bitaddr        (aCPU, pc, 0xd2,0xe9,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_13bb(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x13bb;
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0x84,0x56);
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0x85,0x57);
	clk += Opcodes::pop_mem             (aCPU, pc, 0xd0,0xd0,0x00);
	clk += Opcodes::pop_mem             (aCPU, pc, 0xd0,0x85,0x00);
	clk += Opcodes::pop_mem             (aCPU, pc, 0xd0,0x84,0x00);
	clk += Opcodes::pop_mem             (aCPU, pc, 0xd0,0x92,0x00);
	clk += Opcodes::pop_mem             (aCPU, pc, 0xd0,0x83,0x00);
	clk += Opcodes::pop_mem             (aCPU, pc, 0xd0,0x82,0x00);
	clk += Opcodes::pop_mem             (aCPU, pc, 0xd0,0xe0,0x00);
	clk += Opcodes::reti                (aCPU, pc, 0x32,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_13d0(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x13d0;
	clk += Opcodes::mov_rx_mem          (aCPU, pc, 0xaa,0x82,0x00);
	clk += Opcodes::mov_rx_mem          (aCPU, pc, 0xab,0x83,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_13d4(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x13d4;
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8a,0x82,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8b,0x83,0x00);
	clk += Opcodes::clr_a               (aCPU, pc, 0xe4,0x00,0x00);
	clk += Opcodes::movc_a_indir_a_dptr (aCPU, pc, 0x93,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfc,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfd,0x00,0x00);
	clk += Opcodes::jz_offset           (aCPU, pc, 0x60,0x2b,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_13de(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x13de;
	clk += Opcodes::inc_rx              (aCPU, pc, 0x0a,0x00,0x00);
	clk += Opcodes::cjne_rx_imm_offset  (aCPU, pc, 0xba,0x00,0x01);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_13e2(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x13e2;
	clk += Opcodes::inc_rx              (aCPU, pc, 0x0b,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_13e3(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x13e3;
	clk += Opcodes::clr_bitaddr         (aCPU, pc, 0xc2,0xe9,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8d,0x04,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8a,0x05,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8b,0x06,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_13eb(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x13eb;
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8d,0x82,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8e,0x83,0x00);
	clk += Opcodes::clr_a               (aCPU, pc, 0xe4,0x00,0x00);
	clk += Opcodes::movc_a_indir_a_dptr (aCPU, pc, 0x93,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0xe7,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_13f3(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x13f3;
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::mov_rx_mem          (aCPU, pc, 0xad,0x82,0x00);
	clk += Opcodes::mov_rx_mem          (aCPU, pc, 0xae,0x83,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_13f8(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x13f8;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0xe6,0x00);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xe2,0xfb);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_13fd(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x13fd;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0xe7,0x00);
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xdc,0xea,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1401(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1401;
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8d,0x02,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8e,0x03,0x00);
	clk += Opcodes::setb_bitaddr        (aCPU, pc, 0xd2,0xe9,0x00);
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0xcb,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1409(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1409;
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_140a(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x140a;
	clk += Opcodes::clr_bitaddr         (aCPU, pc, 0xc2,0xe8,0x00);
	clk += Opcodes::setb_bitaddr        (aCPU, pc, 0xd2,0xea,0x00);
	clk += Opcodes::mov_dptr_imm        (aCPU, pc, 0x90,0x1e,0xae);
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x13,0xd0);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1414(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1414;
	clk += Opcodes::setb_bitaddr        (aCPU, pc, 0xd2,0xb9,0x00);
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1417(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1417;
	clk += Opcodes::clr_bitaddr         (aCPU, pc, 0xc2,0xb9,0x00);
	clk += Opcodes::clr_bitaddr         (aCPU, pc, 0xc2,0xe9,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xe7,0x10);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_141e(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x141e;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xe7,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1421(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1421;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0xe6,0x00);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xe2,0xfb);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1426(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1426;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0xe7,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1428(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1428;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0xe6,0x00);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xe2,0xfb);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_142d(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x142d;
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0xe7,0x82);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1430(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1430;
	clk += Opcodes::setb_bitaddr        (aCPU, pc, 0xd2,0xe9,0x00);
	clk += Opcodes::setb_bitaddr        (aCPU, pc, 0xd2,0xb9,0x00);
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1435(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1435;
	clk += Opcodes::push_mem            (aCPU, pc, 0xc0,0xe0,0x00);
	clk += Opcodes::push_mem            (aCPU, pc, 0xc0,0xd0,0x00);
	clk += Opcodes::push_mem            (aCPU, pc, 0xc0,0x82,0x00);
	clk += Opcodes::push_mem            (aCPU, pc, 0xc0,0x83,0x00);
	clk += Opcodes::push_mem            (aCPU, pc, 0xc0,0x92,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x92,0x00);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0xe1,0x00);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xe0,0x0f);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1447(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1447;
	clk += Opcodes::jb_bitaddr_offset   (aCPU, pc, 0x20,0xe1,0x06);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_144a(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x144a;
	clk += Opcodes::mov_dptr_imm        (aCPU, pc, 0x90,0x14,0x61);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x5a,0x00);
	clk += Opcodes::jmp_indir_a_dptr    (aCPU, pc, 0x73,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1450(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1450;
	clk += Opcodes::orl_mem_imm         (aCPU, pc, 0x43,0xe2,0x20);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x5a,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1456(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1456;
	clk += Opcodes::pop_mem             (aCPU, pc, 0xd0,0x92,0x00);
	clk += Opcodes::pop_mem             (aCPU, pc, 0xd0,0x83,0x00);
	clk += Opcodes::pop_mem             (aCPU, pc, 0xd0,0x82,0x00);
	clk += Opcodes::pop_mem             (aCPU, pc, 0xd0,0xd0,0x00);
	clk += Opcodes::pop_mem             (aCPU, pc, 0xd0,0xe0,0x00);
	clk += Opcodes::reti                (aCPU, pc, 0x32,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1461(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1461;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xda,0xa8);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1464(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1464;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x5a,0x08);
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0xed,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1469(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1469;
	clk += Opcodes::orl_mem_imm         (aCPU, pc, 0x43,0xe2,0x10);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xda,0x31);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_146f(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x146f;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x5a,0x13);
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0xe2,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1474(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1474;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x5a,0x18);
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0xdd,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1479(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1479;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0xda,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x5a,0x1f);
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0xd6,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1480(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1480;
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0xda,0x5b);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1483(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1483;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x5a,0x27);
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0xce,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1488(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1488;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0xda,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x5a,0x2e);
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0xc7,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_148f(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x148f;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0xda,0x00);
	clk += Opcodes::cpl_a               (aCPU, pc, 0xf4,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x5c,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x5a,0x38);
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0xbd,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1499(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1499;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0xda,0x00);
	clk += Opcodes::orl_mem_imm         (aCPU, pc, 0x43,0xe2,0x20);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x5a,0x42);
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0xb3,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_14a3(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x14a3;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0xda,0x00);
	clk += Opcodes::xrl_a_mem           (aCPU, pc, 0x65,0x4b,0x00);
	clk += Opcodes::jz_offset           (aCPU, pc, 0x60,0x05,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_14a9(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x14a9;
	clk += Opcodes::xrl_mem_a           (aCPU, pc, 0x62,0x4b,0x00);
	clk += Opcodes::orl_mem_imm         (aCPU, pc, 0x43,0x55,0x02);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_14ae(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x14ae;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x5c,0x00);
	clk += Opcodes::xrl_a_mem           (aCPU, pc, 0x65,0x4a,0x00);
	clk += Opcodes::jz_offset           (aCPU, pc, 0x60,0x05,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_14b4(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x14b4;
	clk += Opcodes::xrl_mem_a           (aCPU, pc, 0x62,0x4a,0x00);
	clk += Opcodes::orl_mem_imm         (aCPU, pc, 0x43,0x55,0x02);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_14b9(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x14b9;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x5b,0x00);
	clk += Opcodes::xrl_a_mem           (aCPU, pc, 0x65,0x49,0x00);
	clk += Opcodes::jz_offset           (aCPU, pc, 0x60,0x05,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_14bf(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x14bf;
	clk += Opcodes::xrl_mem_a           (aCPU, pc, 0x62,0x49,0x00);
	clk += Opcodes::orl_mem_imm         (aCPU, pc, 0x43,0x55,0x02);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_14c4(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x14c4;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xda,0xaa);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_14c7(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x14c7;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x5b,0x48);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x5c,0x0b);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x5a,0x72);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_14d0(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x14d0;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x14,0x56);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_14d3(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x14d3;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xd0,0x00);
	clk += Opcodes::push_mem            (aCPU, pc, 0xc0,0x00,0x00);
	clk += Opcodes::mov_rx_mem          (aCPU, pc, 0xa8,0x5b,0x00);
	clk += Opcodes::mov_a_indir_rx      (aCPU, pc, 0xe6,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0xda,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_14dd(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x14dd;
	clk += Opcodes::pop_mem             (aCPU, pc, 0xd0,0x00,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x5b,0x00);
	clk += Opcodes::djnz_mem_offset     (aCPU, pc, 0xd5,0x5c,0xec);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_14e4(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x14e4;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x5a,0x88);
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0xe7,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_14e9(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x14e9;
	clk += Opcodes::orl_mem_imm         (aCPU, pc, 0x43,0xe2,0x10);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xda,0xab);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_14ef(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x14ef;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x5a,0x93);
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0xdc,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_14f4(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x14f4;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x5a,0x98);
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0xd7,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_14f9(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x14f9;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0xda,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x5b,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x5a,0xa5);
	clk += Opcodes::cjne_a_imm_offset   (aCPU, pc, 0xb4,0xff,0xcd);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1503(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1503;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x14,0x50);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1506(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1506;
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0xda,0x5c);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1509(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1509;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x5a,0xad);
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0xc2,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_150e(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x150e;
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0x5c,0x82);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x5b,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0x03,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x83,0x00);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0xda,0x00);
	clk += Opcodes::movx_indir_dptr_a   (aCPU, pc, 0xf0,0x00,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x5a,0x98);
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0xb1,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_151f(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x151f;
	clk += Opcodes::push_mem            (aCPU, pc, 0xc0,0xe0,0x00);
	clk += Opcodes::push_mem            (aCPU, pc, 0xc0,0xd0,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xd0,0x00);
	clk += Opcodes::push_mem            (aCPU, pc, 0xc0,0x00,0x00);
	clk += Opcodes::push_mem            (aCPU, pc, 0xc0,0x01,0x00);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x8c,0x00);
	clk += Opcodes::jnz_offset          (aCPU, pc, 0x70,0x16,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_152e(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x152e;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x8a,0x00);
	clk += Opcodes::addc_a_imm          (aCPU, pc, 0x34,0xf3,0x00);
	clk += Opcodes::jc_offset           (aCPU, pc, 0x40,0x10,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1534(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1534;
	clk += Opcodes::setb_bitaddr        (aCPU, pc, 0xd2,0x09,0x00);
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0x60,0x5e);
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0x61,0x5f);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x5d,0x11);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xcc,0xf0);
	clk += Opcodes::setb_bitaddr        (aCPU, pc, 0xd2,0xc8,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1544(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1544;
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x78,0x6c,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1546(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1546;
	clk += Opcodes::mov_a_indir_rx      (aCPU, pc, 0xe6,0x00,0x00);
	clk += Opcodes::mov_indir_rx_imm    (aCPU, pc, 0x76,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xf9,0x00,0x00);
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xe8,0x00,0x00);
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0x04,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xf8,0x00,0x00);
	clk += Opcodes::mov_a_indir_rx      (aCPU, pc, 0xe6,0x00,0x00);
	clk += Opcodes::mov_indir_rx_mem    (aCPU, pc, 0xa6,0x01,0x00);
	clk += Opcodes::xrl_a_rx            (aCPU, pc, 0x69,0x00,0x00);
	clk += Opcodes::jz_offset           (aCPU, pc, 0x60,0x09,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1554(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1554;
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xe8,0x00,0x00);
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0xfd,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xf8,0x00,0x00);
	clk += Opcodes::cjne_a_imm_offset   (aCPU, pc, 0xb4,0x70,0xeb);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_155b(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x155b;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x1c,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_155d(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x155d;
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xe8,0x00,0x00);
	clk += Opcodes::clr_c               (aCPU, pc, 0xc3,0x00,0x00);
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0x4c,0x00);
	clk += Opcodes::subb_a_imm          (aCPU, pc, 0x94,0x70,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xf8,0x00,0x00);
	clk += Opcodes::mov_a_indir_rx      (aCPU, pc, 0xe6,0x00,0x00);
	clk += Opcodes::xrl_a_rx            (aCPU, pc, 0x69,0x00,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0x9f,0x00);
	clk += Opcodes::jz_offset           (aCPU, pc, 0x60,0x05,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_156a(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x156a;
	clk += Opcodes::xrl_a_indir_rx      (aCPU, pc, 0x66,0x00,0x00);
	clk += Opcodes::mov_indir_rx_a      (aCPU, pc, 0xf6,0x00,0x00);
	clk += Opcodes::orl_mem_imm         (aCPU, pc, 0x43,0x55,0x04);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_156f(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x156f;
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xe8,0x00,0x00);
	clk += Opcodes::clr_c               (aCPU, pc, 0xc3,0x00,0x00);
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0x69,0x00);
	clk += Opcodes::subb_a_imm          (aCPU, pc, 0x94,0x48,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xf8,0x00,0x00);
	clk += Opcodes::cjne_a_imm_offset   (aCPU, pc, 0xb4,0x70,0xcd);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1579(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1579;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x90,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0x80,0x00);
	clk += Opcodes::cjne_a_imm_offset   (aCPU, pc, 0xb4,0x80,0x07);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1580(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1580;
	clk += Opcodes::jb_bitaddr_offset   (aCPU, pc, 0x20,0x0f,0x0f);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1583(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1583;
	clk += Opcodes::setb_bitaddr        (aCPU, pc, 0xd2,0x0f,0x00);
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x05,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1587(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1587;
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0x0f,0x08);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_158a(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x158a;
	clk += Opcodes::clr_bitaddr         (aCPU, pc, 0xc2,0x0f,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_158c(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x158c;
	clk += Opcodes::xrl_mem_imm         (aCPU, pc, 0x63,0x4c,0x40);
	clk += Opcodes::orl_mem_imm         (aCPU, pc, 0x43,0x55,0x04);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1592(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1592;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x58,0x00);
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0x01,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x58,0x00);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x59,0x00);
	clk += Opcodes::addc_a_imm          (aCPU, pc, 0x34,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x59,0x00);
	clk += Opcodes::pop_mem             (aCPU, pc, 0xd0,0x01,0x00);
	clk += Opcodes::pop_mem             (aCPU, pc, 0xd0,0x00,0x00);
	clk += Opcodes::pop_mem             (aCPU, pc, 0xd0,0xd0,0x00);
	clk += Opcodes::pop_mem             (aCPU, pc, 0xd0,0xe0,0x00);
	clk += Opcodes::reti                (aCPU, pc, 0x32,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_15a7(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x15a7;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xcc,0xff);
	clk += Opcodes::setb_bitaddr        (aCPU, pc, 0xd2,0xc8,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x5d,0x10);
	clk += Opcodes::clr_bitaddr         (aCPU, pc, 0xc2,0x0a,0x00);
	clk += Opcodes::clr_bitaddr         (aCPU, pc, 0xc2,0x0b,0x00);
	clk += Opcodes::clr_bitaddr         (aCPU, pc, 0xc2,0x0c,0x00);
	clk += Opcodes::reti                (aCPU, pc, 0x32,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_15b6(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x15b6;
	clk += Opcodes::push_mem            (aCPU, pc, 0xc0,0xe0,0x00);
	clk += Opcodes::push_mem            (aCPU, pc, 0xc0,0xd0,0x00);
	clk += Opcodes::jb_bitaddr_offset   (aCPU, pc, 0x20,0x09,0x48);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_15bd(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x15bd;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x8b,0x00);
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0xff,0x00);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x5f,0x00);
	clk += Opcodes::jb_bitaddr_offset   (aCPU, pc, 0x20,0x0a,0x07);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_15c6(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x15c6;
	clk += Opcodes::setb_bitaddr        (aCPU, pc, 0xd2,0x0a,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x94,0xc3);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_15cb(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x15cb;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x2e,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_15cd(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x15cd;
	clk += Opcodes::jb_bitaddr_offset   (aCPU, pc, 0x20,0x0b,0x09);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_15d0(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x15d0;
	clk += Opcodes::setb_bitaddr        (aCPU, pc, 0xd2,0x0b,0x00);
	clk += Opcodes::mov_bitaddr_c       (aCPU, pc, 0x92,0x0d,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x94,0xe2);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_15d7(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x15d7;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x22,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_15d9(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x15d9;
	clk += Opcodes::jb_bitaddr_offset   (aCPU, pc, 0x20,0x0c,0x1f);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_15dc(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x15dc;
	clk += Opcodes::setb_bitaddr        (aCPU, pc, 0xd2,0x0c,0x00);
	clk += Opcodes::mov_bitaddr_c       (aCPU, pc, 0x92,0x0e,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_15e0(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x15e0;
	clk += Opcodes::jb_bitaddr_offset   (aCPU, pc, 0x20,0x0d,0x0d);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_15e3(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x15e3;
	clk += Opcodes::jb_bitaddr_offset   (aCPU, pc, 0x20,0x0e,0x05);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_15e6(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x15e6;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x94,0xd0);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_15e9(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x15e9;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x10,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_15eb(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x15eb;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x94,0xe0);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_15ee(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x15ee;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x0b,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_15f0(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x15f0;
	clk += Opcodes::jb_bitaddr_offset   (aCPU, pc, 0x20,0x0e,0x05);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_15f3(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x15f3;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x94,0xc1);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_15f6(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x15f6;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x03,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_15f8(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x15f8;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x94,0xc2);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_15fb(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x15fb;
	clk += Opcodes::rlc_a               (aCPU, pc, 0x33,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x5f,0x00);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x5e,0x00);
	clk += Opcodes::rlc_a               (aCPU, pc, 0x33,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x5e,0x00);
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x21,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1605(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1605;
	clk += Opcodes::clr_bitaddr         (aCPU, pc, 0xc2,0x8e,0x00);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x5e,0x00);
	clk += Opcodes::rlc_a               (aCPU, pc, 0x33,0x00,0x00);
	clk += Opcodes::jnc_offset          (aCPU, pc, 0x50,0x06,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_160c(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x160c;
	clk += Opcodes::anl_mem_imm         (aCPU, pc, 0x53,0x94,0xcc);
	clk += Opcodes::orl_mem_imm         (aCPU, pc, 0x43,0x90,0x33);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1612(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1612;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x5f,0x00);
	clk += Opcodes::clr_c               (aCPU, pc, 0xc3,0x00,0x00);
	clk += Opcodes::rlc_a               (aCPU, pc, 0x33,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x5f,0x00);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x5e,0x00);
	clk += Opcodes::rlc_a               (aCPU, pc, 0x33,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x5e,0x00);
	clk += Opcodes::mov_a_imm           (aCPU, pc, 0x74,0x04,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_161f(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x161f;
	clk += Opcodes::djnz_mem_offset     (aCPU, pc, 0xd5,0xe0,0xfd);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1622(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1622;
	clk += Opcodes::nop                 (aCPU, pc, 0x00,0x00,0x00);
	clk += Opcodes::anl_mem_imm         (aCPU, pc, 0x53,0x90,0xcc);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1626(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1626;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x8b,0x00);
	clk += Opcodes::djnz_mem_offset     (aCPU, pc, 0xd5,0x5d,0x43);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_162c(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x162c;
	clk += Opcodes::clr_bitaddr         (aCPU, pc, 0xc2,0xc8,0x00);
	clk += Opcodes::jb_bitaddr_offset   (aCPU, pc, 0x20,0x09,0x22);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1631(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1631;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x5e,0x00);
	clk += Opcodes::orl_a_imm           (aCPU, pc, 0x44,0xe0,0x00);
	clk += Opcodes::cpl_a               (aCPU, pc, 0xf4,0x00,0x00);
	clk += Opcodes::xrl_a_mem           (aCPU, pc, 0x65,0x5f,0x00);
	clk += Opcodes::jnz_offset          (aCPU, pc, 0x70,0x28,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_163a(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x163a;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x5e,0x00);
	clk += Opcodes::swap_a              (aCPU, pc, 0xc4,0x00,0x00);
	clk += Opcodes::rr_a                (aCPU, pc, 0x03,0x00,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0x03,0x00);
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0x6c,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xd0,0x00);
	clk += Opcodes::push_mem            (aCPU, pc, 0xc0,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xf8,0x00,0x00);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x5e,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0x1f,0x00);
	clk += Opcodes::orl_a_imm           (aCPU, pc, 0x44,0x80,0x00);
	clk += Opcodes::mov_indir_rx_a      (aCPU, pc, 0xf6,0x00,0x00);
	clk += Opcodes::pop_mem             (aCPU, pc, 0xd0,0x00,0x00);
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x0f,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1653(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1653;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x5a,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xe2,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1659(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1659;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xe2,0x01);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_165c(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x165c;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xe2,0x07);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_165f(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x165f;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xda,0x30);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1662(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1662;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x8b,0xff);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x8d,0xff);
	clk += Opcodes::clr_bitaddr         (aCPU, pc, 0xc2,0x09,0x00);
	clk += Opcodes::setb_bitaddr        (aCPU, pc, 0xd2,0x8e,0x00);
	clk += Opcodes::orl_mem_imm         (aCPU, pc, 0x43,0x94,0x33);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_166f(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x166f;
	clk += Opcodes::clr_bitaddr         (aCPU, pc, 0xc2,0xc6,0x00);
	clk += Opcodes::pop_mem             (aCPU, pc, 0xd0,0xd0,0x00);
	clk += Opcodes::pop_mem             (aCPU, pc, 0xd0,0xe0,0x00);
	clk += Opcodes::reti                (aCPU, pc, 0x32,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1676(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1676;
	clk += Opcodes::mov_rx_mem          (aCPU, pc, 0xaa,0x82,0x00);
	clk += Opcodes::mov_rx_mem          (aCPU, pc, 0xab,0x83,0x00);
	clk += Opcodes::mov_rx_mem          (aCPU, pc, 0xac,0x1d,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_167c(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x167c;
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xec,0x00,0x00);
	clk += Opcodes::jz_offset           (aCPU, pc, 0x60,0x1e,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_167f(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x167f;
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8a,0x82,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8b,0x83,0x00);
	clk += Opcodes::clr_a               (aCPU, pc, 0xe4,0x00,0x00);
	clk += Opcodes::movc_a_indir_a_dptr (aCPU, pc, 0x93,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfd,0x00,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::mov_rx_mem          (aCPU, pc, 0xaa,0x82,0x00);
	clk += Opcodes::mov_rx_mem          (aCPU, pc, 0xab,0x83,0x00);
	clk += Opcodes::dec_rx              (aCPU, pc, 0x1c,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_168c(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x168c;
	clk += Opcodes::clr_bitaddr         (aCPU, pc, 0xc2,0xc2,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8d,0xda,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1690(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1690;
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xc2,0xfd);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1693(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1693;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0xe1,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfe,0x00,0x00);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xe0,0xf3);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1699(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1699;
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xee,0x00,0x00);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xe1,0xdf);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_169d(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x169d;
	clk += Opcodes::orl_mem_imm         (aCPU, pc, 0x43,0xe2,0x20);
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_16a1(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x16a1;
	clk += Opcodes::orl_mem_imm         (aCPU, pc, 0x43,0xb9,0x10);
	clk += Opcodes::orl_mem_imm         (aCPU, pc, 0x43,0x90,0x0c);
	clk += Opcodes::anl_mem_imm         (aCPU, pc, 0x53,0x94,0xf3);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xe2,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_16ad(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x16ad;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xe2,0x01);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_16b0(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x16b0;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xe2,0x07);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_16b3(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x16b3;
	clk += Opcodes::orl_mem_imm         (aCPU, pc, 0x43,0xa6,0x04);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xe1,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_16b9(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x16b9;
	clk += Opcodes::orl_mem_imm         (aCPU, pc, 0x43,0xc8,0x40);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xc0,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x1d,0x03);
	clk += Opcodes::mov_dptr_imm        (aCPU, pc, 0x90,0x1e,0xd1);
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x16,0x76);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_16c8(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x16c8;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x1d,0x03);
	clk += Opcodes::mov_dptr_imm        (aCPU, pc, 0x90,0x1e,0xd4);
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x16,0x76);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_16d1(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x16d1;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x1d,0x03);
	clk += Opcodes::mov_dptr_imm        (aCPU, pc, 0x90,0x1e,0xd7);
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x16,0x76);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_16da(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x16da;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xc0,0x00);
	clk += Opcodes::orl_mem_imm         (aCPU, pc, 0x43,0xa9,0x04);
	clk += Opcodes::setb_bitaddr        (aCPU, pc, 0xd2,0xba,0x00);
	clk += Opcodes::setb_bitaddr        (aCPU, pc, 0xd2,0x8c,0x00);
	clk += Opcodes::setb_bitaddr        (aCPU, pc, 0xd2,0xa9,0x00);
	clk += Opcodes::orl_mem_imm         (aCPU, pc, 0x43,0x89,0x50);
	clk += Opcodes::orl_mem_imm         (aCPU, pc, 0x43,0xa9,0x08);
	clk += Opcodes::orl_mem_imm         (aCPU, pc, 0x43,0xb9,0x08);
	clk += Opcodes::setb_bitaddr        (aCPU, pc, 0xd2,0xab,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xcb,0xff);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xca,0xf0);
	clk += Opcodes::orl_mem_imm         (aCPU, pc, 0x43,0xc8,0x10);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xcd,0xff);
	clk += Opcodes::orl_mem_imm         (aCPU, pc, 0x43,0xa9,0x20);
	clk += Opcodes::orl_mem_imm         (aCPU, pc, 0x43,0xb9,0x20);
	clk += Opcodes::setb_bitaddr        (aCPU, pc, 0xd2,0xad,0x00);
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x14,0x17);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1708(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1708;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x82,0x00);
	clk += Opcodes::orl_a_imm           (aCPU, pc, 0x44,0xe0,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x60,0x00);
	clk += Opcodes::cpl_a               (aCPU, pc, 0xf4,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfa,0x00,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8a,0x61,0x00);
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1713(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1713;
	clk += Opcodes::mov_a_imm           (aCPU, pc, 0x74,0x05,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1715(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1715;
	clk += Opcodes::djnz_mem_offset     (aCPU, pc, 0xd5,0xe0,0xfd);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1718(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1718;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0xd3,0x00);
	clk += Opcodes::jb_bitaddr_offset   (aCPU, pc, 0x20,0xe6,0xfb);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_171d(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x171d;
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_171e(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x171e;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x59,0x00);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xe2,0x08);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1723(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1723;
	clk += Opcodes::jb_bitaddr_offset   (aCPU, pc, 0x20,0x10,0x01);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1726(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1726;
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1727(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1727;
	clk += Opcodes::clr_bitaddr         (aCPU, pc, 0xc2,0x10,0x00);
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x06,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_172b(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x172b;
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0x10,0x01);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_172e(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x172e;
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_172f(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x172f;
	clk += Opcodes::setb_bitaddr        (aCPU, pc, 0xd2,0x10,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1731(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1731;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x17,0x13);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1734(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1734;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x80,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x93,0x01);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xd2,0x03);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xd1,0xc0);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xd3,0x81);
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x17,0x13);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1746(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1746;
	clk += Opcodes::clr_bitaddr         (aCPU, pc, 0xc2,0xb9,0x00);
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0xd5,0x51);
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0xd4,0x52);
	clk += Opcodes::orl_mem_imm         (aCPU, pc, 0x43,0x55,0x10);
	clk += Opcodes::setb_bitaddr        (aCPU, pc, 0xd2,0xb9,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x93,0x00);
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1757(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1757;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x80,0x2a);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x7b);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x80,0x54);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xa0,0xaa);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x59);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x79);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x80,0x14);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x7b);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x80,0xaa);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xa0,0x55);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x59);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x79);
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_177c(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x177c;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x17,0x57);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_177f(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x177f;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x80,0x2a);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x7b);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x80,0x54);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xa0,0xa0);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x59);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x79);
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1792(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1792;
	clk += Opcodes::clr_bitaddr         (aCPU, pc, 0xc2,0x11,0x00);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x1b,0x00);
	clk += Opcodes::jz_offset           (aCPU, pc, 0x60,0x01,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1798(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1798;
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1799(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1799;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x1c,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0x07,0x00);
	clk += Opcodes::jz_offset           (aCPU, pc, 0x60,0x01,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_179f(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x179f;
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_17a0(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x17a0;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x79);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x95,0x00);
	clk += Opcodes::clr_bitaddr         (aCPU, pc, 0xc2,0xb9,0x00);
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x17,0x57);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_17ab(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x17ab;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x80,0x2a);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x7b);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x80,0x54);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xa0,0x80);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x59);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x79);
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x17,0x57);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_17c0(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x17c0;
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0x1c,0x80);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x7d);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x80,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xa0,0x30);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x59);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x79);
	clk += Opcodes::setb_bitaddr        (aCPU, pc, 0xd2,0xb9,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x95,0xff);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x39);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_17da(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x17da;
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xa7,0xfd);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_17dd(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x17dd;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x17,0xe0);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_17e0(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x17e0;
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0x1c,0x80);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x3d);
	clk += Opcodes::mov_c_bitaddr       (aCPU, pc, 0xa2,0xa7,0x00);
	clk += Opcodes::mov_bitaddr_c       (aCPU, pc, 0x92,0x12,0x00);
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_17eb(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x17eb;
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0x12,0x05);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_17ee(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x17ee;
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xa7,0xfd);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_17f1(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x17f1;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x03,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_17f3(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x17f3;
	clk += Opcodes::jb_bitaddr_offset   (aCPU, pc, 0x20,0xa7,0xfd);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_17f6(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x17f6;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x79);
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_17fa(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x17fa;
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0x12,0x05);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_17fd(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x17fd;
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xa7,0xfd);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1800(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1800;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x03,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1802(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1802;
	clk += Opcodes::jb_bitaddr_offset   (aCPU, pc, 0x20,0xa7,0xfd);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1805(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1805;
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0x11,0x03);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1808(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1808;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x17,0x92);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_180b(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x180b;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x79);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x95,0x00);
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x17,0x7c);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1814(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1814;
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0x1b,0x80);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x7b);
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0x1a,0x80);
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0x83,0xa0);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x59);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x79);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x95,0xff);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x39);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x1a,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x1a,0x00);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x82,0x00);
	clk += Opcodes::rlc_a               (aCPU, pc, 0x33,0x00,0x00);
	clk += Opcodes::mov_bitaddr_c       (aCPU, pc, 0x92,0x12,0x00);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x83,0x00);
	clk += Opcodes::rlc_a               (aCPU, pc, 0x33,0x00,0x00);
	clk += Opcodes::jnc_offset          (aCPU, pc, 0x50,0x05,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_183a(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x183a;
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xa7,0xfd);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_183d(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x183d;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x03,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_183f(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x183f;
	clk += Opcodes::jb_bitaddr_offset   (aCPU, pc, 0x20,0xa7,0xfd);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1842(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1842;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x79);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x95,0x00);
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x17,0x7c);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_184b(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x184b;
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0x1b,0x80);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x7b);
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0x1a,0x80);
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0x82,0xa0);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x59);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x79);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x95,0xff);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x39);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x1a,0x00);
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0x02,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x1a,0x00);
	clk += Opcodes::jz_offset           (aCPU, pc, 0x60,0x01,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_186b(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x186b;
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_186c(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x186c;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x1b,0x00);
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0x02,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x1b,0x00);
	clk += Opcodes::jz_offset           (aCPU, pc, 0x60,0x01,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1874(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1874;
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1875(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1875;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x1c,0x00);
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0x02,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x1c,0x00);
	clk += Opcodes::setb_bitaddr        (aCPU, pc, 0xd2,0x11,0x00);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0x12,0x05);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1880(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1880;
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xa7,0xfd);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1883(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1883;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x03,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1885(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1885;
	clk += Opcodes::jb_bitaddr_offset   (aCPU, pc, 0x20,0xa7,0xfd);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1888(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1888;
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x80,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x7d);
	clk += Opcodes::mov_c_bitaddr       (aCPU, pc, 0xa2,0xa7,0x00);
	clk += Opcodes::mov_bitaddr_c       (aCPU, pc, 0x92,0x12,0x00);
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1892(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1892;
	clk += Opcodes::push_mem            (aCPU, pc, 0xc0,0x02,0x00);
	clk += Opcodes::push_mem            (aCPU, pc, 0xc0,0x00,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x78,0xb4,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7a,0x22,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_189a(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x189a;
	clk += Opcodes::mov_indir_rx_imm    (aCPU, pc, 0x76,0x00,0x00);
	clk += Opcodes::inc_rx              (aCPU, pc, 0x08,0x00,0x00);
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xda,0xfb,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_189f(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x189f;
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0x62,0x65);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x6a,0xff);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x6b,0x18);
	clk += Opcodes::pop_mem             (aCPU, pc, 0xd0,0x00,0x00);
	clk += Opcodes::pop_mem             (aCPU, pc, 0xd0,0x02,0x00);
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_18ad(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x18ad;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x65,0x00);
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0x62,0x01);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_18b2(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x18b2;
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_18b3(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x18b3;
	clk += Opcodes::setb_bitaddr        (aCPU, pc, 0xd2,0x00,0x00);
	clk += Opcodes::mov_a_imm           (aCPU, pc, 0x74,0xff,0x00);
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0x62,0x02);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_18ba(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x18ba;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x03,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_18bc(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x18bc;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x18,0xcb);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_18bf(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x18bf;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x62,0x00);
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x18,0x92);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_18c5(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x18c5;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x50,0x00);
	clk += Opcodes::orl_mem_imm         (aCPU, pc, 0x43,0x55,0x20);
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_18cb(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x18cb;
	clk += Opcodes::mov_a_imm           (aCPU, pc, 0x74,0x03,0x00);
	clk += Opcodes::add_a_mem           (aCPU, pc, 0x25,0x58,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x69,0x00);
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x17,0xe0);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_18d4(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x18d4;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x58,0x00);
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0x69,0x02);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_18d9(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x18d9;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x05,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_18db(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x18db;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x65,0x00);
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0x62,0x03);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_18e0(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x18e0;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x17,0xeb);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_18e3(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x18e3;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x65,0x00);
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0x74,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xf8,0x00,0x00);
	clk += Opcodes::mov_mem_indir_rx    (aCPU, pc, 0x86,0x68,0x00);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x65,0x00);
	clk += Opcodes::inc_a               (aCPU, pc, 0x04,0x00,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0x3f,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x65,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x50,0x00);
	clk += Opcodes::orl_mem_imm         (aCPU, pc, 0x43,0x55,0x08);
	clk += Opcodes::clr_a               (aCPU, pc, 0xe4,0x00,0x00);
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0x6a,0x82);
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0x6b,0x83);
	clk += Opcodes::jmp_indir_a_dptr    (aCPU, pc, 0x73,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_18fe(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x18fe;
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_18ff(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x18ff;
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0x68,0x66);
	clk += Opcodes::mov_a_imm           (aCPU, pc, 0x74,0xe0,0x00);
	clk += Opcodes::anl_a_mem           (aCPU, pc, 0x55,0x66,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfa,0x00,0x00);
	clk += Opcodes::jz_offset           (aCPU, pc, 0x60,0x2b,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1909(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1909;
	clk += Opcodes::cjne_rx_imm_offset  (aCPU, pc, 0xba,0x20,0x02);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_190c(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x190c;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x2f,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_190e(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x190e;
	clk += Opcodes::cjne_rx_imm_offset  (aCPU, pc, 0xba,0x40,0x02);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1911(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1911;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x33,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1913(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1913;
	clk += Opcodes::cjne_rx_imm_offset  (aCPU, pc, 0xba,0x60,0x03);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1916(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1916;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x19,0x5d);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1919(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1919;
	clk += Opcodes::cjne_rx_imm_offset  (aCPU, pc, 0xba,0x80,0x03);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_191c(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x191c;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x19,0x6c);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_191f(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x191f;
	clk += Opcodes::cjne_rx_imm_offset  (aCPU, pc, 0xba,0xa0,0x03);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1922(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1922;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x19,0x7b);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1925(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1925;
	clk += Opcodes::cjne_rx_imm_offset  (aCPU, pc, 0xba,0xc0,0x03);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1928(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1928;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x19,0x8a);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_192b(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x192b;
	clk += Opcodes::cjne_rx_imm_offset  (aCPU, pc, 0xba,0xe0,0x03);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_192e(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x192e;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x19,0x96);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1931(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1931;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x19,0xa7);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1934(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1934;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x6a,0xd3);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x6b,0x19);
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x18,0xd4);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_193d(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x193d;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x6a,0xfe);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x6b,0x19);
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x18,0xd4);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1946(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1946;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x68,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0x0f,0x00);
	clk += Opcodes::rl_a                (aCPU, pc, 0x23,0x00,0x00);
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0xb4,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xf8,0x00,0x00);
	clk += Opcodes::mov_mem_indir_rx    (aCPU, pc, 0x86,0x82,0x00);
	clk += Opcodes::inc_rx              (aCPU, pc, 0x08,0x00,0x00);
	clk += Opcodes::mov_mem_indir_rx    (aCPU, pc, 0x86,0x83,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x78,0x40,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1955(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1955;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x17,0xfa);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1958(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1958;
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xd8,0xfb,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_195a(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x195a;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x18,0xd4);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_195d(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x195d;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x67,0x40);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x63,0xff);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x6a,0x74);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x6b,0x1a);
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x18,0xd4);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_196c(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x196c;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x67,0x40);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x63,0xff);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x6a,0xf5);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x6b,0x1a);
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x18,0xd4);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_197b(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x197b;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x67,0x40);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x63,0xff);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x6a,0x72);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x6b,0x1b);
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x18,0xd4);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_198a(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x198a;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x67,0x08);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x6a,0xe0);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x6b,0x1b);
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x18,0xd4);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1996(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1996;
	clk += Opcodes::mov_a_imm           (aCPU, pc, 0x74,0xe1,0x00);
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0x66,0x09);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_199b(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x199b;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x6a,0xaa);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x6b,0x19);
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x18,0xd4);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_19a4(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x19a4;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x18,0xd4);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_19a7(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x19a7;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x18,0xd4);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_19aa(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x19aa;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x1a,0x00);
	clk += Opcodes::mov_a_imm           (aCPU, pc, 0x74,0xfe,0x00);
	clk += Opcodes::anl_a_mem           (aCPU, pc, 0x55,0x68,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x1b,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x6a,0xbc);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x6b,0x19);
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x18,0xd4);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_19bc(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x19bc;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x17,0xeb);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_19bf(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x19bf;
	clk += Opcodes::mov_a_imm           (aCPU, pc, 0x74,0xfe,0x00);
	clk += Opcodes::anl_a_mem           (aCPU, pc, 0x55,0x68,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x1c,0x00);
	clk += Opcodes::setb_bitaddr        (aCPU, pc, 0xd2,0x11,0x00);
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x17,0xe0);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_19ca(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x19ca;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x6a,0xff);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x6b,0x18);
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x18,0xd4);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_19d3(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x19d3;
	clk += Opcodes::mov_a_imm           (aCPU, pc, 0x74,0x0f,0x00);
	clk += Opcodes::anl_a_mem           (aCPU, pc, 0x55,0x66,0x00);
	clk += Opcodes::add_a_mem           (aCPU, pc, 0x25,0xe0,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfa,0x00,0x00);
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0xb4,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xf8,0x00,0x00);
	clk += Opcodes::mov_indir_rx_mem    (aCPU, pc, 0xa6,0x68,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x6a,0xe8);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x6b,0x19);
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x18,0xd4);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_19e8(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x19e8;
	clk += Opcodes::mov_a_imm           (aCPU, pc, 0x74,0x0f,0x00);
	clk += Opcodes::anl_a_mem           (aCPU, pc, 0x55,0x66,0x00);
	clk += Opcodes::add_a_mem           (aCPU, pc, 0x25,0xe0,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfa,0x00,0x00);
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0xb4,0x00);
	clk += Opcodes::inc_a               (aCPU, pc, 0x04,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xf8,0x00,0x00);
	clk += Opcodes::mov_indir_rx_mem    (aCPU, pc, 0xa6,0x68,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x6a,0xff);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x6b,0x18);
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x18,0xd4);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_19fe(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x19fe;
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0x68,0x63);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x6a,0x0a);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x6b,0x1a);
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x18,0xd4);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1a0a(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1a0a;
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0x68,0x64);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x67,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x6a,0x19);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x6b,0x1a);
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x18,0xd4);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1a19(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1a19;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x63,0x00);
	clk += Opcodes::jb_bitaddr_offset   (aCPU, pc, 0x20,0xe0,0x12);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1a1e(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1a1e;
	clk += Opcodes::mov_rx_mem          (aCPU, pc, 0xaa,0x63,0x00);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x64,0x00);
	clk += Opcodes::clr_c               (aCPU, pc, 0xc3,0x00,0x00);
	clk += Opcodes::rrc_a               (aCPU, pc, 0x13,0x00,0x00);
	clk += Opcodes::xch_a_rx            (aCPU, pc, 0xca,0x00,0x00);
	clk += Opcodes::rrc_a               (aCPU, pc, 0x13,0x00,0x00);
	clk += Opcodes::xch_a_rx            (aCPU, pc, 0xca,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfb,0x00,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8a,0x63,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8b,0x64,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x67,0x00);
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0xe9,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1a30(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1a30;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x67,0x00);
	clk += Opcodes::add_a_mem           (aCPU, pc, 0x25,0x67,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfa,0x00,0x00);
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0xb4,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xf8,0x00,0x00);
	clk += Opcodes::mov_indir_rx_mem    (aCPU, pc, 0xa6,0x68,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x6a,0x43);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x6b,0x1a);
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x18,0xd4);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1a43(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1a43;
	clk += Opcodes::mov_rx_mem          (aCPU, pc, 0xaa,0x67,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x67,0x00);
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xea,0x00,0x00);
	clk += Opcodes::add_a_rx            (aCPU, pc, 0x2a,0x00,0x00);
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0xb4,0x00);
	clk += Opcodes::inc_a               (aCPU, pc, 0x04,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xf8,0x00,0x00);
	clk += Opcodes::mov_indir_rx_mem    (aCPU, pc, 0xa6,0x68,0x00);
	clk += Opcodes::mov_rx_mem          (aCPU, pc, 0xaa,0x63,0x00);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x64,0x00);
	clk += Opcodes::clr_c               (aCPU, pc, 0xc3,0x00,0x00);
	clk += Opcodes::rrc_a               (aCPU, pc, 0x13,0x00,0x00);
	clk += Opcodes::xch_a_rx            (aCPU, pc, 0xca,0x00,0x00);
	clk += Opcodes::rrc_a               (aCPU, pc, 0x13,0x00,0x00);
	clk += Opcodes::xch_a_rx            (aCPU, pc, 0xca,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfb,0x00,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8a,0x63,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8b,0x64,0x00);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x63,0x00);
	clk += Opcodes::orl_a_mem           (aCPU, pc, 0x45,0x64,0x00);
	clk += Opcodes::jz_offset           (aCPU, pc, 0x60,0x06,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1a63(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1a63;
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7a,0x19,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7b,0x1a,0x00);
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x04,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1a69(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1a69;
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7a,0xff,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7b,0x18,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1a6d(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1a6d;
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8a,0x6a,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8b,0x6b,0x00);
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x18,0xd4);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1a74(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1a74;
	clk += Opcodes::mov_a_imm           (aCPU, pc, 0x74,0x0f,0x00);
	clk += Opcodes::anl_a_mem           (aCPU, pc, 0x55,0x68,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfa,0x00,0x00);
	clk += Opcodes::setb_bitaddr        (aCPU, pc, 0xd2,0x13,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1a7b(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1a7b;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x64,0x00);
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0x63,0x1b);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1a80(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1a80;
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8a,0x03,0x00);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x63,0x00);
	clk += Opcodes::swap_a              (aCPU, pc, 0xc4,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfc,0x00,0x00);
	clk += Opcodes::orl_a_mem           (aCPU, pc, 0x45,0x63,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfa,0x00,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x63,0xf0);
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xeb,0x00,0x00);
	clk += Opcodes::jz_offset           (aCPU, pc, 0x60,0x33,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1a8f(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1a8f;
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xeb,0x00,0x00);
	clk += Opcodes::rl_a                (aCPU, pc, 0x23,0x00,0x00);
	clk += Opcodes::rl_a                (aCPU, pc, 0x23,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfb,0x00,0x00);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x67,0x00);
	clk += Opcodes::clr_c               (aCPU, pc, 0xc3,0x00,0x00);
	clk += Opcodes::subb_a_rx           (aCPU, pc, 0x9b,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x67,0x00);
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x10,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1a9b(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1a9b;
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7b,0x04,0x00);
	clk += Opcodes::dec_mem             (aCPU, pc, 0x15,0x67,0x00);
	clk += Opcodes::dec_mem             (aCPU, pc, 0x15,0x67,0x00);
	clk += Opcodes::dec_mem             (aCPU, pc, 0x15,0x67,0x00);
	clk += Opcodes::dec_mem             (aCPU, pc, 0x15,0x67,0x00);
	clk += Opcodes::mov_rx_mem          (aCPU, pc, 0xac,0x63,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8c,0x64,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8a,0x63,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1aab(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1aab;
	clk += Opcodes::mov_a_imm           (aCPU, pc, 0x74,0x01,0x00);
	clk += Opcodes::anl_a_rx            (aCPU, pc, 0x5a,0x00,0x00);
	clk += Opcodes::add_a_mem           (aCPU, pc, 0x25,0xe0,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfc,0x00,0x00);
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0xb4,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xf8,0x00,0x00);
	clk += Opcodes::mov_mem_indir_rx    (aCPU, pc, 0x86,0x82,0x00);
	clk += Opcodes::inc_rx              (aCPU, pc, 0x08,0x00,0x00);
	clk += Opcodes::mov_mem_indir_rx    (aCPU, pc, 0x86,0x83,0x00);
	clk += Opcodes::dec_rx              (aCPU, pc, 0x18,0x00,0x00);
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x17,0xfa);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1abd(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1abd;
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xea,0x00,0x00);
	clk += Opcodes::rr_a                (aCPU, pc, 0x03,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfa,0x00,0x00);
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xdb,0xe9,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1ac2(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1ac2;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x67,0x00);
	clk += Opcodes::jz_offset           (aCPU, pc, 0x60,0x05,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1ac6(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1ac6;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x67,0x00);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xe7,0x19);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1acb(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1acb;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x66,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0x1f,0x00);
	clk += Opcodes::jz_offset           (aCPU, pc, 0x60,0x0a,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1ad1(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1ad1;
	clk += Opcodes::dec_mem             (aCPU, pc, 0x15,0x66,0x00);
	clk += Opcodes::mov_a_imm           (aCPU, pc, 0x74,0x40,0x00);
	clk += Opcodes::add_a_mem           (aCPU, pc, 0x25,0x67,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x67,0x00);
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x09,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1adb(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1adb;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x6a,0xff);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x6b,0x18);
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x18,0xd4);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1ae4(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1ae4;
	clk += Opcodes::jb_bitaddr_offset   (aCPU, pc, 0x20,0x13,0x03);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1ae7(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1ae7;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x18,0xd4);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1aea(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1aea;
	clk += Opcodes::clr_bitaddr         (aCPU, pc, 0xc2,0x13,0x00);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x68,0x00);
	clk += Opcodes::swap_a              (aCPU, pc, 0xc4,0x00,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0x0f,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfa,0x00,0x00);
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x1a,0x7b);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1af5(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1af5;
	clk += Opcodes::mov_a_imm           (aCPU, pc, 0x74,0x0f,0x00);
	clk += Opcodes::anl_a_mem           (aCPU, pc, 0x55,0x68,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfa,0x00,0x00);
	clk += Opcodes::setb_bitaddr        (aCPU, pc, 0xd2,0x13,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1afc(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1afc;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x64,0x00);
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0x63,0x1a);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1b01(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1b01;
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8a,0x03,0x00);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x63,0x00);
	clk += Opcodes::swap_a              (aCPU, pc, 0xc4,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfc,0x00,0x00);
	clk += Opcodes::orl_a_mem           (aCPU, pc, 0x45,0x63,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfa,0x00,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x63,0xf0);
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xeb,0x00,0x00);
	clk += Opcodes::jz_offset           (aCPU, pc, 0x60,0x2f,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1b10(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1b10;
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xeb,0x00,0x00);
	clk += Opcodes::rl_a                (aCPU, pc, 0x23,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfb,0x00,0x00);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x67,0x00);
	clk += Opcodes::clr_c               (aCPU, pc, 0xc3,0x00,0x00);
	clk += Opcodes::subb_a_rx           (aCPU, pc, 0x9b,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x67,0x00);
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x0c,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1b1b(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1b1b;
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7b,0x02,0x00);
	clk += Opcodes::dec_mem             (aCPU, pc, 0x15,0x67,0x00);
	clk += Opcodes::dec_mem             (aCPU, pc, 0x15,0x67,0x00);
	clk += Opcodes::mov_rx_mem          (aCPU, pc, 0xac,0x63,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8c,0x64,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8a,0x63,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1b27(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1b27;
	clk += Opcodes::mov_a_imm           (aCPU, pc, 0x74,0x03,0x00);
	clk += Opcodes::anl_a_rx            (aCPU, pc, 0x5a,0x00,0x00);
	clk += Opcodes::add_a_mem           (aCPU, pc, 0x25,0xe0,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfc,0x00,0x00);
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0xb4,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xf8,0x00,0x00);
	clk += Opcodes::mov_mem_indir_rx    (aCPU, pc, 0x86,0x82,0x00);
	clk += Opcodes::inc_rx              (aCPU, pc, 0x08,0x00,0x00);
	clk += Opcodes::mov_mem_indir_rx    (aCPU, pc, 0x86,0x83,0x00);
	clk += Opcodes::dec_rx              (aCPU, pc, 0x18,0x00,0x00);
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x17,0xfa);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1b39(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1b39;
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xea,0x00,0x00);
	clk += Opcodes::rr_a                (aCPU, pc, 0x03,0x00,0x00);
	clk += Opcodes::rr_a                (aCPU, pc, 0x03,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfa,0x00,0x00);
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xdb,0xe8,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1b3f(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1b3f;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x67,0x00);
	clk += Opcodes::jz_offset           (aCPU, pc, 0x60,0x05,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1b43(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1b43;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x67,0x00);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xe7,0x19);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1b48(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1b48;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x66,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0x1f,0x00);
	clk += Opcodes::jz_offset           (aCPU, pc, 0x60,0x0a,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1b4e(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1b4e;
	clk += Opcodes::dec_mem             (aCPU, pc, 0x15,0x66,0x00);
	clk += Opcodes::mov_a_imm           (aCPU, pc, 0x74,0x40,0x00);
	clk += Opcodes::add_a_mem           (aCPU, pc, 0x25,0x67,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x67,0x00);
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x09,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1b58(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1b58;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x6a,0xff);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x6b,0x18);
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x18,0xd4);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1b61(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1b61;
	clk += Opcodes::jb_bitaddr_offset   (aCPU, pc, 0x20,0x13,0x03);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1b64(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1b64;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x18,0xd4);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1b67(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1b67;
	clk += Opcodes::clr_bitaddr         (aCPU, pc, 0xc2,0x13,0x00);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x68,0x00);
	clk += Opcodes::swap_a              (aCPU, pc, 0xc4,0x00,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0x0f,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfa,0x00,0x00);
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x1a,0xfc);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1b72(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1b72;
	clk += Opcodes::mov_a_imm           (aCPU, pc, 0x74,0x0f,0x00);
	clk += Opcodes::anl_a_mem           (aCPU, pc, 0x55,0x68,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfa,0x00,0x00);
	clk += Opcodes::setb_bitaddr        (aCPU, pc, 0xd2,0x13,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1b79(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1b79;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x64,0x00);
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0x63,0x12);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1b7e(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1b7e;
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8a,0x03,0x00);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x67,0x00);
	clk += Opcodes::clr_c               (aCPU, pc, 0xc3,0x00,0x00);
	clk += Opcodes::subb_a_rx           (aCPU, pc, 0x9a,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x67,0x00);
	clk += Opcodes::mov_rx_mem          (aCPU, pc, 0xaa,0x63,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x63,0xf0);
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xeb,0x00,0x00);
	clk += Opcodes::jnz_offset          (aCPU, pc, 0x70,0x0c,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1b8e(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1b8e;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x1e,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1b90(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1b90;
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7b,0x01,0x00);
	clk += Opcodes::dec_mem             (aCPU, pc, 0x15,0x67,0x00);
	clk += Opcodes::mov_rx_mem          (aCPU, pc, 0xac,0x63,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8c,0x64,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8a,0x63,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1b9a(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1b9a;
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xea,0x00,0x00);
	clk += Opcodes::add_a_rx            (aCPU, pc, 0x2a,0x00,0x00);
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0xb4,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xf8,0x00,0x00);
	clk += Opcodes::mov_mem_indir_rx    (aCPU, pc, 0x86,0x04,0x00);
	clk += Opcodes::inc_rx              (aCPU, pc, 0x08,0x00,0x00);
	clk += Opcodes::mov_mem_indir_rx    (aCPU, pc, 0x86,0x05,0x00);
	clk += Opcodes::dec_rx              (aCPU, pc, 0x18,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1ba5(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1ba5;
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8c,0x82,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8d,0x83,0x00);
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x17,0xfa);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1bac(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1bac;
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xdb,0xf7,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1bae(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1bae;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x67,0x00);
	clk += Opcodes::jz_offset           (aCPU, pc, 0x60,0x05,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1bb2(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1bb2;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x67,0x00);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xe7,0x19);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1bb7(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1bb7;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x66,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0x1f,0x00);
	clk += Opcodes::jz_offset           (aCPU, pc, 0x60,0x0a,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1bbd(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1bbd;
	clk += Opcodes::dec_mem             (aCPU, pc, 0x15,0x66,0x00);
	clk += Opcodes::mov_a_imm           (aCPU, pc, 0x74,0x40,0x00);
	clk += Opcodes::add_a_mem           (aCPU, pc, 0x25,0x67,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x67,0x00);
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x09,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1bc7(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1bc7;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x6a,0xff);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x6b,0x18);
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x18,0xd4);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1bd0(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1bd0;
	clk += Opcodes::jb_bitaddr_offset   (aCPU, pc, 0x20,0x13,0x03);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1bd3(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1bd3;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x18,0xd4);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1bd6(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1bd6;
	clk += Opcodes::clr_bitaddr         (aCPU, pc, 0xc2,0x13,0x00);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x68,0x00);
	clk += Opcodes::swap_a              (aCPU, pc, 0xc4,0x00,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0x0f,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfa,0x00,0x00);
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x99,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1be0(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1be0;
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0x68,0x63);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x64,0x08);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1be6(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1be6;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x63,0x00);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xe0,0x09);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1beb(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1beb;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x6a,0x36);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x6b,0x1c);
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x18,0xd4);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1bf4(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1bf4;
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x78,0xd4,0x00);
	clk += Opcodes::mov_mem_indir_rx    (aCPU, pc, 0x86,0x82,0x00);
	clk += Opcodes::inc_rx              (aCPU, pc, 0x08,0x00,0x00);
	clk += Opcodes::mov_mem_indir_rx    (aCPU, pc, 0x86,0x83,0x00);
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x17,0xfa);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1bfe(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1bfe;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x63,0x00);
	clk += Opcodes::rr_a                (aCPU, pc, 0x03,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfa,0x00,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8a,0x63,0x00);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x64,0x00);
	clk += Opcodes::dec_a               (aCPU, pc, 0x14,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfa,0x00,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8a,0x64,0x00);
	clk += Opcodes::jnz_offset          (aCPU, pc, 0x70,0xda,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1c0c(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1c0c;
	clk += Opcodes::dec_mem             (aCPU, pc, 0x15,0x67,0x00);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x67,0x00);
	clk += Opcodes::jz_offset           (aCPU, pc, 0x60,0x08,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1c12(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1c12;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x6a,0xe0);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x6b,0x1b);
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x19,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1c1a(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1c1a;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x66,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0x1f,0x00);
	clk += Opcodes::jz_offset           (aCPU, pc, 0x60,0x0d,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1c20(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1c20;
	clk += Opcodes::dec_mem             (aCPU, pc, 0x15,0x66,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x67,0x08);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x6a,0xe0);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x6b,0x1b);
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x06,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1c2d(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1c2d;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x6a,0xff);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x6b,0x18);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1c33(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1c33;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x18,0xd4);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1c36(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1c36;
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x78,0xd4,0x00);
	clk += Opcodes::mov_indir_rx_mem    (aCPU, pc, 0xa6,0x68,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x6a,0x43);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x6b,0x1c);
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x18,0xd4);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1c43(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1c43;
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x78,0xd5,0x00);
	clk += Opcodes::mov_indir_rx_mem    (aCPU, pc, 0xa6,0x68,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x78,0xd4,0x00);
	clk += Opcodes::mov_mem_indir_rx    (aCPU, pc, 0x86,0x82,0x00);
	clk += Opcodes::inc_rx              (aCPU, pc, 0x08,0x00,0x00);
	clk += Opcodes::mov_mem_indir_rx    (aCPU, pc, 0x86,0x83,0x00);
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x17,0xfa);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1c51(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1c51;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x64,0x00);
	clk += Opcodes::dec_a               (aCPU, pc, 0x14,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfa,0x00,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8a,0x64,0x00);
	clk += Opcodes::jz_offset           (aCPU, pc, 0x60,0x2c,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1c59(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1c59;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x63,0x00);
	clk += Opcodes::rr_a                (aCPU, pc, 0x03,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfa,0x00,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8a,0x63,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1c5f(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1c5f;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x63,0x00);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xe0,0x09);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1c64(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1c64;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x6a,0x36);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x6b,0x1c);
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x18,0xd4);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1c6d(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1c6d;
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x78,0xd4,0x00);
	clk += Opcodes::mov_mem_indir_rx    (aCPU, pc, 0x86,0x82,0x00);
	clk += Opcodes::inc_rx              (aCPU, pc, 0x08,0x00,0x00);
	clk += Opcodes::mov_mem_indir_rx    (aCPU, pc, 0x86,0x83,0x00);
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x17,0xfa);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1c77(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1c77;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x63,0x00);
	clk += Opcodes::rr_a                (aCPU, pc, 0x03,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfa,0x00,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8a,0x63,0x00);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x64,0x00);
	clk += Opcodes::dec_a               (aCPU, pc, 0x14,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfa,0x00,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8a,0x64,0x00);
	clk += Opcodes::jnz_offset          (aCPU, pc, 0x70,0xda,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1c85(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1c85;
	clk += Opcodes::dec_mem             (aCPU, pc, 0x15,0x67,0x00);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x67,0x00);
	clk += Opcodes::jz_offset           (aCPU, pc, 0x60,0x08,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1c8b(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1c8b;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x6a,0xe0);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x6b,0x1b);
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x19,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1c93(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1c93;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x66,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0x1f,0x00);
	clk += Opcodes::jz_offset           (aCPU, pc, 0x60,0x0d,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1c99(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1c99;
	clk += Opcodes::dec_mem             (aCPU, pc, 0x15,0x66,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x67,0x08);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x6a,0xe0);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x6b,0x1b);
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x06,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1ca6(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1ca6;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x6a,0xff);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x6b,0x18);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1cac(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1cac;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x18,0xd4);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1caf(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1caf;
	clk += Opcodes::mov_dptr_imm        (aCPU, pc, 0x90,0xfc,0x00);
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfa,0x00,0x00);
	clk += Opcodes::cjne_rx_imm_offset  (aCPU, pc, 0xba,0xff,0x0a);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1cb7(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1cb7;
	clk += Opcodes::setb_bitaddr        (aCPU, pc, 0xd2,0xfd,0x00);
	clk += Opcodes::mov_dptr_imm        (aCPU, pc, 0x90,0xfc,0x00);
	clk += Opcodes::mov_a_imm           (aCPU, pc, 0x74,0x01,0x00);
	clk += Opcodes::movx_indir_dptr_a   (aCPU, pc, 0xf0,0x00,0x00);
	clk += Opcodes::clr_bitaddr         (aCPU, pc, 0xc2,0xfd,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1cc1(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1cc1;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xd6,0xc0);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7a,0x01,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1cc6(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1cc6;
	clk += Opcodes::cjne_rx_imm_offset  (aCPU, pc, 0xba,0x08,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1cc9(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1cc9;
	clk += Opcodes::jnc_offset          (aCPU, pc, 0x50,0x2e,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1ccb(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1ccb;
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xea,0x00,0x00);
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x82,0x00);
	clk += Opcodes::clr_a               (aCPU, pc, 0xe4,0x00,0x00);
	clk += Opcodes::addc_a_imm          (aCPU, pc, 0x34,0xfc,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x83,0x00);
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfb,0x00,0x00);
	clk += Opcodes::cjne_rx_imm_offset  (aCPU, pc, 0xbb,0xff,0x1c);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1cda(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1cda;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0xd6,0x00);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xe5,0xfb);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1cdf(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1cdf;
	clk += Opcodes::mov_rx_mem          (aCPU, pc, 0xab,0xd7,0x00);
	clk += Opcodes::cjne_rx_imm_offset  (aCPU, pc, 0xbb,0xff,0x02);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1ce4(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1ce4;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0xf4,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1ce6(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1ce6;
	clk += Opcodes::setb_bitaddr        (aCPU, pc, 0xd2,0xfd,0x00);
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xea,0x00,0x00);
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x82,0x00);
	clk += Opcodes::clr_a               (aCPU, pc, 0xe4,0x00,0x00);
	clk += Opcodes::addc_a_imm          (aCPU, pc, 0x34,0xfc,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x83,0x00);
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xeb,0x00,0x00);
	clk += Opcodes::movx_indir_dptr_a   (aCPU, pc, 0xf0,0x00,0x00);
	clk += Opcodes::clr_bitaddr         (aCPU, pc, 0xc2,0xfd,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1cf6(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1cf6;
	clk += Opcodes::inc_rx              (aCPU, pc, 0x0a,0x00,0x00);
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0xcd,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1cf9(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1cf9;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xd6,0x00);
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1cfd(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1cfd;
	clk += Opcodes::mov_dptr_imm        (aCPU, pc, 0x90,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1d00(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1d00;
	clk += Opcodes::clr_a               (aCPU, pc, 0xe4,0x00,0x00);
	clk += Opcodes::movx_indir_dptr_a   (aCPU, pc, 0xf0,0x00,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::movx_indir_dptr_a   (aCPU, pc, 0xf0,0x00,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::movx_indir_dptr_a   (aCPU, pc, 0xf0,0x00,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::movx_indir_dptr_a   (aCPU, pc, 0xf0,0x00,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::mov_a_imm           (aCPU, pc, 0x74,0x04,0x00);
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0x83,0xf2);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1d0e(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1d0e;
	clk += Opcodes::mov_dptr_imm        (aCPU, pc, 0x90,0x03,0xfd);
	clk += Opcodes::mov_a_imm           (aCPU, pc, 0x74,0x80,0x00);
	clk += Opcodes::movx_indir_dptr_a   (aCPU, pc, 0xf0,0x00,0x00);
	clk += Opcodes::mov_dptr_imm        (aCPU, pc, 0x90,0x03,0xfe);
	clk += Opcodes::mov_a_imm           (aCPU, pc, 0x74,0x04,0x00);
	clk += Opcodes::movx_indir_dptr_a   (aCPU, pc, 0xf0,0x00,0x00);
	clk += Opcodes::mov_dptr_imm        (aCPU, pc, 0x90,0x03,0xff);
	clk += Opcodes::mov_a_imm           (aCPU, pc, 0x74,0x08,0x00);
	clk += Opcodes::movx_indir_dptr_a   (aCPU, pc, 0xf0,0x00,0x00);
	clk += Opcodes::clr_a               (aCPU, pc, 0xe4,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x28,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x29,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x2a,0x00);
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1d29(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1d29;
	clk += Opcodes::mov_dptr_imm        (aCPU, pc, 0x90,0x03,0xff);
	clk += Opcodes::clr_a               (aCPU, pc, 0xe4,0x00,0x00);
	clk += Opcodes::movx_indir_dptr_a   (aCPU, pc, 0xf0,0x00,0x00);
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1d2f(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1d2f;
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0x28,0x84);
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0x29,0x85);
	clk += Opcodes::clr_a               (aCPU, pc, 0xe4,0x00,0x00);
	clk += Opcodes::movc_a_indir_a_dptr (aCPU, pc, 0x93,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xf9,0x00,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::clr_a               (aCPU, pc, 0xe4,0x00,0x00);
	clk += Opcodes::movc_a_indir_a_dptr (aCPU, pc, 0x93,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfa,0x00,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::clr_a               (aCPU, pc, 0xe4,0x00,0x00);
	clk += Opcodes::movc_a_indir_a_dptr (aCPU, pc, 0x93,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfb,0x00,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1d41(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1d41;
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x89,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1d43(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1d43;
	clk += Opcodes::clr_a               (aCPU, pc, 0xe4,0x00,0x00);
	clk += Opcodes::movc_a_indir_a_dptr (aCPU, pc, 0x93,0x00,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::clr_c               (aCPU, pc, 0xc3,0x00,0x00);
	clk += Opcodes::rlc_a               (aCPU, pc, 0x33,0x00,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x92,0x01);
	clk += Opcodes::movx_indir_dptr_a   (aCPU, pc, 0xf0,0x00,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xeb,0x00,0x00);
	clk += Opcodes::inc_a               (aCPU, pc, 0x04,0x00,0x00);
	clk += Opcodes::jz_offset           (aCPU, pc, 0x60,0x0e,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1d51(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1d51;
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xeb,0x00,0x00);
	clk += Opcodes::rlc_a               (aCPU, pc, 0x33,0x00,0x00);
	clk += Opcodes::rl_a                (aCPU, pc, 0x23,0x00,0x00);
	clk += Opcodes::xrl_a_mem           (aCPU, pc, 0x65,0x2a,0x00);
	clk += Opcodes::movx_indir_dptr_a   (aCPU, pc, 0xf0,0x00,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x92,0x00);
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xd8,0xe6,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1d5d(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1d5d;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x14,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1d5f(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1d5f;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x92,0x00);
	clk += Opcodes::clr_a               (aCPU, pc, 0xe4,0x00,0x00);
	clk += Opcodes::movc_a_indir_a_dptr (aCPU, pc, 0x93,0x00,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x92,0x01);
	clk += Opcodes::rlc_a               (aCPU, pc, 0x33,0x00,0x00);
	clk += Opcodes::rl_a                (aCPU, pc, 0x23,0x00,0x00);
	clk += Opcodes::xrl_a_mem           (aCPU, pc, 0x65,0x2a,0x00);
	clk += Opcodes::movx_indir_dptr_a   (aCPU, pc, 0xf0,0x00,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x92,0x00);
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xd8,0xd0,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1d73(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1d73;
	clk += Opcodes::clr_c               (aCPU, pc, 0xc3,0x00,0x00);
	clk += Opcodes::mov_a_imm           (aCPU, pc, 0x74,0x12,0x00);
	clk += Opcodes::subb_a_rx           (aCPU, pc, 0x99,0x00,0x00);
	clk += Opcodes::rl_a                (aCPU, pc, 0x23,0x00,0x00);
	clk += Opcodes::add_a_mem           (aCPU, pc, 0x25,0x84,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x84,0x00);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x85,0x00);
	clk += Opcodes::addc_a_imm          (aCPU, pc, 0x34,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x85,0x00);
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xda,0xbd,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1d84(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1d84;
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0x84,0x28);
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0x85,0x29);
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1d8b(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1d8b;
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0x28,0x84);
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0x29,0x85);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1d91(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1d91;
	clk += Opcodes::clr_a               (aCPU, pc, 0xe4,0x00,0x00);
	clk += Opcodes::movc_a_indir_a_dptr (aCPU, pc, 0x93,0x00,0x00);
	clk += Opcodes::jz_offset           (aCPU, pc, 0x60,0x15,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1d95(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1d95;
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0xe0,0x00);
	clk += Opcodes::clr_c               (aCPU, pc, 0xc3,0x00,0x00);
	clk += Opcodes::rlc_a               (aCPU, pc, 0x33,0x00,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x92,0x01);
	clk += Opcodes::movx_indir_dptr_a   (aCPU, pc, 0xf0,0x00,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x2a,0x00);
	clk += Opcodes::addc_a_imm          (aCPU, pc, 0x34,0x00,0x00);
	clk += Opcodes::movx_indir_dptr_a   (aCPU, pc, 0xf0,0x00,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x92,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0xe7,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1daa(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1daa;
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0x84,0x28);
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0x85,0x29);
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1db1(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1db1;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x82,0x00);
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0x28,0x82);
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0x29,0x83);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xf8,0x00,0x00);
	clk += Opcodes::swap_a              (aCPU, pc, 0xc4,0x00,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x79,0x02,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1dbd(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1dbd;
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0x0f,0x00);
	clk += Opcodes::clr_bitaddr         (aCPU, pc, 0xc2,0xd6,0x00);
	clk += Opcodes::clr_c               (aCPU, pc, 0xc3,0x00,0x00);
	clk += Opcodes::da_a                (aCPU, pc, 0xd4,0x00,0x00);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xe4,0x01);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1dc6(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1dc6;
	clk += Opcodes::inc_a               (aCPU, pc, 0x04,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1dc7(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1dc7;
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0x10,0x00);
	clk += Opcodes::rl_a                (aCPU, pc, 0x23,0x00,0x00);
	clk += Opcodes::movx_indir_dptr_a   (aCPU, pc, 0xf0,0x00,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x2a,0x00);
	clk += Opcodes::movx_indir_dptr_a   (aCPU, pc, 0xf0,0x00,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xe8,0x00,0x00);
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xd9,0xea,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1dd3(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1dd3;
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0x82,0x28);
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0x83,0x29);
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1dda(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1dda;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x1c,0xfd);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1ddd(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1ddd;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x28,0xb2);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x29,0x01);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x2a,0x40);
	clk += Opcodes::mov_dptr_imm        (aCPU, pc, 0x90,0x1e,0xda);
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x1d,0x8b);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1dec(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1dec;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x2a,0x20);
	clk += Opcodes::mov_dptr_imm        (aCPU, pc, 0x90,0x1e,0xe2);
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x1d,0x8b);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1df5(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1df5;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x28,0xb6);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x29,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x2a,0x00);
	clk += Opcodes::mov_dptr_imm        (aCPU, pc, 0x90,0x2e,0x67);
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x1d,0x2f);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1e04(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1e04;
	clk += Opcodes::clr_a               (aCPU, pc, 0xe4,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x28,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x29,0x00);
	clk += Opcodes::mov_dptr_imm        (aCPU, pc, 0x90,0x2e,0x55);
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x1d,0x2f);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1e0f(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1e0f;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x28,0x26);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x29,0x00);
	clk += Opcodes::mov_dptr_imm        (aCPU, pc, 0x90,0x2e,0x19);
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x1d,0x2f);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1e1b(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1e1b;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x28,0x18);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x29,0x00);
	clk += Opcodes::mov_dptr_imm        (aCPU, pc, 0x90,0x2e,0x46);
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x1d,0x2f);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1e27(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1e27;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x28,0x18);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x29,0x00);
	clk += Opcodes::mov_dptr_imm        (aCPU, pc, 0x90,0x2e,0x1f);
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x1d,0x2f);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1e33(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1e33;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x28,0x38);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x29,0x02);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x2a,0x50);
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x14,0x17);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1e3f(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1e3f;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x1d,0xb1);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1e42(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1e42;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x00,0xec);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_1e45(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x1e45;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x1d,0x29);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2000(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2000;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x92,0x01);
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x80,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x3b);
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x80,0x00);
	clk += Opcodes::dec_mem             (aCPU, pc, 0x15,0x84,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x3d);
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xec,0x00,0x00);
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2014(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2014;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x92,0x01);
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x80,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x3b);
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x80,0x00);
	clk += Opcodes::dec_mem             (aCPU, pc, 0x15,0x84,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x3d);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8c,0x80,0x00);
	clk += Opcodes::mov_a_imm           (aCPU, pc, 0x74,0x4f,0x00);
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_202b(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x202b;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_202d(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x202d;
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0x04,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x80,0x00);
	clk += Opcodes::mov_a_imm           (aCPU, pc, 0x74,0x4f,0x00);
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2034(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2034;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2036(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2036;
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0x08,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x80,0x00);
	clk += Opcodes::mov_a_imm           (aCPU, pc, 0x74,0x4f,0x00);
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_203d(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x203d;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_203f(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x203f;
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0x0c,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x80,0x00);
	clk += Opcodes::mov_a_imm           (aCPU, pc, 0x74,0x4f,0x00);
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2046(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2046;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2048(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2048;
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0x10,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x80,0x00);
	clk += Opcodes::mov_a_imm           (aCPU, pc, 0x74,0x4f,0x00);
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_204f(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x204f;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2051(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2051;
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0x14,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x80,0x00);
	clk += Opcodes::mov_a_imm           (aCPU, pc, 0x74,0x4f,0x00);
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2058(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2058;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_205a(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x205a;
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0x18,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x80,0x00);
	clk += Opcodes::mov_a_imm           (aCPU, pc, 0x74,0x4f,0x00);
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2061(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2061;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2063(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2063;
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0x1c,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x80,0x00);
	clk += Opcodes::mov_a_imm           (aCPU, pc, 0x74,0x4f,0x00);
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_206a(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x206a;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x92,0x00);
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x80,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x3b);
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x80,0x00);
	clk += Opcodes::dec_mem             (aCPU, pc, 0x15,0x82,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x3d);
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xeb,0x00,0x00);
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_207e(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x207e;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x92,0x00);
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x80,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x3b);
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x80,0x00);
	clk += Opcodes::dec_mem             (aCPU, pc, 0x15,0x82,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x3d);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8b,0x80,0x00);
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2093(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2093;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x6a,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2095(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2095;
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0x04,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x80,0x00);
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_209a(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x209a;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x6a,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_209c(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x209c;
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0x08,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x80,0x00);
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_20a1(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x20a1;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x6a,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_20a3(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x20a3;
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0x0c,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x80,0x00);
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_20a8(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x20a8;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x6a,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_20aa(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x20aa;
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0x10,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x80,0x00);
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_20af(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x20af;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x6a,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_20b1(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x20b1;
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0x14,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x80,0x00);
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_20b6(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x20b6;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x6a,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_20b8(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x20b8;
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0x18,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x80,0x00);
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_20bd(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x20bd;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x6a,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_20bf(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x20bf;
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0x1c,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x80,0x00);
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_20c4(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x20c4;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_20cc(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x20cc;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_20d4(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x20d4;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_20dc(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x20dc;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_20e4(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x20e4;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_20ec(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x20ec;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_20f4(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x20f4;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_20fc(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x20fc;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_20fe(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x20fe;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2100(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2100;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2102(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2102;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2105(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2105;
	clk += Opcodes::jb_bitaddr_offset   (aCPU, pc, 0x20,0xf0,0x26);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2108(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2108;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xc4,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_210a(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x210a;
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0xf0,0xe9);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xef,0x21);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xd9,0x03,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2114(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2114;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x01,0x60);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2117(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2117;
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x80,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x3b);
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x80,0x00);
	clk += Opcodes::dec_mem             (aCPU, pc, 0x15,0x82,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x3d);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8b,0x80,0x00);
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0xe9,0xf0);
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xdd,0xd8,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_212d(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x212d;
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_212e(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x212e;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x14,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2130(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2130;
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0xa0,0x14);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2133(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2133;
	clk += Opcodes::orl_mem_imm         (aCPU, pc, 0x43,0x80,0x02);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xa6,0x06);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2139(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2139;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x7e,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_213b(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x213b;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xc4,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_213d(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x213d;
	clk += Opcodes::ajmp_offset         (aCPU, pc, 0x41,0x31,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_213f(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x213f;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x7e,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2141(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2141;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xfc,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2143(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2143;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x2b,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2145(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2145;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x08,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2147(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2147;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_214f(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x214f;
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0xa0,0x14);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2152(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2152;
	clk += Opcodes::orl_mem_imm         (aCPU, pc, 0x43,0x80,0x02);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xa6,0x06);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2158(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2158;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x93,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_215a(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x215a;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xcc,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_215c(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x215c;
	clk += Opcodes::ajmp_offset         (aCPU, pc, 0x41,0x31,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_215e(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x215e;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x93,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2160(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2160;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xfc,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2162(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2162;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x34,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2164(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2164;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x08,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2166(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2166;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_216e(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x216e;
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0xa0,0x14);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2171(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2171;
	clk += Opcodes::orl_mem_imm         (aCPU, pc, 0x43,0x80,0x02);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xa6,0x06);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2177(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2177;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x9a,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2179(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2179;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xd4,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_217b(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x217b;
	clk += Opcodes::ajmp_offset         (aCPU, pc, 0x41,0x31,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_217d(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x217d;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x9a,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_217f(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x217f;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xfc,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2181(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2181;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x3d,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2183(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2183;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x08,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2185(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2185;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_218d(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x218d;
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0xa0,0x14);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2190(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2190;
	clk += Opcodes::orl_mem_imm         (aCPU, pc, 0x43,0x80,0x02);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xa6,0x06);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2196(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2196;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xa1,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2198(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2198;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xdc,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_219a(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x219a;
	clk += Opcodes::ajmp_offset         (aCPU, pc, 0x41,0x31,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_219c(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x219c;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xa1,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_219e(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x219e;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xfc,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_21a0(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x21a0;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x46,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_21a2(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x21a2;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x08,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_21a4(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x21a4;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_21ac(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x21ac;
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0xa0,0x14);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_21af(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x21af;
	clk += Opcodes::orl_mem_imm         (aCPU, pc, 0x43,0x80,0x02);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xa6,0x06);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_21b5(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x21b5;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xa8,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_21b7(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x21b7;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xe4,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_21b9(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x21b9;
	clk += Opcodes::ajmp_offset         (aCPU, pc, 0x41,0x31,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_21bb(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x21bb;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xa8,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_21bd(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x21bd;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xfc,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_21bf(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x21bf;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x4f,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_21c1(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x21c1;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x08,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_21c3(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x21c3;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_21cb(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x21cb;
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0xa0,0x14);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_21ce(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x21ce;
	clk += Opcodes::orl_mem_imm         (aCPU, pc, 0x43,0x80,0x02);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xa6,0x06);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_21d4(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x21d4;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xaf,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_21d6(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x21d6;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xec,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_21d8(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x21d8;
	clk += Opcodes::ajmp_offset         (aCPU, pc, 0x41,0x31,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_21da(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x21da;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xaf,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_21dc(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x21dc;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xfc,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_21de(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x21de;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x58,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_21e0(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x21e0;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x08,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_21e2(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x21e2;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_21ea(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x21ea;
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0xa0,0x14);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_21ed(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x21ed;
	clk += Opcodes::orl_mem_imm         (aCPU, pc, 0x43,0x80,0x02);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xa6,0x06);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_21f3(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x21f3;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xb6,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_21f5(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x21f5;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xf4,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_21f7(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x21f7;
	clk += Opcodes::ajmp_offset         (aCPU, pc, 0x41,0x31,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_21f9(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x21f9;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xb6,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_21fb(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x21fb;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xfc,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_21fd(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x21fd;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x61,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_21ff(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x21ff;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x08,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2201(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2201;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2209(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2209;
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0xa0,0x14);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_220c(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x220c;
	clk += Opcodes::orl_mem_imm         (aCPU, pc, 0x43,0x80,0x02);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xa6,0x06);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2212(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2212;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xbd,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2214(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2214;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xfc,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2216(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2216;
	clk += Opcodes::ajmp_offset         (aCPU, pc, 0x41,0x31,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2218(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2218;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xbd,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_221a(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x221a;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xfc,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_221c(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x221c;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x14,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_221e(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x221e;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x08,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2220(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2220;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2228(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2228;
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::anl_mem_imm         (aCPU, pc, 0x53,0x85,0x03);
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x7e,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_222f(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x222f;
	clk += Opcodes::ajmp_offset         (aCPU, pc, 0x21,0x0a,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2231(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2231;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x92,0x01);
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0xf2,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2236(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2236;
	clk += Opcodes::jb_bitaddr_offset   (aCPU, pc, 0x20,0xf0,0x34);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2239(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2239;
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0xf0,0xe9);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xef,0x21);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0xe9,0xf0);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xf0,0x03);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_224d(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x224d;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x22,0x71);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2250(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2250;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xcc,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2252(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2252;
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xd9,0x03,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2256(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2256;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x01,0x60);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2259(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2259;
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x80,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x3b);
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x80,0x00);
	clk += Opcodes::dec_mem             (aCPU, pc, 0x15,0x82,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x3d);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8b,0x80,0x00);
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xdd,0xcd,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_226c(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x226c;
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_226d(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x226d;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x61,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_226f(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x226f;
	clk += Opcodes::ajmp_offset         (aCPU, pc, 0x61,0x2c,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2271(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2271;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x14,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2273(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2273;
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0xa0,0x14);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2276(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2276;
	clk += Opcodes::orl_mem_imm         (aCPU, pc, 0x43,0x80,0x02);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xa6,0x06);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_227c(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x227c;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x93,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_227e(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x227e;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xcc,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2280(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2280;
	clk += Opcodes::ajmp_offset         (aCPU, pc, 0x61,0x57,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2282(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2282;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x93,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2284(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2284;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xfc,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2286(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2286;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x2b,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2288(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2288;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x08,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_228a(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x228a;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2292(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2292;
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0xa0,0x08);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2295(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2295;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x9a,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2297(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2297;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xfc,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2299(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2299;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x34,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_229b(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x229b;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x08,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_229d(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x229d;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_22a5(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x22a5;
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0xa0,0x14);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_22a8(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x22a8;
	clk += Opcodes::orl_mem_imm         (aCPU, pc, 0x43,0x80,0x02);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xa6,0x06);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_22ae(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x22ae;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xa1,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_22b0(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x22b0;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xdc,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_22b2(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x22b2;
	clk += Opcodes::ajmp_offset         (aCPU, pc, 0x61,0x57,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_22b4(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x22b4;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xa1,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_22b6(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x22b6;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xfc,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_22b8(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x22b8;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x3d,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_22ba(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x22ba;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x08,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_22bc(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x22bc;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_22c4(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x22c4;
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0xa0,0x08);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_22c7(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x22c7;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xa8,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_22c9(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x22c9;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xfc,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_22cb(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x22cb;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x46,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_22cd(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x22cd;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x08,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_22cf(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x22cf;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_22d7(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x22d7;
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0xa0,0x14);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_22da(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x22da;
	clk += Opcodes::orl_mem_imm         (aCPU, pc, 0x43,0x80,0x02);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xa6,0x06);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_22e0(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x22e0;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xaf,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_22e2(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x22e2;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xec,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_22e4(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x22e4;
	clk += Opcodes::ajmp_offset         (aCPU, pc, 0x61,0x57,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_22e6(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x22e6;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xaf,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_22e8(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x22e8;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xfc,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_22ea(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x22ea;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x4f,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_22ec(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x22ec;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x08,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_22ee(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x22ee;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_22f6(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x22f6;
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0xa0,0x08);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_22f9(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x22f9;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xb6,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_22fb(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x22fb;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xfc,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_22fd(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x22fd;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x58,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_22ff(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x22ff;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x08,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2301(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2301;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2309(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2309;
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0xa0,0x08);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_230c(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x230c;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xbd,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_230e(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x230e;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xfc,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2310(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2310;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x61,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2312(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2312;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x08,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2314(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2314;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_231c(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x231c;
	clk += Opcodes::dec_mem             (aCPU, pc, 0x15,0x92,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x92,0x00);
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xd9,0x05,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2324(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2324;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x01,0x60);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2327(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2327;
	clk += Opcodes::mov_a_imm           (aCPU, pc, 0x74,0x4f,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2329(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2329;
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xdd,0x01,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_232b(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x232b;
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_232c(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x232c;
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0xa0,0x08);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_232f(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x232f;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x7e,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2331(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2331;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xfc,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2333(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2333;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x14,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2335(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2335;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x08,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2337(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2337;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_233f(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x233f;
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0xf0,0xe9);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xef,0x21);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::anl_mem_imm         (aCPU, pc, 0x53,0x85,0x03);
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0xe9,0xf0);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xf0,0x03);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2350(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2350;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x22,0x71);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2353(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2353;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x93,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2355(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2355;
	clk += Opcodes::ajmp_offset         (aCPU, pc, 0x41,0x50,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2357(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2357;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x61,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2359(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2359;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0xc1,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_235b(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x235b;
	clk += Opcodes::jb_bitaddr_offset   (aCPU, pc, 0x20,0xf0,0x2e);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_235e(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x235e;
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0xf0,0xe9);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xef,0x21);
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xf4,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2366(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2366;
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0xe9,0xf0);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xf0,0x03);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_236c(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x236c;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x23,0x90);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_236f(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x236f;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xd4,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2371(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2371;
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xd9,0x03,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2375(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2375;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x01,0x60);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2378(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2378;
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x80,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x3b);
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x80,0x00);
	clk += Opcodes::dec_mem             (aCPU, pc, 0x15,0x82,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x3d);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8b,0x80,0x00);
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xdd,0xd3,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_238b(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x238b;
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_238c(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x238c;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x58,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_238e(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x238e;
	clk += Opcodes::ajmp_offset         (aCPU, pc, 0x81,0x38,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2390(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2390;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x14,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2392(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2392;
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0xa0,0x14);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2395(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2395;
	clk += Opcodes::orl_mem_imm         (aCPU, pc, 0x43,0x80,0x02);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xa6,0x06);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_239b(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x239b;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x9a,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_239d(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x239d;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xd4,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_239f(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x239f;
	clk += Opcodes::ajmp_offset         (aCPU, pc, 0x81,0x82,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_23a1(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x23a1;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x9a,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_23a3(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x23a3;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xfc,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_23a5(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x23a5;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x2b,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_23a7(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x23a7;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x08,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_23a9(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x23a9;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_23b1(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x23b1;
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0xa0,0x08);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_23b4(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x23b4;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xa1,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_23b6(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x23b6;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xfc,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_23b8(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x23b8;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x34,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_23ba(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x23ba;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x08,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_23bc(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x23bc;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_23c4(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x23c4;
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0xa0,0x14);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_23c7(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x23c7;
	clk += Opcodes::orl_mem_imm         (aCPU, pc, 0x43,0x80,0x02);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xa6,0x06);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_23cd(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x23cd;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xa8,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_23cf(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x23cf;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xe4,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_23d1(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x23d1;
	clk += Opcodes::ajmp_offset         (aCPU, pc, 0x81,0x82,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_23d3(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x23d3;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xa8,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_23d5(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x23d5;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xfc,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_23d7(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x23d7;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x3d,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_23d9(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x23d9;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x08,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_23db(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x23db;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_23e3(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x23e3;
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0xa0,0x08);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_23e6(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x23e6;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xaf,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_23e8(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x23e8;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xfc,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_23ea(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x23ea;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x46,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_23ec(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x23ec;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x08,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_23ee(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x23ee;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_23f6(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x23f6;
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0xa0,0x14);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_23f9(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x23f9;
	clk += Opcodes::orl_mem_imm         (aCPU, pc, 0x43,0x80,0x02);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xa6,0x06);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_23ff(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x23ff;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xb6,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2401(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2401;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xf4,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2403(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2403;
	clk += Opcodes::ajmp_offset         (aCPU, pc, 0x81,0x82,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2405(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2405;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xb6,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2407(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2407;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xfc,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2409(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2409;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x4f,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_240b(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x240b;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x08,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_240d(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x240d;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2415(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2415;
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0xa0,0x08);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2418(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2418;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xbd,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_241a(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x241a;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xfc,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_241c(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x241c;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x58,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_241e(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x241e;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x08,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2420(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2420;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2428(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2428;
	clk += Opcodes::dec_mem             (aCPU, pc, 0x15,0x92,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x92,0x00);
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xd9,0x05,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2430(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2430;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x01,0x60);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2433(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2433;
	clk += Opcodes::mov_a_imm           (aCPU, pc, 0x74,0x4f,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2435(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2435;
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xdd,0x01,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2437(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2437;
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2438(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2438;
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0xa0,0x14);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_243b(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x243b;
	clk += Opcodes::orl_mem_imm         (aCPU, pc, 0x43,0x80,0x02);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xa6,0x06);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2441(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2441;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x7e,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2443(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2443;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xf4,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2445(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2445;
	clk += Opcodes::ajmp_offset         (aCPU, pc, 0x81,0x86,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2447(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2447;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x7e,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2449(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2449;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xfc,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_244b(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x244b;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x61,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_244d(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x244d;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x08,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_244f(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x244f;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2457(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2457;
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0xa0,0x08);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_245a(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x245a;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x93,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_245c(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x245c;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xfc,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_245e(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x245e;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x14,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2460(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2460;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x08,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2462(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2462;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_246a(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x246a;
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0xf0,0xe9);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xef,0x21);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::anl_mem_imm         (aCPU, pc, 0x53,0x85,0x03);
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0xe9,0xf0);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xf0,0x03);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_247b(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x247b;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x23,0x90);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_247e(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x247e;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x9a,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2480(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2480;
	clk += Opcodes::ajmp_offset         (aCPU, pc, 0x61,0x6f,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2482(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2482;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x58,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2484(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2484;
	clk += Opcodes::ajmp_offset         (aCPU, pc, 0x81,0x28,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2486(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2486;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x14,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2488(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2488;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0xe0,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_248a(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x248a;
	clk += Opcodes::jb_bitaddr_offset   (aCPU, pc, 0x20,0xf0,0x2e);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_248d(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x248d;
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0xf0,0xe9);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xef,0x21);
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xec,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2495(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2495;
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0xe9,0xf0);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xf0,0x03);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_249b(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x249b;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x24,0xbf);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_249e(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x249e;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xdc,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_24a0(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x24a0;
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xd9,0x03,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_24a4(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x24a4;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x01,0x60);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_24a7(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x24a7;
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x80,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x3b);
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x80,0x00);
	clk += Opcodes::dec_mem             (aCPU, pc, 0x15,0x82,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x3d);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8b,0x80,0x00);
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xdd,0xd3,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_24ba(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x24ba;
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_24bb(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x24bb;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x4f,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_24bd(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x24bd;
	clk += Opcodes::ajmp_offset         (aCPU, pc, 0xa1,0x48,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_24bf(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x24bf;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x14,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_24c1(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x24c1;
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0xa0,0x14);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_24c4(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x24c4;
	clk += Opcodes::orl_mem_imm         (aCPU, pc, 0x43,0x80,0x02);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xa6,0x06);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_24ca(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x24ca;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xa1,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_24cc(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x24cc;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xdc,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_24ce(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x24ce;
	clk += Opcodes::ajmp_offset         (aCPU, pc, 0xa1,0xa5,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_24d0(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x24d0;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xa1,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_24d2(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x24d2;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xfc,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_24d4(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x24d4;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x2b,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_24d6(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x24d6;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x08,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_24d8(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x24d8;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_24e0(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x24e0;
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0xa0,0x08);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_24e3(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x24e3;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xa8,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_24e5(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x24e5;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xfc,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_24e7(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x24e7;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x34,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_24e9(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x24e9;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x08,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_24eb(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x24eb;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_24f3(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x24f3;
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0xa0,0x14);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_24f6(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x24f6;
	clk += Opcodes::orl_mem_imm         (aCPU, pc, 0x43,0x80,0x02);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xa6,0x06);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_24fc(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x24fc;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xaf,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_24fe(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x24fe;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xec,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2500(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2500;
	clk += Opcodes::ajmp_offset         (aCPU, pc, 0xa1,0xa5,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2502(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2502;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xaf,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2504(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2504;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xfc,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2506(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2506;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x3d,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2508(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2508;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x08,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_250a(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x250a;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2512(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2512;
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0xa0,0x08);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2515(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2515;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xb6,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2517(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2517;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xfc,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2519(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2519;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x46,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_251b(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x251b;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x08,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_251d(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x251d;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2525(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2525;
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0xa0,0x08);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2528(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2528;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xbd,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_252a(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x252a;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xfc,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_252c(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x252c;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x4f,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_252e(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x252e;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x08,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2530(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2530;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2538(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2538;
	clk += Opcodes::dec_mem             (aCPU, pc, 0x15,0x92,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x92,0x00);
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xd9,0x05,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2540(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2540;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x01,0x60);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2543(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2543;
	clk += Opcodes::mov_a_imm           (aCPU, pc, 0x74,0x4f,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2545(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2545;
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xdd,0x01,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2547(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2547;
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2548(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2548;
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0xa0,0x14);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_254b(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x254b;
	clk += Opcodes::orl_mem_imm         (aCPU, pc, 0x43,0x80,0x02);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xa6,0x06);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2551(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2551;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x7e,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2553(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2553;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xec,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2555(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2555;
	clk += Opcodes::ajmp_offset         (aCPU, pc, 0xa1,0xa9,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2557(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2557;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x7e,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2559(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2559;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xfc,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_255b(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x255b;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x58,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_255d(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x255d;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x08,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_255f(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x255f;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2567(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2567;
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0xa0,0x08);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_256a(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x256a;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x93,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_256c(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x256c;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xfc,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_256e(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x256e;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x61,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2570(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2570;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x08,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2572(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2572;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_257a(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x257a;
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0xa0,0x08);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_257d(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x257d;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x9a,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_257f(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x257f;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xfc,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2581(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2581;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x14,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2583(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2583;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x08,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2585(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2585;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_258d(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x258d;
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0xf0,0xe9);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xef,0x21);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::anl_mem_imm         (aCPU, pc, 0x53,0x85,0x03);
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0xe9,0xf0);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xf0,0x03);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_259e(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x259e;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x24,0xbf);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_25a1(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x25a1;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xa1,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_25a3(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x25a3;
	clk += Opcodes::ajmp_offset         (aCPU, pc, 0x81,0x9e,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_25a5(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x25a5;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x4f,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_25a7(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x25a7;
	clk += Opcodes::ajmp_offset         (aCPU, pc, 0xa1,0x38,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_25a9(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x25a9;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x14,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_25ab(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x25ab;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0xe0,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_25ad(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x25ad;
	clk += Opcodes::jb_bitaddr_offset   (aCPU, pc, 0x20,0xf0,0x2e);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_25b0(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x25b0;
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0xf0,0xe9);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xef,0x21);
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xe4,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_25b8(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x25b8;
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0xe9,0xf0);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xf0,0x03);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_25be(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x25be;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x25,0xe2);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_25c1(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x25c1;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xe4,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_25c3(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x25c3;
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xd9,0x03,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_25c7(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x25c7;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x01,0x60);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_25ca(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x25ca;
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x80,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x3b);
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x80,0x00);
	clk += Opcodes::dec_mem             (aCPU, pc, 0x15,0x82,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x3d);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8b,0x80,0x00);
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xdd,0xd3,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_25dd(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x25dd;
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_25de(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x25de;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x46,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_25e0(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x25e0;
	clk += Opcodes::ajmp_offset         (aCPU, pc, 0xc1,0x58,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_25e2(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x25e2;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x14,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_25e4(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x25e4;
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0xa0,0x14);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_25e7(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x25e7;
	clk += Opcodes::orl_mem_imm         (aCPU, pc, 0x43,0x80,0x02);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xa6,0x06);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_25ed(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x25ed;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xa8,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_25ef(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x25ef;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xe4,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_25f1(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x25f1;
	clk += Opcodes::ajmp_offset         (aCPU, pc, 0xc1,0xd4,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_25f3(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x25f3;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xa8,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_25f5(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x25f5;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xfc,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_25f7(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x25f7;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x2b,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_25f9(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x25f9;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x08,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_25fb(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x25fb;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2603(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2603;
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0xa0,0x08);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2606(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2606;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xaf,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2608(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2608;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xfc,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_260a(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x260a;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x34,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_260c(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x260c;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x08,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_260e(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x260e;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2616(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2616;
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0xa0,0x14);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2619(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2619;
	clk += Opcodes::orl_mem_imm         (aCPU, pc, 0x43,0x80,0x02);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xa6,0x06);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_261f(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x261f;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xb6,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2621(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2621;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xf4,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2623(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2623;
	clk += Opcodes::ajmp_offset         (aCPU, pc, 0xc1,0xd4,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2625(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2625;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xb6,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2627(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2627;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xfc,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2629(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2629;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x3d,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_262b(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x262b;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x08,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_262d(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x262d;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2635(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2635;
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0xa0,0x08);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2638(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2638;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xbd,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_263a(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x263a;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xfc,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_263c(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x263c;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x46,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_263e(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x263e;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x08,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2640(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2640;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2648(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2648;
	clk += Opcodes::dec_mem             (aCPU, pc, 0x15,0x92,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x92,0x00);
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xd9,0x05,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2650(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2650;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x01,0x60);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2653(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2653;
	clk += Opcodes::mov_a_imm           (aCPU, pc, 0x74,0x4f,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2655(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2655;
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xdd,0x01,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2657(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2657;
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2658(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2658;
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0xa0,0x14);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_265b(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x265b;
	clk += Opcodes::orl_mem_imm         (aCPU, pc, 0x43,0x80,0x02);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xa6,0x06);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2661(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2661;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x7e,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2663(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2663;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xe4,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2665(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2665;
	clk += Opcodes::ajmp_offset         (aCPU, pc, 0xc1,0xd8,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2667(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2667;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x7e,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2669(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2669;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xfc,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_266b(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x266b;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x4f,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_266d(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x266d;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x08,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_266f(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x266f;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2677(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2677;
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0xa0,0x08);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_267a(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x267a;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x93,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_267c(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x267c;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xfc,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_267e(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x267e;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x58,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2680(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2680;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x08,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2682(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2682;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_268a(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x268a;
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0xa0,0x14);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_268d(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x268d;
	clk += Opcodes::orl_mem_imm         (aCPU, pc, 0x43,0x80,0x02);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xa6,0x06);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2693(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2693;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x9a,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2695(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2695;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xf4,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2697(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2697;
	clk += Opcodes::ajmp_offset         (aCPU, pc, 0xc1,0xd8,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2699(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2699;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x9a,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_269b(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x269b;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xfc,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_269d(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x269d;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x61,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_269f(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x269f;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x08,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_26a1(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x26a1;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_26a9(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x26a9;
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0xa0,0x08);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_26ac(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x26ac;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xa1,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_26ae(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x26ae;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xfc,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_26b0(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x26b0;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x14,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_26b2(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x26b2;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x08,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_26b4(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x26b4;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_26bc(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x26bc;
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0xf0,0xe9);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xef,0x21);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::anl_mem_imm         (aCPU, pc, 0x53,0x85,0x03);
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0xe9,0xf0);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xf0,0x03);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_26cd(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x26cd;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x25,0xe2);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_26d0(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x26d0;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xa8,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_26d2(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x26d2;
	clk += Opcodes::ajmp_offset         (aCPU, pc, 0xa1,0xc1,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_26d4(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x26d4;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x46,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_26d6(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x26d6;
	clk += Opcodes::ajmp_offset         (aCPU, pc, 0xc1,0x48,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_26d8(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x26d8;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x14,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_26da(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x26da;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0xe0,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_26dc(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x26dc;
	clk += Opcodes::jb_bitaddr_offset   (aCPU, pc, 0x20,0xf0,0x2e);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_26df(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x26df;
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0xf0,0xe9);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xef,0x21);
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xdc,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_26e7(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x26e7;
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0xe9,0xf0);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xf0,0x03);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_26ed(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x26ed;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x27,0x11);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_26f0(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x26f0;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xec,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_26f2(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x26f2;
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xd9,0x03,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_26f6(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x26f6;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x01,0x60);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_26f9(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x26f9;
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x80,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x3b);
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x80,0x00);
	clk += Opcodes::dec_mem             (aCPU, pc, 0x15,0x82,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x3d);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8b,0x80,0x00);
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xdd,0xd3,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_270c(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x270c;
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_270d(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x270d;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x3d,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_270f(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x270f;
	clk += Opcodes::ajmp_offset         (aCPU, pc, 0xe1,0x68,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2711(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2711;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x14,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2713(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2713;
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0xa0,0x14);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2716(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2716;
	clk += Opcodes::orl_mem_imm         (aCPU, pc, 0x43,0x80,0x02);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xa6,0x06);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_271c(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x271c;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xaf,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_271e(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x271e;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xec,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2720(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2720;
	clk += Opcodes::ajmp_offset         (aCPU, pc, 0xe1,0xf7,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2722(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2722;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xaf,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2724(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2724;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xfc,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2726(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2726;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x2b,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2728(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2728;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x08,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_272a(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x272a;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2732(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2732;
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0xa0,0x08);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2735(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2735;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xb6,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2737(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2737;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xfc,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2739(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2739;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x34,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_273b(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x273b;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x08,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_273d(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x273d;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2745(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2745;
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0xa0,0x08);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2748(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2748;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xbd,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_274a(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x274a;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xfc,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_274c(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x274c;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x3d,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_274e(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x274e;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x08,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2750(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2750;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2758(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2758;
	clk += Opcodes::dec_mem             (aCPU, pc, 0x15,0x92,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x92,0x00);
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xd9,0x05,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2760(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2760;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x01,0x60);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2763(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2763;
	clk += Opcodes::mov_a_imm           (aCPU, pc, 0x74,0x4f,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2765(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2765;
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xdd,0x01,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2767(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2767;
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2768(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2768;
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0xa0,0x14);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_276b(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x276b;
	clk += Opcodes::orl_mem_imm         (aCPU, pc, 0x43,0x80,0x02);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xa6,0x06);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2771(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2771;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x7e,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2773(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2773;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xdc,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2775(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2775;
	clk += Opcodes::ajmp_offset         (aCPU, pc, 0xe1,0xfb,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2777(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2777;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x7e,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2779(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2779;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xfc,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_277b(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x277b;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x46,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_277d(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x277d;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x08,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_277f(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x277f;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2787(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2787;
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0xa0,0x08);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_278a(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x278a;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x93,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_278c(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x278c;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xfc,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_278e(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x278e;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x4f,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2790(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2790;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x08,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2792(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2792;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_279a(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x279a;
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0xa0,0x14);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_279d(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x279d;
	clk += Opcodes::orl_mem_imm         (aCPU, pc, 0x43,0x80,0x02);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xa6,0x06);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_27a3(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x27a3;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x9a,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_27a5(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x27a5;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xec,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_27a7(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x27a7;
	clk += Opcodes::ajmp_offset         (aCPU, pc, 0xe1,0xfb,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_27a9(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x27a9;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x9a,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_27ab(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x27ab;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xfc,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_27ad(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x27ad;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x58,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_27af(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x27af;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x08,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_27b1(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x27b1;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_27b9(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x27b9;
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0xa0,0x08);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_27bc(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x27bc;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xa1,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_27be(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x27be;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xfc,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_27c0(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x27c0;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x61,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_27c2(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x27c2;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x08,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_27c4(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x27c4;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_27cc(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x27cc;
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0xa0,0x08);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_27cf(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x27cf;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xa8,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_27d1(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x27d1;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xfc,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_27d3(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x27d3;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x14,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_27d5(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x27d5;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x08,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_27d7(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x27d7;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_27df(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x27df;
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0xf0,0xe9);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xef,0x21);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::anl_mem_imm         (aCPU, pc, 0x53,0x85,0x03);
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0xe9,0xf0);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xf0,0x03);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_27f0(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x27f0;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x27,0x11);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_27f3(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x27f3;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0xaf,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_27f5(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x27f5;
	clk += Opcodes::ajmp_offset         (aCPU, pc, 0xc1,0xf0,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_27f7(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x27f7;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x3d,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_27f9(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x27f9;
	clk += Opcodes::ajmp_offset         (aCPU, pc, 0xe1,0x58,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_27fb(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x27fb;
	clk += Opcodes::acall_offset        (aCPU, pc, 0x11,0x14,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_27fd(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x27fd;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0xe0,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_27ff(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x27ff;
	clk += Opcodes::jb_bitaddr_offset   (aCPU, pc, 0x20,0xf0,0x30);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2802(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2802;
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0xf0,0xe9);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xef,0x21);
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x20,0xd4);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_280b(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x280b;
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0xe9,0xf0);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xf0,0x03);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2811(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2811;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x28,0x38);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2814(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2814;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x20,0xf4);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2817(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2817;
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xd9,0x03,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_281b(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x281b;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x01,0x60);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_281e(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x281e;
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x80,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x3b);
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x80,0x00);
	clk += Opcodes::dec_mem             (aCPU, pc, 0x15,0x82,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x3d);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8b,0x80,0x00);
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xdd,0xd1,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2831(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2831;
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2832(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2832;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x20,0x34);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2835(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2835;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x28,0x86);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2838(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2838;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x20,0x14);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_283b(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x283b;
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0xa0,0x1a);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_283e(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x283e;
	clk += Opcodes::orl_mem_imm         (aCPU, pc, 0x43,0x80,0x02);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xa6,0x09);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2844(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2844;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x20,0xb6);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2847(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2847;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x20,0xf4);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_284a(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x284a;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x29,0x51);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_284d(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x284d;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x20,0xb6);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2850(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2850;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x20,0xfc);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2853(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2853;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x20,0x2b);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2856(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2856;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x08,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2858(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2858;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2860(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2860;
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0xa0,0x0b);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2863(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2863;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x20,0xbd);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2866(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2866;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x20,0xfc);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2869(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2869;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x20,0x34);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_286c(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x286c;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x08,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_286e(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x286e;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2876(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2876;
	clk += Opcodes::dec_mem             (aCPU, pc, 0x15,0x92,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x92,0x00);
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xd9,0x05,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_287e(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x287e;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x01,0x60);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2881(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2881;
	clk += Opcodes::mov_a_imm           (aCPU, pc, 0x74,0x4f,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2883(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2883;
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xdd,0x01,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2885(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2885;
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2886(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2886;
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0xa0,0x1a);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2889(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2889;
	clk += Opcodes::orl_mem_imm         (aCPU, pc, 0x43,0x80,0x02);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xa6,0x09);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_288f(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x288f;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x20,0x7e);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2892(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2892;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x20,0xd4);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2895(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2895;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x29,0x57);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2898(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2898;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x20,0x7e);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_289b(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x289b;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x20,0xfc);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_289e(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x289e;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x20,0x3d);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_28a1(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x28a1;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x08,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_28a3(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x28a3;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_28ab(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x28ab;
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0xa0,0x0b);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_28ae(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x28ae;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x20,0x93);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_28b1(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x28b1;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x20,0xfc);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_28b4(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x28b4;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x20,0x46);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_28b7(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x28b7;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x08,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_28b9(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x28b9;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_28c1(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x28c1;
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0xa0,0x1a);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_28c4(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x28c4;
	clk += Opcodes::orl_mem_imm         (aCPU, pc, 0x43,0x80,0x02);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xa6,0x09);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_28ca(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x28ca;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x20,0x9a);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_28cd(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x28cd;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x20,0xe4);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_28d0(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x28d0;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x29,0x57);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_28d3(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x28d3;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x20,0x9a);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_28d6(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x28d6;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x20,0xfc);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_28d9(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x28d9;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x20,0x4f);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_28dc(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x28dc;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x08,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_28de(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x28de;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_28e6(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x28e6;
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0xa0,0x0b);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_28e9(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x28e9;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x20,0xa1);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_28ec(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x28ec;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x20,0xfc);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_28ef(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x28ef;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x20,0x58);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_28f2(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x28f2;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x08,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_28f4(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x28f4;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_28fc(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x28fc;
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0xa0,0x1a);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_28ff(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x28ff;
	clk += Opcodes::orl_mem_imm         (aCPU, pc, 0x43,0x80,0x02);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xa6,0x09);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2905(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2905;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x20,0xa8);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2908(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2908;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x20,0xf4);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_290b(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x290b;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x29,0x57);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_290e(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x290e;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x20,0xa8);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2911(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2911;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x20,0xfc);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2914(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2914;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x20,0x61);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2917(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2917;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x08,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2919(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2919;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2921(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2921;
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0xa0,0x0b);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2924(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2924;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x20,0xaf);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2927(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2927;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x20,0xfc);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_292a(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x292a;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x20,0x14);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_292d(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x292d;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x08,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_292f(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x292f;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2937(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2937;
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0xf0,0xe9);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xef,0x21);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::anl_mem_imm         (aCPU, pc, 0x53,0x85,0x03);
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0xe9,0xf0);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xf0,0x03);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2948(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2948;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x28,0x38);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_294b(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x294b;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x20,0xb6);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_294e(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x294e;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x28,0x14);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2951(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2951;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x20,0x34);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2954(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2954;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x28,0x76);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2957(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2957;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x20,0x14);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_295a(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x295a;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0xdb,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_295c(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x295c;
	clk += Opcodes::jb_bitaddr_offset   (aCPU, pc, 0x20,0xf0,0x35);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_295f(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x295f;
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0xf0,0xe9);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xef,0x21);
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x20,0xcc);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2968(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2968;
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0xe9,0xf0);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xf0,0x03);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_296e(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x296e;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x29,0x9a);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2971(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2971;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xd9,0x03,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_297d(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x297d;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x01,0x60);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2980(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2980;
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x80,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x3b);
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x80,0x00);
	clk += Opcodes::dec_mem             (aCPU, pc, 0x15,0x82,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xb0,0x3d);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8b,0x80,0x00);
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xdd,0xcc,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2993(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2993;
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2994(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2994;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x20,0x2b);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2997(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2997;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x29,0xc3);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_299a(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x299a;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x20,0x14);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_299d(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x299d;
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0xa0,0x0b);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_29a0(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x29a0;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x20,0xbd);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_29a3(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x29a3;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x20,0xfc);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_29a6(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x29a6;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x20,0x2b);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_29a9(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x29a9;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x08,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_29ab(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x29ab;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_29b3(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x29b3;
	clk += Opcodes::dec_mem             (aCPU, pc, 0x15,0x92,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x92,0x00);
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xd9,0x05,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_29bb(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x29bb;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x01,0x60);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_29be(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x29be;
	clk += Opcodes::mov_a_imm           (aCPU, pc, 0x74,0x4f,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_29c0(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x29c0;
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xdd,0x01,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_29c2(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x29c2;
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_29c3(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x29c3;
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0xa0,0x1a);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_29c6(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x29c6;
	clk += Opcodes::orl_mem_imm         (aCPU, pc, 0x43,0x80,0x02);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xa6,0x09);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_29cc(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x29cc;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x20,0x7e);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_29cf(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x29cf;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x20,0xcc);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_29d2(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x29d2;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x2a,0xa4);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_29d5(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x29d5;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x20,0x7e);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_29d8(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x29d8;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x20,0xfc);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_29db(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x29db;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x20,0x34);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_29de(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x29de;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x08,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_29e0(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x29e0;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_29e8(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x29e8;
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0xa0,0x0b);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_29eb(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x29eb;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x20,0x93);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_29ee(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x29ee;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x20,0xfc);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_29f1(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x29f1;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x20,0x3d);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_29f4(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x29f4;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x08,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_29f6(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x29f6;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_29fe(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x29fe;
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0xa0,0x1a);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2a01(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2a01;
	clk += Opcodes::orl_mem_imm         (aCPU, pc, 0x43,0x80,0x02);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xa6,0x09);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2a07(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2a07;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x20,0x9a);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2a0a(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2a0a;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x20,0xdc);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2a0d(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2a0d;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x2a,0xa4);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2a10(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2a10;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x20,0x9a);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2a13(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2a13;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x20,0xfc);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2a16(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2a16;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x20,0x46);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2a19(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2a19;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x08,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2a1b(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2a1b;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2a23(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2a23;
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0xa0,0x0b);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2a26(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2a26;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x20,0xa1);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2a29(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2a29;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x20,0xfc);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2a2c(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2a2c;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x20,0x4f);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2a2f(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2a2f;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x08,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2a31(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2a31;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2a39(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2a39;
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0xa0,0x1a);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2a3c(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2a3c;
	clk += Opcodes::orl_mem_imm         (aCPU, pc, 0x43,0x80,0x02);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xa6,0x09);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2a42(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2a42;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x20,0xa8);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2a45(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2a45;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x20,0xec);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2a48(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2a48;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x2a,0xa4);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2a4b(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2a4b;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x20,0xa8);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2a4e(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2a4e;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x20,0xfc);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2a51(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2a51;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x20,0x58);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2a54(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2a54;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x08,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2a56(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2a56;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2a5e(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2a5e;
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0xa0,0x0b);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2a61(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2a61;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x20,0xaf);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2a64(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2a64;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x20,0xfc);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2a67(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2a67;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x20,0x61);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2a6a(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2a6a;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x08,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2a6c(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2a6c;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2a74(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2a74;
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0xa0,0x0b);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2a77(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2a77;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x20,0xb6);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2a7a(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2a7a;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x20,0xfc);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2a7d(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2a7d;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x20,0x14);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2a80(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2a80;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x08,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2a82(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2a82;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2a8a(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2a8a;
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0xf0,0xe9);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xef,0x21);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::anl_mem_imm         (aCPU, pc, 0x53,0x85,0x03);
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0xe9,0xf0);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xf0,0x03);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2a9b(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2a9b;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x29,0x9a);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2a9e(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2a9e;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x20,0xbd);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2aa1(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2aa1;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x29,0x71);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2aa4(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2aa4;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x20,0x14);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2aa7(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2aa7;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0xe1,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2aa9(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2aa9;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x20,0x7e);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2aac(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2aac;
	clk += Opcodes::mov_rx_mem          (aCPU, pc, 0xac,0x32,0x00);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0x05,0x15);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2ab1(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2ab1;
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0x04,0x09);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2ab4(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2ab4;
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0x03,0x03);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2ab7(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2ab7;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x29,0x5c);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2aba(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2aba;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x27,0xff);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2abd(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2abd;
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0x03,0x03);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2ac0(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2ac0;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x26,0xdc);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2ac3(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2ac3;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x25,0xad);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2ac6(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2ac6;
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0x04,0x09);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2ac9(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2ac9;
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0x03,0x03);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2acc(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2acc;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x24,0x8a);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2acf(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2acf;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x23,0x5b);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2ad2(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2ad2;
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0x03,0x03);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2ad5(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2ad5;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x22,0x36);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2ad8(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2ad8;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x21,0x05);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2adb(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2adb;
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xf0,0x06);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2ade(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2ade;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x20,0x14);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2ae1(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2ae1;
	clk += Opcodes::cjne_a_mem_offset   (aCPU, pc, 0xb5,0xa0,0x03);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2ae4(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2ae4;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x20,0x7e);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2ae7(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2ae7;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xeb,0x00,0x00);
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0x04,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfb,0x00,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0x1f,0x00);
	clk += Opcodes::jnz_offset          (aCPU, pc, 0x70,0x0e,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2af7(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2af7;
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xeb,0x00,0x00);
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0xe0,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfb,0x00,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x92,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xd9,0x03,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2b02(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2b02;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x01,0x60);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2b05(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2b05;
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xec,0x00,0x00);
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0x04,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfc,0x00,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0x1f,0x00);
	clk += Opcodes::jnz_offset          (aCPU, pc, 0x70,0x18,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2b0d(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2b0d;
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0xf0,0xe9);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xef,0x21);
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xec,0x00,0x00);
	clk += Opcodes::add_a_imm           (aCPU, pc, 0x24,0xe0,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfc,0x00,0x00);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xf0,0x08);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2b1a(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2b1a;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x92,0x01);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::anl_mem_imm         (aCPU, pc, 0x53,0x85,0x03);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2b22(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2b22;
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0xe9,0xf0);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2b25(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2b25;
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xdd,0xb4,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2b27(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2b27;
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2b28(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2b28;
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0x28,0x82);
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0x29,0x83);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x27,0x00);
	clk += Opcodes::add_a_mem           (aCPU, pc, 0x25,0x25,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfb,0x00,0x00);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x32,0x00);
	clk += Opcodes::add_a_mem           (aCPU, pc, 0x25,0x30,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfc,0x00,0x00);
	clk += Opcodes::mov_rx_mem          (aCPU, pc, 0xa9,0x26,0x00);
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0xe9,0xf0);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x23,0x00);
	clk += Opcodes::jb_bitaddr_offset   (aCPU, pc, 0x20,0xe3,0x18);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2b42(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2b42;
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfd,0x00,0x00);
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x2a,0xdb);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2b46(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2b46;
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7d,0x0f,0x00);
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x2a,0xa9);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2b4b(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2b4b;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x92,0x00);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x32,0x00);
	clk += Opcodes::add_a_mem           (aCPU, pc, 0x25,0x31,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfc,0x00,0x00);
	clk += Opcodes::mov_rx_mem          (aCPU, pc, 0xad,0x24,0x00);
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x2a,0xdb);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2b58(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2b58;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x05,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2b5a(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2b5a;
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7d,0x10,0x00);
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x2a,0xa9);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2b5f(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2b5f;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x92,0x00);
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2b63(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2b63;
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::anl_mem_imm         (aCPU, pc, 0x53,0x06,0x01);
	clk += Opcodes::orl_mem_a           (aCPU, pc, 0x42,0x06,0x00);
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::inc_dptr            (aCPU, pc, 0xa3,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xf8,0x00,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0x06,0x00);
	clk += Opcodes::anl_mem_imm         (aCPU, pc, 0x53,0x07,0xf9);
	clk += Opcodes::orl_mem_a           (aCPU, pc, 0x42,0x07,0x00);
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xd9,0x03,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2b76(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2b76;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x01,0x60);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2b79(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2b79;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x92,0x01);
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xe8,0x00,0x00);
	clk += Opcodes::anl_a_imm           (aCPU, pc, 0x54,0xf0,0x00);
	clk += Opcodes::xrl_a_rx            (aCPU, pc, 0x6b,0x00,0x00);
	clk += Opcodes::jz_offset           (aCPU, pc, 0x60,0x09,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2b82(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2b82;
	clk += Opcodes::xrl_a_rx            (aCPU, pc, 0x6b,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfb,0x00,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xd0,0x10);
	clk += Opcodes::mov_dptr_imm        (aCPU, pc, 0x90,0x2f,0x00);
	clk += Opcodes::jmp_indir_a_dptr    (aCPU, pc, 0x73,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2b8b(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2b8b;
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2b8c(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2b8c;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x2b,0x63);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2b8f(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2b8f;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xd0,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8e,0x84,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8f,0x85,0x00);
	clk += Opcodes::clr_a               (aCPU, pc, 0xe4,0x00,0x00);
	clk += Opcodes::movc_a_indir_a_dptr (aCPU, pc, 0x93,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x11,0x00);
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xe8,0x00,0x00);
	clk += Opcodes::jnb_bitaddr_offset  (aCPU, pc, 0x30,0xe3,0x67);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2b9e(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2b9e;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x09,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2ba0(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2ba0;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xd0,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x92,0x00);
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xdd,0xe4,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2ba8(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2ba8;
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2ba9(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2ba9;
	clk += Opcodes::mov_a_imm           (aCPU, pc, 0x74,0x02,0x00);
	clk += Opcodes::movc_a_indir_a_dptr (aCPU, pc, 0x93,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfa,0x00,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7c,0x08,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xd0,0x10);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2bb2(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2bb2;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x02,0x00);
	clk += Opcodes::rrc_a               (aCPU, pc, 0x13,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x02,0x00);
	clk += Opcodes::jc_offset           (aCPU, pc, 0x40,0x25,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2bb9(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2bb9;
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xe9,0x00,0x00);
	clk += Opcodes::rrc_a               (aCPU, pc, 0x13,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xf9,0x00,0x00);
	clk += Opcodes::jc_offset           (aCPU, pc, 0x40,0x0f,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2bbe(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2bbe;
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x88,0xa0,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::djnz_mem_offset     (aCPU, pc, 0xd5,0x04,0xe7);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2bcb(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2bcb;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0xd3,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2bcd(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2bcd;
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8b,0xa0,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8a,0xa0,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::djnz_mem_offset     (aCPU, pc, 0xd5,0x04,0xd6);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2bdc(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2bdc;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0xc2,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2bde(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2bde;
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xe9,0x00,0x00);
	clk += Opcodes::rrc_a               (aCPU, pc, 0x13,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xf9,0x00,0x00);
	clk += Opcodes::jc_offset           (aCPU, pc, 0x40,0x11,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2be3(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2be3;
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8d,0xa0,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8c,0xa0,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::djnz_mem_offset     (aCPU, pc, 0xd5,0x04,0xc0);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2bf2(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2bf2;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0xac,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2bf4(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2bf4;
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8f,0xa0,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8e,0xa0,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::djnz_mem_offset     (aCPU, pc, 0xd5,0x04,0xaf);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2c03(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2c03;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x9b,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2c05(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2c05;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xd0,0x10);
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xe9,0x00,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x88,0xa0,0x00);
	clk += Opcodes::jz_offset           (aCPU, pc, 0x60,0x5b,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2c0d(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2c0d;
	clk += Opcodes::rrc_a               (aCPU, pc, 0x13,0x00,0x00);
	clk += Opcodes::jc_offset           (aCPU, pc, 0x40,0x5b,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2c10(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2c10;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::rrc_a               (aCPU, pc, 0x13,0x00,0x00);
	clk += Opcodes::jc_offset           (aCPU, pc, 0x40,0x5f,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2c1b(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2c1b;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::rrc_a               (aCPU, pc, 0x13,0x00,0x00);
	clk += Opcodes::jc_offset           (aCPU, pc, 0x40,0x63,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2c26(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2c26;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::rrc_a               (aCPU, pc, 0x13,0x00,0x00);
	clk += Opcodes::jc_offset           (aCPU, pc, 0x40,0x67,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2c31(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2c31;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::rrc_a               (aCPU, pc, 0x13,0x00,0x00);
	clk += Opcodes::jc_offset           (aCPU, pc, 0x40,0x6b,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2c3c(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2c3c;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::rrc_a               (aCPU, pc, 0x13,0x00,0x00);
	clk += Opcodes::jc_offset           (aCPU, pc, 0x40,0x6f,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2c47(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2c47;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::rrc_a               (aCPU, pc, 0x13,0x00,0x00);
	clk += Opcodes::jc_offset           (aCPU, pc, 0x40,0x73,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2c52(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2c52;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::rrc_a               (aCPU, pc, 0x13,0x00,0x00);
	clk += Opcodes::jc_offset           (aCPU, pc, 0x40,0x77,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2c5d(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2c5d;
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x2b,0xa0);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2c68(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2c68;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x2d,0x06);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2c6b(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2c6b;
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8b,0xa0,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8a,0xa0,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::rrc_a               (aCPU, pc, 0x13,0x00,0x00);
	clk += Opcodes::jnc_offset          (aCPU, pc, 0x50,0x69,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2c7a(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2c7a;
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8b,0xa0,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8a,0xa0,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::rrc_a               (aCPU, pc, 0x13,0x00,0x00);
	clk += Opcodes::jnc_offset          (aCPU, pc, 0x50,0x5f,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2c89(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2c89;
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8b,0xa0,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8a,0xa0,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::rrc_a               (aCPU, pc, 0x13,0x00,0x00);
	clk += Opcodes::jnc_offset          (aCPU, pc, 0x50,0x55,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2c98(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2c98;
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8b,0xa0,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8a,0xa0,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::rrc_a               (aCPU, pc, 0x13,0x00,0x00);
	clk += Opcodes::jnc_offset          (aCPU, pc, 0x50,0x4b,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2ca7(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2ca7;
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8b,0xa0,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8a,0xa0,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::rrc_a               (aCPU, pc, 0x13,0x00,0x00);
	clk += Opcodes::jnc_offset          (aCPU, pc, 0x50,0x41,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2cb6(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2cb6;
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8b,0xa0,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8a,0xa0,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::rrc_a               (aCPU, pc, 0x13,0x00,0x00);
	clk += Opcodes::jnc_offset          (aCPU, pc, 0x50,0x37,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2cc5(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2cc5;
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8b,0xa0,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8a,0xa0,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::rrc_a               (aCPU, pc, 0x13,0x00,0x00);
	clk += Opcodes::jnc_offset          (aCPU, pc, 0x50,0x2d,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2cd4(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2cd4;
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8b,0xa0,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8a,0xa0,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x2b,0xa0);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2ce3(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2ce3;
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x88,0xa0,0x00);
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x2c,0x1b);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2ce8(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2ce8;
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x88,0xa0,0x00);
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x2c,0x26);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2ced(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2ced;
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x88,0xa0,0x00);
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x2c,0x31);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2cf2(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2cf2;
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x88,0xa0,0x00);
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x2c,0x3c);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2cf7(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2cf7;
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x88,0xa0,0x00);
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x2c,0x47);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2cfc(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2cfc;
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x88,0xa0,0x00);
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x2c,0x52);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2d01(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2d01;
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x88,0xa0,0x00);
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x2c,0x5d);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2d06(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2d06;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x20,0xc4);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2d09(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2d09;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x2b,0xa0);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2d0c(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2d0c;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x2b,0x63);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2d0f(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2d0f;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xd0,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8e,0x84,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8f,0x85,0x00);
	clk += Opcodes::clr_a               (aCPU, pc, 0xe4,0x00,0x00);
	clk += Opcodes::movc_a_indir_a_dptr (aCPU, pc, 0x93,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x11,0x00);
	clk += Opcodes::mov_a_imm           (aCPU, pc, 0x74,0x02,0x00);
	clk += Opcodes::movc_a_indir_a_dptr (aCPU, pc, 0x93,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfa,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2d1e(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2d1e;
	clk += Opcodes::cjne_rx_imm_offset  (aCPU, pc, 0xbd,0x00,0x31);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2d21(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2d21;
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xe8,0x00,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xd0,0x10);
	clk += Opcodes::jb_bitaddr_offset   (aCPU, pc, 0x20,0xe3,0x35);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2d28(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2d28;
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xe9,0x00,0x00);
	clk += Opcodes::rrc_a               (aCPU, pc, 0x13,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xf9,0x00,0x00);
	clk += Opcodes::jc_offset           (aCPU, pc, 0x40,0x0f,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2d2d(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2d2d;
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x88,0xa0,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::djnz_mem_offset     (aCPU, pc, 0xd5,0x04,0xee);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2d3a(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2d3a;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x0f,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2d3c(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2d3c;
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8b,0xa0,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8a,0xa0,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::djnz_mem_offset     (aCPU, pc, 0xd5,0x04,0xdd);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2d4b(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2d4b;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0xd0,0x00);
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x92,0x00);
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2d52(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2d52;
	clk += Opcodes::dec_rx              (aCPU, pc, 0x1d,0x00,0x00);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x11,0x00);
	clk += Opcodes::rr_a                (aCPU, pc, 0x03,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x11,0x00);
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xea,0x00,0x00);
	clk += Opcodes::rr_a                (aCPU, pc, 0x03,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfa,0x00,0x00);
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0xc1,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2d5d(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2d5d;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x02,0x00);
	clk += Opcodes::rrc_a               (aCPU, pc, 0x13,0x00,0x00);
	clk += Opcodes::mov_mem_a           (aCPU, pc, 0xf5,0x02,0x00);
	clk += Opcodes::jc_offset           (aCPU, pc, 0x40,0x25,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2d64(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2d64;
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xe9,0x00,0x00);
	clk += Opcodes::rrc_a               (aCPU, pc, 0x13,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xf9,0x00,0x00);
	clk += Opcodes::jc_offset           (aCPU, pc, 0x40,0x0f,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2d69(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2d69;
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x88,0xa0,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::djnz_mem_offset     (aCPU, pc, 0xd5,0x04,0xe7);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2d76(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2d76;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0xd3,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2d78(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2d78;
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8b,0xa0,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8a,0xa0,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::djnz_mem_offset     (aCPU, pc, 0xd5,0x04,0xd6);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2d87(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2d87;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0xc2,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2d89(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2d89;
	clk += Opcodes::mov_a_rx            (aCPU, pc, 0xe9,0x00,0x00);
	clk += Opcodes::rrc_a               (aCPU, pc, 0x13,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xf9,0x00,0x00);
	clk += Opcodes::jc_offset           (aCPU, pc, 0x40,0x11,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2d8e(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2d8e;
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8d,0xa0,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8c,0xa0,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::djnz_mem_offset     (aCPU, pc, 0xd5,0x04,0xc0);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2d9d(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2d9d;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0xac,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2d9f(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2d9f;
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8f,0xa0,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::mov_mem_rx          (aCPU, pc, 0x8e,0xa0,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::inc_mem             (aCPU, pc, 0x05,0x80,0x00);
	clk += Opcodes::djnz_mem_offset     (aCPU, pc, 0xd5,0x04,0xaf);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2dae(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2dae;
	clk += Opcodes::sjmp_offset         (aCPU, pc, 0x80,0x9b,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2db0(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2db0;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x95,0x00);
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0x28,0x82);
	clk += Opcodes::mov_mem_mem         (aCPU, pc, 0x85,0x29,0x83);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7b,0xff,0x00);
	clk += Opcodes::mov_rx_mem          (aCPU, pc, 0xa9,0x26,0x00);
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x27,0x00);
	clk += Opcodes::swap_a              (aCPU, pc, 0xc4,0x00,0x00);
	clk += Opcodes::rr_a                (aCPU, pc, 0x03,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfe,0x00,0x00);
	clk += Opcodes::anl_mem_imm         (aCPU, pc, 0x53,0x06,0x01);
	clk += Opcodes::clr_c               (aCPU, pc, 0xc3,0x00,0x00);
	clk += Opcodes::rrc_a               (aCPU, pc, 0x13,0x00,0x00);
	clk += Opcodes::clr_c               (aCPU, pc, 0xc3,0x00,0x00);
	clk += Opcodes::rrc_a               (aCPU, pc, 0x13,0x00,0x00);
	clk += Opcodes::rl_a                (aCPU, pc, 0x23,0x00,0x00);
	clk += Opcodes::rl_a                (aCPU, pc, 0x23,0x00,0x00);
	clk += Opcodes::rlc_a               (aCPU, pc, 0x33,0x00,0x00);
	clk += Opcodes::orl_a_imm           (aCPU, pc, 0x44,0x30,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xff,0x00,0x00);
	clk += Opcodes::mov_rx_mem          (aCPU, pc, 0xac,0x23,0x00);
	clk += Opcodes::mov_rx_mem          (aCPU, pc, 0xad,0x24,0x00);
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x2d,0x0c);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2dd6(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2dd6;
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7d,0x0f,0x00);
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x2b,0x8c);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2ddb(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2ddb;
	clk += Opcodes::mov_a_mem           (aCPU, pc, 0xe5,0x24,0x00);
	clk += Opcodes::jz_offset           (aCPU, pc, 0x60,0x07,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2ddf(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2ddf;
	clk += Opcodes::inc_rx              (aCPU, pc, 0x09,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfc,0x00,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7d,0x00,0x00);
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x2d,0x0c);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2de6(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2de6;
	clk += Opcodes::mov_mem_imm         (aCPU, pc, 0x75,0x95,0xff);
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2dea(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2dea;
	clk += Opcodes::mov_dptr_imm        (aCPU, pc, 0x90,0x03,0xfd);
	clk += Opcodes::movx_a_indir_dptr   (aCPU, pc, 0xe0,0x00,0x00);
	clk += Opcodes::mov_rx_a            (aCPU, pc, 0xfa,0x00,0x00);
	clk += Opcodes::push_mem            (aCPU, pc, 0xc0,0x02,0x00);
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x0f,0xeb);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2df4(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2df4;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x02,0x05);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2df7(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2df7;
	clk += Opcodes::pop_mem             (aCPU, pc, 0xd0,0x02,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2df9(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2df9;
	clk += Opcodes::push_mem            (aCPU, pc, 0xc0,0x02,0x00);
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x2d,0xb0);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2dfe(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2dfe;
	clk += Opcodes::lcall_address       (aCPU, pc, 0x12,0x02,0x85);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2e01(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2e01;
	clk += Opcodes::pop_mem             (aCPU, pc, 0xd0,0x02,0x00);
	clk += Opcodes::djnz_rx_offset      (aCPU, pc, 0xda,0xf4,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2e05(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2e05;
	clk += Opcodes::ljmp_address        (aCPU, pc, 0x02,0x10,0x79);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2f00(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2f00;
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x78,0xff,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7a,0x00,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7b,0x00,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7c,0x49,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7d,0x4a,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7e,0xb2,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7f,0x94,0x00);
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2f10(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2f10;
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x78,0xff,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7a,0xbf,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7b,0x25,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7c,0x80,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7d,0xfc,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7e,0xdf,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7f,0xb6,0x00);
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2f20(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2f20;
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x78,0xff,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7a,0x80,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7b,0xfc,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7c,0xbf,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7d,0x25,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7e,0xd5,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7f,0xfe,0x00);
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2f30(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2f30;
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x78,0x50,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7a,0x80,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7b,0xfc,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7c,0xbf,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7d,0x25,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7e,0xff,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7f,0xff,0x00);
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2f40(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2f40;
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x78,0xff,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7a,0x00,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7b,0xb0,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7c,0x08,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7d,0xca,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7e,0xf7,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7f,0xed,0x00);
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2f50(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2f50;
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x78,0xff,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7a,0xef,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7b,0x7b,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7c,0x14,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7d,0xa5,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7e,0x59,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7f,0xce,0x00);
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2f60(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2f60;
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x78,0x00,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7a,0xff,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7b,0xff,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7c,0xb2,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7d,0x94,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7e,0x49,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7f,0x4a,0x00);
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2f70(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2f70;
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x78,0xef,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7a,0xff,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7b,0xff,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7c,0x59,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7d,0xce,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7e,0x14,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7f,0xa5,0x00);
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2f80(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2f80;
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x78,0xff,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7a,0xdf,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7b,0x96,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7c,0x2f,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7d,0xfe,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7e,0x5f,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7f,0xdf,0x00);
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2f90(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2f90;
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x78,0xff,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7a,0x2f,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7b,0xfe,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7c,0xdf,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7d,0x96,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7e,0x5a,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7f,0xff,0x00);
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2fa0(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2fa0;
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x78,0xff,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7a,0xff,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7b,0xff,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7c,0xff,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7d,0xff,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7e,0xff,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7f,0xff,0x00);
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2fb0(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2fb0;
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x78,0xff,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7a,0xff,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7b,0xff,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7c,0xff,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7d,0xff,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7e,0xff,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7f,0xff,0x00);
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2fc0(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2fc0;
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x78,0xff,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7a,0xff,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7b,0xff,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7c,0xff,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7d,0xff,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7e,0xff,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7f,0xff,0x00);
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2fd0(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2fd0;
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x78,0xff,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7a,0xff,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7b,0xff,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7c,0xff,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7d,0xff,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7e,0xff,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7f,0xff,0x00);
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2fe0(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2fe0;
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x78,0xff,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7a,0xff,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7b,0xff,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7c,0xff,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7d,0xff,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7e,0xff,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7f,0xff,0x00);
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}

static int FASTCALL sbt_block_2ff0(em8051 *aCPU)
{
	unsigned clk = 0;
	unsigned pc = 0x2ff0;
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x78,0xff,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7a,0xff,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7b,0xff,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7c,0xff,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7d,0xff,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7e,0xff,0x00);
	clk += Opcodes::mov_rx_imm          (aCPU, pc, 0x7f,0xff,0x00);
	clk += Opcodes::ret                 (aCPU, pc, 0x22,0x00,0x00);
	aCPU->mPC = pc & PC_MASK;
	return clk;
}
const sbt_block_t sbt_rom_code[] = {
	&sbt_block_0000,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0003,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_000b,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0013,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_001b,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0023,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_002b,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0033,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_003b,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0043,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_004b,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0053,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0056,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0059,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_00b4,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_00b7,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_00ba,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_00bd,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_00c0,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_00c3,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_00c6,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_00cd,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_00d2,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_00d5,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_00d8,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_00e1,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_00e4,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_00e7,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_00ea,
	&sbt_exception,
	&sbt_block_00ec,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_00f6,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_00ff,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0114,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0117,
	&sbt_block_0118,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_011b,
	&sbt_block_011c,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_011f,
	&sbt_block_0120,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0123,
	&sbt_block_0124,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0127,
	&sbt_block_0128,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_012b,
	&sbt_block_012c,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_012f,
	&sbt_block_0130,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0133,
	&sbt_block_0134,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0137,
	&sbt_block_0138,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_013b,
	&sbt_block_013c,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_013f,
	&sbt_block_0140,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0143,
	&sbt_block_0144,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0147,
	&sbt_block_0148,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_014b,
	&sbt_block_014c,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_014f,
	&sbt_block_0150,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0153,
	&sbt_block_0154,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_015a,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_015f,
	&sbt_block_0160,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0174,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_018c,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0198,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_01a0,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_01aa,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_01ae,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_01be,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_01ca,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_01d0,
	&sbt_exception,
	&sbt_block_01d2,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_01d6,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_01e9,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_01f5,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_01fa,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0204,
	&sbt_block_0205,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0285,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_028d,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_02a3,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_02af,
	&sbt_block_02b0,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_02ba,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_02bd,
	&sbt_exception,
	&sbt_block_02bf,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_02c4,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_02c7,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_02cb,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_02ce,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_02d8,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_02db,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_02de,
	&sbt_exception,
	&sbt_block_02e0,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_02e3,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_02e8,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_02ec,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_02f1,
	&sbt_exception,
	&sbt_block_02f3,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_02f8,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_02fb,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_02ff,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0302,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0308,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0318,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_031b,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0327,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0331,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_033b,
	&sbt_exception,
	&sbt_block_033d,
	&sbt_exception,
	&sbt_block_033f,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0346,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0349,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_034e,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0354,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_035a,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_035e,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0364,
	&sbt_exception,
	&sbt_block_0366,
	&sbt_block_0367,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0396,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_03ed,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_03f7,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_03fa,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_03fe,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_040a,
	&sbt_exception,
	&sbt_block_040c,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0410,
	&sbt_exception,
	&sbt_block_0412,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0429,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_043a,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_043d,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0440,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0448,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_044b,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0455,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0458,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0461,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_046a,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_046d,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0470,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0473,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0476,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0479,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_047d,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0480,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0483,
	&sbt_exception,
	&sbt_block_0485,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0488,
	&sbt_exception,
	&sbt_block_048a,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_048d,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0490,
	&sbt_exception,
	&sbt_block_0492,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0495,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0498,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_049b,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_049e,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_04a3,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_04a6,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_04b2,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_04c0,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_04c3,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_04ce,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_04d4,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_04d9,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_04ea,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_04ed,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_04f0,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_04f3,
	&sbt_exception,
	&sbt_block_04f5,
	&sbt_block_04f6,
	&sbt_block_04f7,
	&sbt_block_04f8,
	&sbt_block_04f9,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_04fe,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0505,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0513,
	&sbt_exception,
	&sbt_block_0515,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0518,
	&sbt_exception,
	&sbt_block_051a,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_052c,
	&sbt_exception,
	&sbt_block_052e,
	&sbt_exception,
	&sbt_block_0530,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0538,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0540,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0548,
	&sbt_block_0549,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_055f,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_056b,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_056f,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0572,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0579,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_058f,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_059b,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_059f,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_05a2,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_05a9,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_05bf,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_05cb,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_05cf,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_05d2,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_05d9,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_05ef,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_05fb,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_05ff,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0602,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0609,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0611,
	&sbt_block_0612,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0618,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0620,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0625,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_062d,
	&sbt_block_062e,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0634,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_063c,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0641,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0649,
	&sbt_block_064a,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0650,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0658,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_065d,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0665,
	&sbt_block_0666,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_066c,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0674,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0679,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_067e,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0681,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0689,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_068c,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_068f,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0697,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_069a,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_069d,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_06a5,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_06a8,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_06ab,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_06b3,
	&sbt_exception,
	&sbt_block_06b5,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_06b8,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_06bb,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_06be,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_06c1,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_06c4,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_06c7,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_06ca,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_06cd,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_06d0,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_06d3,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_06d6,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_06d9,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_06dc,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_06df,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_06e2,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_06e5,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_06e8,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_06eb,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_06ee,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_06f1,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_06f4,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_06f7,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_06fa,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_06fd,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0700,
	&sbt_exception,
	&sbt_block_0702,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0713,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0724,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0728,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_072c,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_072f,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0736,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_073b,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_073e,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0741,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0748,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_074d,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0750,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0753,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_075a,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_075f,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0762,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0765,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_076c,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0771,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0776,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0779,
	&sbt_block_077a,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_077d,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0792,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_079b,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_079e,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_07a7,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_07aa,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_07b3,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_07b6,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_07bc,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_07bf,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_07c2,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_07c9,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_07db,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_07fb,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0805,
	&sbt_exception,
	&sbt_block_0807,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_080a,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0815,
	&sbt_exception,
	&sbt_block_0817,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_081b,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_081e,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0834,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0838,
	&sbt_exception,
	&sbt_block_083a,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_083d,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0847,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0850,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_085e,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0865,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_088e,
	&sbt_block_088f,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0899,
	&sbt_block_089a,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_08a2,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_08aa,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_08ad,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_08b5,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_08c1,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_08c5,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_08d1,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_08d6,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_08db,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_08eb,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_08ee,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_08f1,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_08f5,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_08ff,
	&sbt_block_0900,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0904,
	&sbt_exception,
	&sbt_block_0906,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0916,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0919,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0920,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0924,
	&sbt_exception,
	&sbt_block_0926,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0929,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0933,
	&sbt_block_0934,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0939,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_093c,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_093f,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0942,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0945,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_094d,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0950,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0953,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_095b,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_095e,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0961,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0969,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_096c,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_096f,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0977,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_097a,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_097d,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0980,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0983,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0986,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0989,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_098c,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_098f,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0992,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0995,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0998,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_099b,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_099e,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_09a1,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_09a4,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_09a7,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_09aa,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_09ad,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_09b0,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_09b3,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_09b6,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_09b9,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_09bc,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_09bf,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_09c2,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_09c5,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_09c8,
	&sbt_exception,
	&sbt_block_09ca,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_09cd,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_09de,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_09eb,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_09f3,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_09f6,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_09fe,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0a02,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0a09,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0a0c,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0a13,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0a18,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0a1b,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0a1e,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0a25,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0a2a,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0a2d,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0a30,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0a37,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0a3c,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0a3f,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0a42,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0a49,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0a4e,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0a53,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0a56,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0a5a,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0a5d,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0a63,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0a73,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0a76,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0a7f,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0a82,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0a8b,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0a8e,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0a94,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0a97,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0a9a,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0aac,
	&sbt_exception,
	&sbt_block_0aae,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0ab1,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0ab8,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0abb,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0ad7,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0ae0,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0ae6,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0b10,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0b29,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0b48,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0b54,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0b57,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0b5d,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0b74,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0b8d,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0b90,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0b93,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0b96,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0ba0,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0ba5,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0bb4,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0bba,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0bd1,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0bea,
	&sbt_exception,
	&sbt_block_0bec,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0c00,
	&sbt_exception,
	&sbt_block_0c02,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0c0a,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0c12,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0c22,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0c36,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0c46,
	&sbt_exception,
	&sbt_block_0c48,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0c6a,
	&sbt_exception,
	&sbt_block_0c6c,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0c6f,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0c72,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0c77,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0cf6,
	&sbt_block_0cf7,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0d09,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0d12,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0d1f,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0d29,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0d36,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0d40,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0d4d,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0d57,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0d64,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0d79,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0d7f,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0d95,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0d99,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0d9c,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0db6,
	&sbt_exception,
	&sbt_block_0db8,
	&sbt_exception,
	&sbt_block_0dba,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0dd4,
	&sbt_exception,
	&sbt_block_0dd6,
	&sbt_block_0dd7,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0de9,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0df2,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0dff,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0e09,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0e16,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0e2b,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0e31,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0e47,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0e4b,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0e4e,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0e5c,
	&sbt_exception,
	&sbt_block_0e5e,
	&sbt_exception,
	&sbt_block_0e60,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0e6e,
	&sbt_exception,
	&sbt_block_0e70,
	&sbt_block_0e71,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0e83,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0e8c,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0e99,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0eac,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0eaf,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0eb3,
	&sbt_exception,
	&sbt_block_0eb5,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0ebb,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0ebe,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0ecd,
	&sbt_exception,
	&sbt_block_0ecf,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0edd,
	&sbt_exception,
	&sbt_block_0edf,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0ee5,
	&sbt_exception,
	&sbt_block_0ee7,
	&sbt_exception,
	&sbt_block_0ee9,
	&sbt_exception,
	&sbt_block_0eeb,
	&sbt_exception,
	&sbt_block_0eed,
	&sbt_block_0eee,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0efc,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0f08,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0f14,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0f1a,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0f20,
	&sbt_block_0f21,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0f24,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0f33,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0f45,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0f4e,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0f57,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0f66,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0f6b,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0f6e,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0f72,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0f76,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0f7a,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0f82,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0f87,
	&sbt_exception,
	&sbt_block_0f89,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0f8d,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0f92,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0f97,
	&sbt_exception,
	&sbt_block_0f99,
	&sbt_exception,
	&sbt_block_0f9b,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0f9e,
	&sbt_exception,
	&sbt_block_0fa0,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0fab,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0fb3,
	&sbt_exception,
	&sbt_block_0fb5,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0fb8,
	&sbt_exception,
	&sbt_block_0fba,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0fc3,
	&sbt_block_0fc4,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0fd7,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0fda,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0fdd,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0fe0,
	&sbt_block_0fe1,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0feb,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_0ffc,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1010,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1017,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_101b,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1079,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1082,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1086,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_108b,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_108e,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1091,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_10a1,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_10b1,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_10c1,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_10cf,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_10db,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_10ea,
	&sbt_exception,
	&sbt_block_10ec,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_10f6,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_10fc,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_110b,
	&sbt_exception,
	&sbt_block_110d,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1117,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_111d,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1134,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1137,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1141,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1146,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1149,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_114e,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1155,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_115a,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1161,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1166,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_116c,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1172,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1179,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_117e,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1183,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1186,
	&sbt_exception,
	&sbt_block_1188,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_118d,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1190,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1195,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_119d,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_11a1,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_11a5,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_11aa,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_11af,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_11b2,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_11b8,
	&sbt_exception,
	&sbt_block_11ba,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_11bf,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_11c5,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_11c8,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_11cb,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_11d4,
	&sbt_exception,
	&sbt_block_11d6,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_11d9,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_11dc,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_11e2,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_11e5,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_11f1,
	&sbt_exception,
	&sbt_block_11f3,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_11f6,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_11fc,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_11ff,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1207,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1211,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_122b,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1230,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1236,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1239,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_123d,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_125c,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_125f,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1266,
	&sbt_exception,
	&sbt_block_1268,
	&sbt_exception,
	&sbt_block_126a,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_126e,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1276,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_127e,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1295,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1298,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_129c,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_12a4,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_12ae,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_12b6,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_12d3,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_12d7,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_12e1,
	&sbt_exception,
	&sbt_block_12e3,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_12e9,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_12ee,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_12f1,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_12f6,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_12f9,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_12fc,
	&sbt_exception,
	&sbt_block_12fe,
	&sbt_exception,
	&sbt_block_1300,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1306,
	&sbt_block_1307,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_130c,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1311,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1316,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1320,
	&sbt_exception,
	&sbt_block_1322,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1325,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_132a,
	&sbt_exception,
	&sbt_block_132c,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1333,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1336,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_133b,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1345,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_134a,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1351,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1356,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_135a,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_135e,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1363,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1369,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_136e,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1371,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1375,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1378,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_137c,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_137f,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1383,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1386,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_138a,
	&sbt_exception,
	&sbt_block_138c,
	&sbt_exception,
	&sbt_block_138e,
	&sbt_block_138f,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1394,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1398,
	&sbt_exception,
	&sbt_block_139a,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_13a2,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_13a5,
	&sbt_block_13a6,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_13ab,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_13af,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_13b2,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_13b7,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_13bb,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_13d0,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_13d4,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_13de,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_13e2,
	&sbt_block_13e3,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_13eb,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_13f3,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_13f8,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_13fd,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1401,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1409,
	&sbt_block_140a,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1414,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1417,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_141e,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1421,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1426,
	&sbt_exception,
	&sbt_block_1428,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_142d,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1430,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1435,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1447,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_144a,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1450,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1456,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1461,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1464,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1469,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_146f,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1474,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1479,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1480,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1483,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1488,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_148f,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1499,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_14a3,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_14a9,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_14ae,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_14b4,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_14b9,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_14bf,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_14c4,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_14c7,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_14d0,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_14d3,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_14dd,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_14e4,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_14e9,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_14ef,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_14f4,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_14f9,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1503,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1506,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1509,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_150e,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_151f,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_152e,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1534,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1544,
	&sbt_exception,
	&sbt_block_1546,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1554,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_155b,
	&sbt_exception,
	&sbt_block_155d,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_156a,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_156f,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1579,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1580,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1583,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1587,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_158a,
	&sbt_exception,
	&sbt_block_158c,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1592,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_15a7,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_15b6,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_15bd,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_15c6,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_15cb,
	&sbt_exception,
	&sbt_block_15cd,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_15d0,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_15d7,
	&sbt_exception,
	&sbt_block_15d9,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_15dc,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_15e0,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_15e3,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_15e6,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_15e9,
	&sbt_exception,
	&sbt_block_15eb,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_15ee,
	&sbt_exception,
	&sbt_block_15f0,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_15f3,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_15f6,
	&sbt_exception,
	&sbt_block_15f8,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_15fb,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1605,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_160c,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1612,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_161f,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1622,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1626,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_162c,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1631,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_163a,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1653,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1659,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_165c,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_165f,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1662,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_166f,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1676,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_167c,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_167f,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_168c,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1690,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1693,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1699,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_169d,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_16a1,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_16ad,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_16b0,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_16b3,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_16b9,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_16c8,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_16d1,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_16da,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1708,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1713,
	&sbt_exception,
	&sbt_block_1715,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1718,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_171d,
	&sbt_block_171e,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1723,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1726,
	&sbt_block_1727,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_172b,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_172e,
	&sbt_block_172f,
	&sbt_exception,
	&sbt_block_1731,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1734,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1746,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1757,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_177c,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_177f,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1792,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1798,
	&sbt_block_1799,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_179f,
	&sbt_block_17a0,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_17ab,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_17c0,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_17da,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_17dd,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_17e0,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_17eb,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_17ee,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_17f1,
	&sbt_exception,
	&sbt_block_17f3,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_17f6,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_17fa,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_17fd,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1800,
	&sbt_exception,
	&sbt_block_1802,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1805,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1808,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_180b,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1814,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_183a,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_183d,
	&sbt_exception,
	&sbt_block_183f,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1842,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_184b,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_186b,
	&sbt_block_186c,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1874,
	&sbt_block_1875,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1880,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1883,
	&sbt_exception,
	&sbt_block_1885,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1888,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1892,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_189a,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_189f,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_18ad,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_18b2,
	&sbt_block_18b3,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_18ba,
	&sbt_exception,
	&sbt_block_18bc,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_18bf,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_18c5,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_18cb,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_18d4,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_18d9,
	&sbt_exception,
	&sbt_block_18db,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_18e0,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_18e3,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_18fe,
	&sbt_block_18ff,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1909,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_190c,
	&sbt_exception,
	&sbt_block_190e,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1911,
	&sbt_exception,
	&sbt_block_1913,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1916,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1919,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_191c,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_191f,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1922,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1925,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1928,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_192b,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_192e,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1931,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1934,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_193d,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1946,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1955,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1958,
	&sbt_exception,
	&sbt_block_195a,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_195d,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_196c,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_197b,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_198a,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1996,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_199b,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_19a4,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_19a7,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_19aa,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_19bc,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_19bf,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_19ca,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_19d3,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_19e8,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_19fe,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1a0a,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1a19,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1a1e,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1a30,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1a43,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1a63,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1a69,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1a6d,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1a74,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1a7b,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1a80,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1a8f,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1a9b,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1aab,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1abd,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1ac2,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1ac6,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1acb,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1ad1,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1adb,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1ae4,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1ae7,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1aea,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1af5,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1afc,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1b01,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1b10,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1b1b,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1b27,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1b39,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1b3f,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1b43,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1b48,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1b4e,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1b58,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1b61,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1b64,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1b67,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1b72,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1b79,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1b7e,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1b8e,
	&sbt_exception,
	&sbt_block_1b90,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1b9a,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1ba5,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1bac,
	&sbt_exception,
	&sbt_block_1bae,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1bb2,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1bb7,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1bbd,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1bc7,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1bd0,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1bd3,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1bd6,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1be0,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1be6,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1beb,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1bf4,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1bfe,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1c0c,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1c12,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1c1a,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1c20,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1c2d,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1c33,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1c36,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1c43,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1c51,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1c59,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1c5f,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1c64,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1c6d,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1c77,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1c85,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1c8b,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1c93,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1c99,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1ca6,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1cac,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1caf,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1cb7,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1cc1,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1cc6,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1cc9,
	&sbt_exception,
	&sbt_block_1ccb,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1cda,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1cdf,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1ce4,
	&sbt_exception,
	&sbt_block_1ce6,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1cf6,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1cf9,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1cfd,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1d00,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1d0e,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1d29,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1d2f,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1d41,
	&sbt_exception,
	&sbt_block_1d43,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1d51,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1d5d,
	&sbt_exception,
	&sbt_block_1d5f,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1d73,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1d84,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1d8b,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1d91,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1d95,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1daa,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1db1,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1dbd,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1dc6,
	&sbt_block_1dc7,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1dd3,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1dda,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1ddd,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1dec,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1df5,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1e04,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1e0f,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1e1b,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1e27,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1e33,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1e3f,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1e42,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_1e45,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2000,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2014,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_202b,
	&sbt_exception,
	&sbt_block_202d,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2034,
	&sbt_exception,
	&sbt_block_2036,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_203d,
	&sbt_exception,
	&sbt_block_203f,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2046,
	&sbt_exception,
	&sbt_block_2048,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_204f,
	&sbt_exception,
	&sbt_block_2051,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2058,
	&sbt_exception,
	&sbt_block_205a,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2061,
	&sbt_exception,
	&sbt_block_2063,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_206a,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_207e,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2093,
	&sbt_exception,
	&sbt_block_2095,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_209a,
	&sbt_exception,
	&sbt_block_209c,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_20a1,
	&sbt_exception,
	&sbt_block_20a3,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_20a8,
	&sbt_exception,
	&sbt_block_20aa,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_20af,
	&sbt_exception,
	&sbt_block_20b1,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_20b6,
	&sbt_exception,
	&sbt_block_20b8,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_20bd,
	&sbt_exception,
	&sbt_block_20bf,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_20c4,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_20cc,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_20d4,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_20dc,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_20e4,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_20ec,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_20f4,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_20fc,
	&sbt_exception,
	&sbt_block_20fe,
	&sbt_exception,
	&sbt_block_2100,
	&sbt_exception,
	&sbt_block_2102,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2105,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2108,
	&sbt_exception,
	&sbt_block_210a,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2114,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2117,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_212d,
	&sbt_block_212e,
	&sbt_exception,
	&sbt_block_2130,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2133,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2139,
	&sbt_exception,
	&sbt_block_213b,
	&sbt_exception,
	&sbt_block_213d,
	&sbt_exception,
	&sbt_block_213f,
	&sbt_exception,
	&sbt_block_2141,
	&sbt_exception,
	&sbt_block_2143,
	&sbt_exception,
	&sbt_block_2145,
	&sbt_exception,
	&sbt_block_2147,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_214f,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2152,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2158,
	&sbt_exception,
	&sbt_block_215a,
	&sbt_exception,
	&sbt_block_215c,
	&sbt_exception,
	&sbt_block_215e,
	&sbt_exception,
	&sbt_block_2160,
	&sbt_exception,
	&sbt_block_2162,
	&sbt_exception,
	&sbt_block_2164,
	&sbt_exception,
	&sbt_block_2166,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_216e,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2171,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2177,
	&sbt_exception,
	&sbt_block_2179,
	&sbt_exception,
	&sbt_block_217b,
	&sbt_exception,
	&sbt_block_217d,
	&sbt_exception,
	&sbt_block_217f,
	&sbt_exception,
	&sbt_block_2181,
	&sbt_exception,
	&sbt_block_2183,
	&sbt_exception,
	&sbt_block_2185,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_218d,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2190,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2196,
	&sbt_exception,
	&sbt_block_2198,
	&sbt_exception,
	&sbt_block_219a,
	&sbt_exception,
	&sbt_block_219c,
	&sbt_exception,
	&sbt_block_219e,
	&sbt_exception,
	&sbt_block_21a0,
	&sbt_exception,
	&sbt_block_21a2,
	&sbt_exception,
	&sbt_block_21a4,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_21ac,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_21af,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_21b5,
	&sbt_exception,
	&sbt_block_21b7,
	&sbt_exception,
	&sbt_block_21b9,
	&sbt_exception,
	&sbt_block_21bb,
	&sbt_exception,
	&sbt_block_21bd,
	&sbt_exception,
	&sbt_block_21bf,
	&sbt_exception,
	&sbt_block_21c1,
	&sbt_exception,
	&sbt_block_21c3,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_21cb,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_21ce,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_21d4,
	&sbt_exception,
	&sbt_block_21d6,
	&sbt_exception,
	&sbt_block_21d8,
	&sbt_exception,
	&sbt_block_21da,
	&sbt_exception,
	&sbt_block_21dc,
	&sbt_exception,
	&sbt_block_21de,
	&sbt_exception,
	&sbt_block_21e0,
	&sbt_exception,
	&sbt_block_21e2,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_21ea,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_21ed,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_21f3,
	&sbt_exception,
	&sbt_block_21f5,
	&sbt_exception,
	&sbt_block_21f7,
	&sbt_exception,
	&sbt_block_21f9,
	&sbt_exception,
	&sbt_block_21fb,
	&sbt_exception,
	&sbt_block_21fd,
	&sbt_exception,
	&sbt_block_21ff,
	&sbt_exception,
	&sbt_block_2201,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2209,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_220c,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2212,
	&sbt_exception,
	&sbt_block_2214,
	&sbt_exception,
	&sbt_block_2216,
	&sbt_exception,
	&sbt_block_2218,
	&sbt_exception,
	&sbt_block_221a,
	&sbt_exception,
	&sbt_block_221c,
	&sbt_exception,
	&sbt_block_221e,
	&sbt_exception,
	&sbt_block_2220,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2228,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_222f,
	&sbt_exception,
	&sbt_block_2231,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2236,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2239,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_224d,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2250,
	&sbt_exception,
	&sbt_block_2252,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2256,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2259,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_226c,
	&sbt_block_226d,
	&sbt_exception,
	&sbt_block_226f,
	&sbt_exception,
	&sbt_block_2271,
	&sbt_exception,
	&sbt_block_2273,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2276,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_227c,
	&sbt_exception,
	&sbt_block_227e,
	&sbt_exception,
	&sbt_block_2280,
	&sbt_exception,
	&sbt_block_2282,
	&sbt_exception,
	&sbt_block_2284,
	&sbt_exception,
	&sbt_block_2286,
	&sbt_exception,
	&sbt_block_2288,
	&sbt_exception,
	&sbt_block_228a,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2292,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2295,
	&sbt_exception,
	&sbt_block_2297,
	&sbt_exception,
	&sbt_block_2299,
	&sbt_exception,
	&sbt_block_229b,
	&sbt_exception,
	&sbt_block_229d,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_22a5,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_22a8,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_22ae,
	&sbt_exception,
	&sbt_block_22b0,
	&sbt_exception,
	&sbt_block_22b2,
	&sbt_exception,
	&sbt_block_22b4,
	&sbt_exception,
	&sbt_block_22b6,
	&sbt_exception,
	&sbt_block_22b8,
	&sbt_exception,
	&sbt_block_22ba,
	&sbt_exception,
	&sbt_block_22bc,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_22c4,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_22c7,
	&sbt_exception,
	&sbt_block_22c9,
	&sbt_exception,
	&sbt_block_22cb,
	&sbt_exception,
	&sbt_block_22cd,
	&sbt_exception,
	&sbt_block_22cf,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_22d7,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_22da,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_22e0,
	&sbt_exception,
	&sbt_block_22e2,
	&sbt_exception,
	&sbt_block_22e4,
	&sbt_exception,
	&sbt_block_22e6,
	&sbt_exception,
	&sbt_block_22e8,
	&sbt_exception,
	&sbt_block_22ea,
	&sbt_exception,
	&sbt_block_22ec,
	&sbt_exception,
	&sbt_block_22ee,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_22f6,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_22f9,
	&sbt_exception,
	&sbt_block_22fb,
	&sbt_exception,
	&sbt_block_22fd,
	&sbt_exception,
	&sbt_block_22ff,
	&sbt_exception,
	&sbt_block_2301,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2309,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_230c,
	&sbt_exception,
	&sbt_block_230e,
	&sbt_exception,
	&sbt_block_2310,
	&sbt_exception,
	&sbt_block_2312,
	&sbt_exception,
	&sbt_block_2314,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_231c,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2324,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2327,
	&sbt_exception,
	&sbt_block_2329,
	&sbt_exception,
	&sbt_block_232b,
	&sbt_block_232c,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_232f,
	&sbt_exception,
	&sbt_block_2331,
	&sbt_exception,
	&sbt_block_2333,
	&sbt_exception,
	&sbt_block_2335,
	&sbt_exception,
	&sbt_block_2337,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_233f,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2350,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2353,
	&sbt_exception,
	&sbt_block_2355,
	&sbt_exception,
	&sbt_block_2357,
	&sbt_exception,
	&sbt_block_2359,
	&sbt_exception,
	&sbt_block_235b,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_235e,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2366,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_236c,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_236f,
	&sbt_exception,
	&sbt_block_2371,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2375,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2378,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_238b,
	&sbt_block_238c,
	&sbt_exception,
	&sbt_block_238e,
	&sbt_exception,
	&sbt_block_2390,
	&sbt_exception,
	&sbt_block_2392,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2395,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_239b,
	&sbt_exception,
	&sbt_block_239d,
	&sbt_exception,
	&sbt_block_239f,
	&sbt_exception,
	&sbt_block_23a1,
	&sbt_exception,
	&sbt_block_23a3,
	&sbt_exception,
	&sbt_block_23a5,
	&sbt_exception,
	&sbt_block_23a7,
	&sbt_exception,
	&sbt_block_23a9,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_23b1,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_23b4,
	&sbt_exception,
	&sbt_block_23b6,
	&sbt_exception,
	&sbt_block_23b8,
	&sbt_exception,
	&sbt_block_23ba,
	&sbt_exception,
	&sbt_block_23bc,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_23c4,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_23c7,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_23cd,
	&sbt_exception,
	&sbt_block_23cf,
	&sbt_exception,
	&sbt_block_23d1,
	&sbt_exception,
	&sbt_block_23d3,
	&sbt_exception,
	&sbt_block_23d5,
	&sbt_exception,
	&sbt_block_23d7,
	&sbt_exception,
	&sbt_block_23d9,
	&sbt_exception,
	&sbt_block_23db,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_23e3,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_23e6,
	&sbt_exception,
	&sbt_block_23e8,
	&sbt_exception,
	&sbt_block_23ea,
	&sbt_exception,
	&sbt_block_23ec,
	&sbt_exception,
	&sbt_block_23ee,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_23f6,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_23f9,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_23ff,
	&sbt_exception,
	&sbt_block_2401,
	&sbt_exception,
	&sbt_block_2403,
	&sbt_exception,
	&sbt_block_2405,
	&sbt_exception,
	&sbt_block_2407,
	&sbt_exception,
	&sbt_block_2409,
	&sbt_exception,
	&sbt_block_240b,
	&sbt_exception,
	&sbt_block_240d,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2415,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2418,
	&sbt_exception,
	&sbt_block_241a,
	&sbt_exception,
	&sbt_block_241c,
	&sbt_exception,
	&sbt_block_241e,
	&sbt_exception,
	&sbt_block_2420,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2428,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2430,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2433,
	&sbt_exception,
	&sbt_block_2435,
	&sbt_exception,
	&sbt_block_2437,
	&sbt_block_2438,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_243b,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2441,
	&sbt_exception,
	&sbt_block_2443,
	&sbt_exception,
	&sbt_block_2445,
	&sbt_exception,
	&sbt_block_2447,
	&sbt_exception,
	&sbt_block_2449,
	&sbt_exception,
	&sbt_block_244b,
	&sbt_exception,
	&sbt_block_244d,
	&sbt_exception,
	&sbt_block_244f,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2457,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_245a,
	&sbt_exception,
	&sbt_block_245c,
	&sbt_exception,
	&sbt_block_245e,
	&sbt_exception,
	&sbt_block_2460,
	&sbt_exception,
	&sbt_block_2462,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_246a,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_247b,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_247e,
	&sbt_exception,
	&sbt_block_2480,
	&sbt_exception,
	&sbt_block_2482,
	&sbt_exception,
	&sbt_block_2484,
	&sbt_exception,
	&sbt_block_2486,
	&sbt_exception,
	&sbt_block_2488,
	&sbt_exception,
	&sbt_block_248a,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_248d,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2495,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_249b,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_249e,
	&sbt_exception,
	&sbt_block_24a0,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_24a4,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_24a7,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_24ba,
	&sbt_block_24bb,
	&sbt_exception,
	&sbt_block_24bd,
	&sbt_exception,
	&sbt_block_24bf,
	&sbt_exception,
	&sbt_block_24c1,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_24c4,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_24ca,
	&sbt_exception,
	&sbt_block_24cc,
	&sbt_exception,
	&sbt_block_24ce,
	&sbt_exception,
	&sbt_block_24d0,
	&sbt_exception,
	&sbt_block_24d2,
	&sbt_exception,
	&sbt_block_24d4,
	&sbt_exception,
	&sbt_block_24d6,
	&sbt_exception,
	&sbt_block_24d8,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_24e0,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_24e3,
	&sbt_exception,
	&sbt_block_24e5,
	&sbt_exception,
	&sbt_block_24e7,
	&sbt_exception,
	&sbt_block_24e9,
	&sbt_exception,
	&sbt_block_24eb,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_24f3,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_24f6,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_24fc,
	&sbt_exception,
	&sbt_block_24fe,
	&sbt_exception,
	&sbt_block_2500,
	&sbt_exception,
	&sbt_block_2502,
	&sbt_exception,
	&sbt_block_2504,
	&sbt_exception,
	&sbt_block_2506,
	&sbt_exception,
	&sbt_block_2508,
	&sbt_exception,
	&sbt_block_250a,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2512,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2515,
	&sbt_exception,
	&sbt_block_2517,
	&sbt_exception,
	&sbt_block_2519,
	&sbt_exception,
	&sbt_block_251b,
	&sbt_exception,
	&sbt_block_251d,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2525,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2528,
	&sbt_exception,
	&sbt_block_252a,
	&sbt_exception,
	&sbt_block_252c,
	&sbt_exception,
	&sbt_block_252e,
	&sbt_exception,
	&sbt_block_2530,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2538,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2540,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2543,
	&sbt_exception,
	&sbt_block_2545,
	&sbt_exception,
	&sbt_block_2547,
	&sbt_block_2548,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_254b,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2551,
	&sbt_exception,
	&sbt_block_2553,
	&sbt_exception,
	&sbt_block_2555,
	&sbt_exception,
	&sbt_block_2557,
	&sbt_exception,
	&sbt_block_2559,
	&sbt_exception,
	&sbt_block_255b,
	&sbt_exception,
	&sbt_block_255d,
	&sbt_exception,
	&sbt_block_255f,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2567,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_256a,
	&sbt_exception,
	&sbt_block_256c,
	&sbt_exception,
	&sbt_block_256e,
	&sbt_exception,
	&sbt_block_2570,
	&sbt_exception,
	&sbt_block_2572,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_257a,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_257d,
	&sbt_exception,
	&sbt_block_257f,
	&sbt_exception,
	&sbt_block_2581,
	&sbt_exception,
	&sbt_block_2583,
	&sbt_exception,
	&sbt_block_2585,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_258d,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_259e,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_25a1,
	&sbt_exception,
	&sbt_block_25a3,
	&sbt_exception,
	&sbt_block_25a5,
	&sbt_exception,
	&sbt_block_25a7,
	&sbt_exception,
	&sbt_block_25a9,
	&sbt_exception,
	&sbt_block_25ab,
	&sbt_exception,
	&sbt_block_25ad,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_25b0,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_25b8,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_25be,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_25c1,
	&sbt_exception,
	&sbt_block_25c3,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_25c7,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_25ca,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_25dd,
	&sbt_block_25de,
	&sbt_exception,
	&sbt_block_25e0,
	&sbt_exception,
	&sbt_block_25e2,
	&sbt_exception,
	&sbt_block_25e4,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_25e7,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_25ed,
	&sbt_exception,
	&sbt_block_25ef,
	&sbt_exception,
	&sbt_block_25f1,
	&sbt_exception,
	&sbt_block_25f3,
	&sbt_exception,
	&sbt_block_25f5,
	&sbt_exception,
	&sbt_block_25f7,
	&sbt_exception,
	&sbt_block_25f9,
	&sbt_exception,
	&sbt_block_25fb,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2603,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2606,
	&sbt_exception,
	&sbt_block_2608,
	&sbt_exception,
	&sbt_block_260a,
	&sbt_exception,
	&sbt_block_260c,
	&sbt_exception,
	&sbt_block_260e,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2616,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2619,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_261f,
	&sbt_exception,
	&sbt_block_2621,
	&sbt_exception,
	&sbt_block_2623,
	&sbt_exception,
	&sbt_block_2625,
	&sbt_exception,
	&sbt_block_2627,
	&sbt_exception,
	&sbt_block_2629,
	&sbt_exception,
	&sbt_block_262b,
	&sbt_exception,
	&sbt_block_262d,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2635,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2638,
	&sbt_exception,
	&sbt_block_263a,
	&sbt_exception,
	&sbt_block_263c,
	&sbt_exception,
	&sbt_block_263e,
	&sbt_exception,
	&sbt_block_2640,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2648,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2650,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2653,
	&sbt_exception,
	&sbt_block_2655,
	&sbt_exception,
	&sbt_block_2657,
	&sbt_block_2658,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_265b,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2661,
	&sbt_exception,
	&sbt_block_2663,
	&sbt_exception,
	&sbt_block_2665,
	&sbt_exception,
	&sbt_block_2667,
	&sbt_exception,
	&sbt_block_2669,
	&sbt_exception,
	&sbt_block_266b,
	&sbt_exception,
	&sbt_block_266d,
	&sbt_exception,
	&sbt_block_266f,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2677,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_267a,
	&sbt_exception,
	&sbt_block_267c,
	&sbt_exception,
	&sbt_block_267e,
	&sbt_exception,
	&sbt_block_2680,
	&sbt_exception,
	&sbt_block_2682,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_268a,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_268d,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2693,
	&sbt_exception,
	&sbt_block_2695,
	&sbt_exception,
	&sbt_block_2697,
	&sbt_exception,
	&sbt_block_2699,
	&sbt_exception,
	&sbt_block_269b,
	&sbt_exception,
	&sbt_block_269d,
	&sbt_exception,
	&sbt_block_269f,
	&sbt_exception,
	&sbt_block_26a1,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_26a9,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_26ac,
	&sbt_exception,
	&sbt_block_26ae,
	&sbt_exception,
	&sbt_block_26b0,
	&sbt_exception,
	&sbt_block_26b2,
	&sbt_exception,
	&sbt_block_26b4,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_26bc,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_26cd,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_26d0,
	&sbt_exception,
	&sbt_block_26d2,
	&sbt_exception,
	&sbt_block_26d4,
	&sbt_exception,
	&sbt_block_26d6,
	&sbt_exception,
	&sbt_block_26d8,
	&sbt_exception,
	&sbt_block_26da,
	&sbt_exception,
	&sbt_block_26dc,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_26df,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_26e7,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_26ed,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_26f0,
	&sbt_exception,
	&sbt_block_26f2,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_26f6,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_26f9,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_270c,
	&sbt_block_270d,
	&sbt_exception,
	&sbt_block_270f,
	&sbt_exception,
	&sbt_block_2711,
	&sbt_exception,
	&sbt_block_2713,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2716,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_271c,
	&sbt_exception,
	&sbt_block_271e,
	&sbt_exception,
	&sbt_block_2720,
	&sbt_exception,
	&sbt_block_2722,
	&sbt_exception,
	&sbt_block_2724,
	&sbt_exception,
	&sbt_block_2726,
	&sbt_exception,
	&sbt_block_2728,
	&sbt_exception,
	&sbt_block_272a,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2732,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2735,
	&sbt_exception,
	&sbt_block_2737,
	&sbt_exception,
	&sbt_block_2739,
	&sbt_exception,
	&sbt_block_273b,
	&sbt_exception,
	&sbt_block_273d,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2745,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2748,
	&sbt_exception,
	&sbt_block_274a,
	&sbt_exception,
	&sbt_block_274c,
	&sbt_exception,
	&sbt_block_274e,
	&sbt_exception,
	&sbt_block_2750,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2758,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2760,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2763,
	&sbt_exception,
	&sbt_block_2765,
	&sbt_exception,
	&sbt_block_2767,
	&sbt_block_2768,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_276b,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2771,
	&sbt_exception,
	&sbt_block_2773,
	&sbt_exception,
	&sbt_block_2775,
	&sbt_exception,
	&sbt_block_2777,
	&sbt_exception,
	&sbt_block_2779,
	&sbt_exception,
	&sbt_block_277b,
	&sbt_exception,
	&sbt_block_277d,
	&sbt_exception,
	&sbt_block_277f,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2787,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_278a,
	&sbt_exception,
	&sbt_block_278c,
	&sbt_exception,
	&sbt_block_278e,
	&sbt_exception,
	&sbt_block_2790,
	&sbt_exception,
	&sbt_block_2792,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_279a,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_279d,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_27a3,
	&sbt_exception,
	&sbt_block_27a5,
	&sbt_exception,
	&sbt_block_27a7,
	&sbt_exception,
	&sbt_block_27a9,
	&sbt_exception,
	&sbt_block_27ab,
	&sbt_exception,
	&sbt_block_27ad,
	&sbt_exception,
	&sbt_block_27af,
	&sbt_exception,
	&sbt_block_27b1,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_27b9,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_27bc,
	&sbt_exception,
	&sbt_block_27be,
	&sbt_exception,
	&sbt_block_27c0,
	&sbt_exception,
	&sbt_block_27c2,
	&sbt_exception,
	&sbt_block_27c4,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_27cc,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_27cf,
	&sbt_exception,
	&sbt_block_27d1,
	&sbt_exception,
	&sbt_block_27d3,
	&sbt_exception,
	&sbt_block_27d5,
	&sbt_exception,
	&sbt_block_27d7,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_27df,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_27f0,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_27f3,
	&sbt_exception,
	&sbt_block_27f5,
	&sbt_exception,
	&sbt_block_27f7,
	&sbt_exception,
	&sbt_block_27f9,
	&sbt_exception,
	&sbt_block_27fb,
	&sbt_exception,
	&sbt_block_27fd,
	&sbt_exception,
	&sbt_block_27ff,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2802,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_280b,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2811,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2814,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2817,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_281b,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_281e,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2831,
	&sbt_block_2832,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2835,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2838,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_283b,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_283e,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2844,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2847,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_284a,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_284d,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2850,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2853,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2856,
	&sbt_exception,
	&sbt_block_2858,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2860,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2863,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2866,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2869,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_286c,
	&sbt_exception,
	&sbt_block_286e,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2876,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_287e,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2881,
	&sbt_exception,
	&sbt_block_2883,
	&sbt_exception,
	&sbt_block_2885,
	&sbt_block_2886,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2889,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_288f,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2892,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2895,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2898,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_289b,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_289e,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_28a1,
	&sbt_exception,
	&sbt_block_28a3,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_28ab,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_28ae,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_28b1,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_28b4,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_28b7,
	&sbt_exception,
	&sbt_block_28b9,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_28c1,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_28c4,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_28ca,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_28cd,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_28d0,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_28d3,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_28d6,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_28d9,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_28dc,
	&sbt_exception,
	&sbt_block_28de,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_28e6,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_28e9,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_28ec,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_28ef,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_28f2,
	&sbt_exception,
	&sbt_block_28f4,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_28fc,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_28ff,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2905,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2908,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_290b,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_290e,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2911,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2914,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2917,
	&sbt_exception,
	&sbt_block_2919,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2921,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2924,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2927,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_292a,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_292d,
	&sbt_exception,
	&sbt_block_292f,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2937,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2948,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_294b,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_294e,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2951,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2954,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2957,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_295a,
	&sbt_exception,
	&sbt_block_295c,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_295f,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2968,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_296e,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2971,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_297d,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2980,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2993,
	&sbt_block_2994,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2997,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_299a,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_299d,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_29a0,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_29a3,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_29a6,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_29a9,
	&sbt_exception,
	&sbt_block_29ab,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_29b3,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_29bb,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_29be,
	&sbt_exception,
	&sbt_block_29c0,
	&sbt_exception,
	&sbt_block_29c2,
	&sbt_block_29c3,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_29c6,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_29cc,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_29cf,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_29d2,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_29d5,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_29d8,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_29db,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_29de,
	&sbt_exception,
	&sbt_block_29e0,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_29e8,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_29eb,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_29ee,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_29f1,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_29f4,
	&sbt_exception,
	&sbt_block_29f6,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_29fe,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2a01,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2a07,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2a0a,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2a0d,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2a10,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2a13,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2a16,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2a19,
	&sbt_exception,
	&sbt_block_2a1b,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2a23,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2a26,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2a29,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2a2c,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2a2f,
	&sbt_exception,
	&sbt_block_2a31,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2a39,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2a3c,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2a42,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2a45,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2a48,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2a4b,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2a4e,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2a51,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2a54,
	&sbt_exception,
	&sbt_block_2a56,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2a5e,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2a61,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2a64,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2a67,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2a6a,
	&sbt_exception,
	&sbt_block_2a6c,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2a74,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2a77,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2a7a,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2a7d,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2a80,
	&sbt_exception,
	&sbt_block_2a82,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2a8a,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2a9b,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2a9e,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2aa1,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2aa4,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2aa7,
	&sbt_exception,
	&sbt_block_2aa9,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2aac,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2ab1,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2ab4,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2ab7,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2aba,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2abd,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2ac0,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2ac3,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2ac6,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2ac9,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2acc,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2acf,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2ad2,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2ad5,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2ad8,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2adb,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2ade,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2ae1,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2ae4,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2ae7,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2af7,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2b02,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2b05,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2b0d,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2b1a,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2b22,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2b25,
	&sbt_exception,
	&sbt_block_2b27,
	&sbt_block_2b28,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2b42,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2b46,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2b4b,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2b58,
	&sbt_exception,
	&sbt_block_2b5a,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2b5f,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2b63,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2b76,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2b79,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2b82,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2b8b,
	&sbt_block_2b8c,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2b8f,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2b9e,
	&sbt_exception,
	&sbt_block_2ba0,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2ba8,
	&sbt_block_2ba9,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2bb2,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2bb9,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2bbe,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2bcb,
	&sbt_exception,
	&sbt_block_2bcd,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2bdc,
	&sbt_exception,
	&sbt_block_2bde,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2be3,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2bf2,
	&sbt_exception,
	&sbt_block_2bf4,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2c03,
	&sbt_exception,
	&sbt_block_2c05,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2c0d,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2c10,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2c1b,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2c26,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2c31,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2c3c,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2c47,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2c52,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2c5d,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2c68,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2c6b,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2c7a,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2c89,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2c98,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2ca7,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2cb6,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2cc5,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2cd4,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2ce3,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2ce8,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2ced,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2cf2,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2cf7,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2cfc,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2d01,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2d06,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2d09,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2d0c,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2d0f,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2d1e,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2d21,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2d28,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2d2d,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2d3a,
	&sbt_exception,
	&sbt_block_2d3c,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2d4b,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2d52,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2d5d,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2d64,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2d69,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2d76,
	&sbt_exception,
	&sbt_block_2d78,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2d87,
	&sbt_exception,
	&sbt_block_2d89,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2d8e,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2d9d,
	&sbt_exception,
	&sbt_block_2d9f,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2dae,
	&sbt_exception,
	&sbt_block_2db0,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2dd6,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2ddb,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2ddf,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2de6,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2dea,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2df4,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2df7,
	&sbt_exception,
	&sbt_block_2df9,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2dfe,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2e01,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2e05,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2f00,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2f10,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2f20,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2f30,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2f40,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2f50,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2f60,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2f70,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2f80,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2f90,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2fa0,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2fb0,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2fc0,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2fd0,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2fe0,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_block_2ff0,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
	&sbt_exception,
};

extern const uint8_t sbt_rom_data[] = {
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x01,0x02,
    0x01,0x02,0x02,0x03,0x01,0x02,0x02,0x03,0x02,0x03,0x03,0x04,0x01,0x01,0x01,0x11,
    0x93,0x04,0xb9,0xff,0x83,0x53,0x02,0xc6,0x31,0x03,0xb1,0x00,0x00,0x03,0xbf,0x04,
    0x38,0x05,0xc0,0x50,0x08,0x0c,0xca,0x02,0xcc,0x00,0x05,0xe3,0x08,0x00,0x04,0x10,
    0x04,0xb6,0x94,0x78,0x64,0x14,0xe0,0x00,0x74,0x71,0x0a,0xff,0x01,0x07,0x0f,0x06,
    0x01,0x60,0x30,0x77,0x0d,0xf0,0x0e,0x0a,0x08,0x0f,0x02,0x35,0x00,0x02,0x13,0x00,
    0x05,0x2a,0x00,0x00,0x00,0x7f,0x02,0x3a,0x05,0x00,0x01,0x29,0x00,0x00,0x02,0x3d,
    0x07,0x02,0x3c,0x01,0x02,0x22,0x01,0x02,0x21,0x01,0x02,0x31,0x20,0x01,0xe2,0x01,
    0xe1,0x02,0x23,0x03,0x02,0x26,0x0e,0x02,0x27,0x70,0x02,0x20,0x3f,0x02,0x25,0x02,
    0x00,0x30,0x20,0x4f,0x30,0x23,0x80,0x30,0x25,0x00,0x54,0x68,0x75,0x6e,0x64,0x65,
    0x72,0x00,0x63,0x72,0x61,0x63,0x6b,0x65,0x72,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x01,0x02,0x67,0x69,0x6b,0x02,
    0x03,0xff,0xc4,0x02,0xc6,0x00,0xca,0x02,0xcc,0x02,0xd1,0x02,0xd3,0x00,0x02,0x03,
    0xff,0xc8,0x02,0xc6,0x00,0xce,0x02,0xcc,0x02,0xd6,0x02,0xd3,0x00,0x02,0x03,0x00,
    0x00,0xbc,0x00,0xd0,0x00,0xd8,0x04,0x03,0x00,0x00,0xbc,0xbd,0xc7,0x00,0xbf,0x00,
    0x61,0x00,0xd8,0xd4,0xd5,0x05,0x03,0x00,0xbc,0xbd,0xbd,0xbd,0xbe,0xbf,0x00,0x00,
    0x00,0xc0,0xc1,0xc2,0xc2,0xc2,0xc3,0x0f,0x05,0xff,0x00,0x00,0x00,0x00,0x6d,0x08,
    0x6e,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x6f,0x06,0x71,0x06,0x73,0x0a,0x75,0x08,
    0x76,0x0a,0x00,0x00,0x78,0x06,0x7a,0x06,0x7c,0x06,0x7e,0x06,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x06,0x82,0x06,0x84,0x06,0x86,0x08,0x87,0x06,
    0x89,0x06,0x8b,0x06,0x8d,0x04,0x8e,0x06,0x90,0x06,0x92,0x06,0x94,0x04,0x95,0x06,
    0x89,0x04,0x97,0x06,0x00,0x00,0x99,0x06,0x9b,0x04,0x9c,0x06,0x9e,0x06,0xa0,0x06,
    0xa2,0x04,0xa3,0x04,0x00,0x00,0x63,0x04,0xa4,0x04,0xa5,0x04,0xa6,0x06,0x00,0x00,
    0x63,0x04,0x00,0x00,0xa8,0x04,0xa9,0x06,0xab,0x04,0xac,0x06,0xae,0x06,0xb0,0x06,
    0xb2,0x06,0x00,0x00,0xb4,0x06,0xb6,0x06,0x89,0x04,0xb8,0x06,0x89,0x04,0xba,0x06,
    0x78,0xff,0x7a,0x00,0x7b,0x00,0x7c,0x49,0x7d,0x4a,0x7e,0xb2,0x7f,0x94,0x22,0x00,
    0x78,0xff,0x7a,0xbf,0x7b,0x25,0x7c,0x80,0x7d,0xfc,0x7e,0xdf,0x7f,0xb6,0x22,0x00,
    0x78,0xff,0x7a,0x80,0x7b,0xfc,0x7c,0xbf,0x7d,0x25,0x7e,0xd5,0x7f,0xfe,0x22,0x00,
    0x78,0x50,0x7a,0x80,0x7b,0xfc,0x7c,0xbf,0x7d,0x25,0x7e,0xff,0x7f,0xff,0x22,0x00,
    0x78,0xff,0x7a,0x00,0x7b,0xb0,0x7c,0x08,0x7d,0xca,0x7e,0xf7,0x7f,0xed,0x22,0x00,
    0x78,0xff,0x7a,0xef,0x7b,0x7b,0x7c,0x14,0x7d,0xa5,0x7e,0x59,0x7f,0xce,0x22,0x00,
    0x78,0x00,0x7a,0xff,0x7b,0xff,0x7c,0xb2,0x7d,0x94,0x7e,0x49,0x7f,0x4a,0x22,0x00,
    0x78,0xef,0x7a,0xff,0x7b,0xff,0x7c,0x59,0x7d,0xce,0x7e,0x14,0x7f,0xa5,0x22,0x00,
    0x78,0xff,0x7a,0xdf,0x7b,0x96,0x7c,0x2f,0x7d,0xfe,0x7e,0x5f,0x7f,0xdf,0x22,0x00,
    0x78,0xff,0x7a,0x2f,0x7b,0xfe,0x7c,0xdf,0x7d,0x96,0x7e,0x5a,0x7f,0xff,0x22,0x00,
    0x78,0xff,0x7a,0xff,0x7b,0xff,0x7c,0xff,0x7d,0xff,0x7e,0xff,0x7f,0xff,0x22,0x00,
    0x78,0xff,0x7a,0xff,0x7b,0xff,0x7c,0xff,0x7d,0xff,0x7e,0xff,0x7f,0xff,0x22,0x00,
    0x78,0xff,0x7a,0xff,0x7b,0xff,0x7c,0xff,0x7d,0xff,0x7e,0xff,0x7f,0xff,0x22,0x00,
    0x78,0xff,0x7a,0xff,0x7b,0xff,0x7c,0xff,0x7d,0xff,0x7e,0xff,0x7f,0xff,0x22,0x00,
    0x78,0xff,0x7a,0xff,0x7b,0xff,0x7c,0xff,0x7d,0xff,0x7e,0xff,0x7f,0xff,0x22,0x00,
    0x78,0xff,0x7a,0xff,0x7b,0xff,0x7c,0xff,0x7d,0xff,0x7e,0xff,0x7f,0xff,0x22,0x00,
    0x00,0x00,0x08,0x08,0x14,0x14,0x14,0x14,0x08,0x3c,0x03,0x23,0x04,0x0a,0x08,0x08,
    0x10,0x08,0x08,0x10,0x08,0x2a,0x00,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,
    0x1c,0x22,0x08,0x0c,0x1c,0x22,0x3e,0x20,0x10,0x18,0x3e,0x02,0x38,0x04,0x3e,0x20,
    0x1c,0x22,0x1c,0x22,0x00,0x00,0x00,0x00,0x10,0x08,0x00,0x00,0x04,0x08,0x1c,0x22,
    0x1c,0x22,0x08,0x14,0x1e,0x22,0x1c,0x22,0x1e,0x22,0x3e,0x02,0x3e,0x02,0x3c,0x02,
    0x22,0x22,0x1c,0x08,0x20,0x20,0x22,0x12,0x02,0x02,0x22,0x36,0x22,0x22,0x1c,0x22,
    0x1e,0x22,0x1c,0x22,0x1e,0x22,0x1c,0x22,0x3e,0x08,0x22,0x22,0x22,0x22,0x22,0x22,
    0x22,0x22,0x22,0x22,0x3e,0x20,0x3e,0x06,0x00,0x02,0x3e,0x30,0x00,0x00,0x00,0x00,
    0x04,0x08,0x00,0x00,0x02,0x02,0x00,0x00,0x20,0x20,0x00,0x00,0x18,0x24,0x00,0x00,
    0x02,0x02,0x08,0x00,0x10,0x00,0x02,0x02,0x0c,0x08,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x04,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x38,0x0c,0x08,0x08,0x0e,0x18,0x00,0x00,0x63,0x77,
    0x01,0x01,0x03,0x03,0x07,0x07,0x0f,0x0f,0x1f,0x1f,0x3f,0x3f,0x7f,0x7f,0x00,0x00,
    0x00,0x00,0x00,0x04,0x00,0x1c,0x00,0x60,0x00,0x60,0x00,0x00,0x00,0x00,0xff,0xff,
    0x01,0x00,0x7f,0x7f,0x40,0x00,0x78,0x3c,0x00,0x00,0xe0,0xc0,0x01,0x03,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x08,0x08,0x14,0x00,0x3e,0x14,0x0a,0x1c,0x10,0x08,0x0a,0x04,0x08,0x00,
    0x04,0x04,0x20,0x20,0x1c,0x08,0x08,0x3e,0x00,0x00,0x00,0x3e,0x00,0x00,0x10,0x08,
    0x32,0x2a,0x08,0x08,0x20,0x18,0x10,0x18,0x14,0x12,0x1e,0x20,0x02,0x1e,0x10,0x08,
    0x22,0x1c,0x22,0x3c,0x08,0x00,0x08,0x00,0x04,0x02,0x3e,0x00,0x10,0x20,0x10,0x08,
    0x2a,0x3a,0x22,0x22,0x22,0x1e,0x02,0x02,0x22,0x22,0x02,0x1e,0x02,0x1e,0x02,0x02,
    0x22,0x3e,0x08,0x08,0x20,0x20,0x0a,0x06,0x02,0x02,0x2a,0x2a,0x26,0x2a,0x22,0x22,
    0x22,0x1e,0x22,0x22,0x22,0x1e,0x02,0x1c,0x08,0x08,0x22,0x22,0x22,0x22,0x22,0x2a,
    0x14,0x08,0x14,0x08,0x10,0x08,0x06,0x06,0x04,0x08,0x30,0x30,0x08,0x14,0x00,0x00,
    0x10,0x00,0x1c,0x20,0x1e,0x22,0x3c,0x02,0x3c,0x22,0x1c,0x22,0x04,0x1e,0x1c,0x22,
    0x1e,0x22,0x0c,0x08,0x18,0x10,0x22,0x12,0x08,0x08,0x36,0x2a,0x1e,0x22,0x1c,0x22,
    0x1e,0x22,0x3c,0x22,0x3a,0x06,0x3c,0x02,0x1e,0x04,0x22,0x22,0x22,0x22,0x22,0x22,
    0x22,0x14,0x22,0x22,0x3e,0x10,0x0c,0x06,0x08,0x08,0x18,0x30,0x06,0x49,0x3e,0x1c,
    0x01,0x01,0x03,0x03,0x07,0x07,0x0f,0x0f,0x1f,0x1f,0x3f,0x3f,0x7f,0x7f,0x00,0x40,
    0x00,0xc0,0x0e,0x8f,0x12,0x90,0x2c,0x08,0x3c,0x0f,0x00,0x00,0x06,0x0f,0xff,0x07,
    0x00,0x00,0x7f,0x70,0x00,0x00,0x1e,0x0f,0x00,0x01,0x80,0x00,0x07,0x0f,0x00,0x08,
    0x00,0x3c,0x00,0x24,0x00,0xf8,0x00,0x08,0x00,0x07,0x00,0x04,0x00,0x0f,0x00,0x09,
    0x07,0x07,0x00,0x00,0x70,0x70,0x00,0x00,0x00,0x00,0xe0,0xc0,0x79,0x3f,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x78,0x78,0x00,0x00,0x00,0x00,
    0x0f,0x0f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x80,0xc0,0x00,0x00,0xe7,0xc3,0x01,0x03,0x00,0x00,0x0f,0x0f,0x00,0x00,
    0x00,0x00,0x00,0x00,0x3c,0x3c,0x78,0x78,0x3c,0x3c,0xc0,0xc0,0xf3,0xf3,0x00,0x00,
    0xf0,0xe0,0x00,0x81,0x00,0x00,0x0f,0x07,0x00,0x00,0x00,0x00,0xf0,0xf0,0x00,0x00,
    0x3c,0x3c,0x00,0x00,0x78,0x78,0x00,0x00,0x0f,0x0f,0x00,0x00,0x3c,0x3c,0x00,0x00,
    0xf0,0xf0,0x00,0x00,0x0f,0x0f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x60,0x60,
    0x06,0x1e,0x60,0xe0,0x00,0xff,0x06,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0xc6,0xc6,0x00,0x00,0x60,0x60,0x01,0x00,0xc0,0xc0,0x00,0x00,
    0x60,0x60,0x0e,0x18,0x82,0x04,0xe3,0xc0,0xff,0xff,0x03,0x01,0x00,0x00,0x80,0x00,
    0xe0,0xc0,0x00,0x00,0x00,0x00,0x1e,0x1e,0x78,0xf8,0x00,0xff,0x00,0xff,0x1e,0x1f,
    0x00,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xf8,0x7c,0x7f,0xff,0x00,0x01,0x00,0x00,
    0x80,0xc0,0x07,0x03,0xc0,0x80,0x07,0x07,0x78,0xf8,0x00,0x00,0x00,0x00,0xf8,0x78,
    0xe0,0x80,0xbf,0xff,0x0f,0x07,0xbf,0xff,0x00,0x00,0x00,0x80,0xff,0xff,0x00,0x01,
    0x00,0x80,0x3f,0x1f,0xfc,0xf8,0x00,0x01,0xe0,0xc0,0x07,0x0f,0x00,0x00,0xe0,0xf0,
    0x07,0x07,0x00,0x00,0x70,0x70,0x00,0x00,0x00,0x00,0x80,0x00,0x1f,0x0f,0x00,0xff,
    0x00,0x01,0x00,0xff,0x00,0x80,0x00,0xbc,0x00,0xa4,0x78,0xff,0x00,0xf7,0x00,0x14,
    0x0f,0xff,0x00,0x80,0x00,0xfc,0x00,0x04,0x00,0xff,0x00,0xf3,0x00,0x12,0x00,0x0f,
    0x00,0x08,0xe0,0xf0,0x00,0x00,0x81,0x00,0x07,0x0f,0x00,0x00,0x0f,0xff,0x00,0x00,
    0x00,0xff,0x00,0x80,0x3c,0x3c,0x78,0x78,0x3c,0xfc,0xc0,0xff,0xf3,0xf3,0x00,0x00,
    0xc0,0x80,0xc3,0xe7,0x00,0x00,0x03,0x01,0x00,0xff,0x00,0x01,0xf0,0xff,0x00,0x00,
    0x3c,0x3c,0x00,0x00,0x78,0x78,0x00,0x00,0x0f,0xff,0x00,0x80,0x3c,0xfc,0x00,0x00,
    0xf0,0xf3,0x00,0x02,0x0f,0x0f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x60,0x60,
    0x1e,0x1e,0xc0,0x00,0xff,0x00,0x03,0x00,0x00,0x60,0x00,0x10,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0xc6,0xc6,0x00,0x00,0x68,0x6c,0x00,0x00,0xc0,0xc0,0x00,0x00,
    0x68,0x6c,0x30,0x60,0x08,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0xc0,0x00,0x03,0x1e,0x1e,0xf0,0xf0,0xff,0xff,0xff,0xff,0x0f,0x0f,
    0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x3c,0x1e,0xfc,0xf0,0x07,0x1f,0x00,0x00,
    0xc0,0xe0,0x03,0x01,0xc0,0xc0,0x07,0x03,0xf8,0xf0,0x03,0x0f,0x00,0x00,0x7c,0x3c,
    0x00,0x00,0xfe,0xf8,0x07,0x03,0xfe,0xf8,0x00,0x00,0xc0,0xe0,0xff,0xe7,0x03,0x07,
    0xc0,0xe0,0x0f,0x07,0xf0,0xe0,0x03,0x07,0x80,0x00,0x1f,0x3f,0x00,0x00,0xf8,0xfc,
    0x07,0x03,0xe7,0xff,0xff,0xff,0x07,0x01,0xff,0xff,0xff,0xff,0xe0,0x80,0xf8,0xf8,
    0x1f,0x1f,0x00,0x00,0x00,0x00,0xf8,0xf8,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x80,0xff,0xff,0xff,0xff,0xff,0xff,0x00,0x01,0xfc,0xfc,0xc0,0xc0,0x3f,0x3f,
    0x00,0x00,0xfc,0xfc,0x03,0x03,0xfe,0xf8,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0x7f,0x1f,0x00,0x00,0x00,0x00,0x00,0x00,0xe0,0xe0,0xff,0xff,0xff,0xff,0x3f,0xff,
    0x00,0x00,0xfe,0xfe,0x03,0x03,0xfc,0xf0,0x00,0x00,0x3f,0x3f,0xfc,0xf0,0x3f,0x3f,
    0x00,0x00,0x00,0x00,0xfc,0xfc,0x0f,0x0f,0x00,0x00,0x00,0x00,0xc0,0xc0,0xff,0xff,
    0xfe,0xfc,0xff,0xff,0x0f,0x3f,0x00,0x00,0xff,0xfc,0xcf,0xff,0xff,0xff,0x00,0x00,
    0xff,0xf8,0x07,0x01,0xff,0xf8,0x00,0x00,0x00,0x80,0xff,0xff,0xff,0xff,0x00,0x01,
    0x1f,0x0f,0xf8,0xf0,0x00,0x80,0x00,0x01,0xfe,0xfe,0x1f,0x0f,0xf8,0xf0,0x7f,0x7f,
    0xfc,0xfc,0x3f,0x7f,0x00,0x00,0x00,0x00,0xfc,0xfe,0x3f,0x3f,0xfe,0xfc,0x7f,0x3f,
    0x7f,0x3f,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0x01,0x00,0xff,0xff,0xff,0xff,0x01,0x00,0xff,0xff,0xff,0xff,0x80,0x00,0xf8,0xf8,
    0x1f,0xff,0x00,0x00,0x00,0xff,0xf8,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x80,0xc0,0xff,0xff,0xff,0xff,0xff,0xff,0x01,0x03,0xfc,0xfc,0xc0,0xc0,0xff,0xff,
    0xff,0xff,0xff,0xff,0x03,0x03,0x00,0x00,0x00,0x00,0xf8,0xfe,0x03,0x0f,0x00,0x00,
    0x00,0x00,0x00,0x00,0xf8,0xfe,0x03,0x0f,0xf0,0xf0,0xff,0x1f,0xff,0xff,0xff,0xff,
    0x00,0x00,0xff,0xff,0x01,0x01,0xc0,0x00,0x03,0x07,0x1f,0x1f,0xe0,0xe0,0x3f,0x3f,
    0x00,0x00,0x00,0x00,0xfe,0xfe,0x07,0x07,0x00,0x03,0x00,0x00,0xe0,0xe0,0x7f,0x7f,
    0xf0,0xc0,0xff,0xff,0xff,0xff,0x00,0x00,0xf0,0xc0,0xff,0xff,0x7f,0x7f,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xc0,0xe0,0xff,0xff,0xff,0xff,0x03,0x07,
    0x07,0x03,0xe0,0xc0,0xc0,0xe0,0x03,0x07,0xff,0xff,0x07,0x03,0xe0,0xc0,0xff,0xff,
    0xf8,0xf0,0xff,0xff,0x00,0x01,0x00,0x80,0xff,0xff,0x1f,0x0f,0xf8,0xf0,0x1f,0x0f,
    0x0f,0x03,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0x00,0x00,0x08,0x00,0x00,0x00,0x3e,0x14,0x28,0x1e,0x04,0x62,0x2a,0x12,0x00,0x00,
    0x04,0x08,0x20,0x10,0x1c,0x2a,0x08,0x08,0x10,0x10,0x00,0x00,0x00,0x00,0x04,0x02,
    0x26,0x22,0x08,0x08,0x04,0x02,0x20,0x22,0x3e,0x10,0x20,0x22,0x22,0x22,0x04,0x04,
    0x22,0x22,0x20,0x10,0x08,0x00,0x08,0x08,0x04,0x08,0x3e,0x00,0x10,0x08,0x08,0x00,
    0x1a,0x02,0x3e,0x22,0x22,0x22,0x02,0x22,0x22,0x22,0x02,0x02,0x02,0x02,0x32,0x22,
    0x22,0x22,0x08,0x08,0x20,0x22,0x0a,0x12,0x02,0x02,0x22,0x22,0x32,0x22,0x22,0x22,
    0x02,0x02,0x2a,0x12,0x0a,0x12,0x20,0x22,0x08,0x08,0x22,0x22,0x22,0x14,0x2a,0x36,
    0x14,0x22,0x08,0x08,0x04,0x02,0x06,0x06,0x10,0x20,0x30,0x30,0x22,0x00,0x00,0x00,
    0x00,0x00,0x3c,0x22,0x22,0x22,0x02,0x02,0x22,0x22,0x3e,0x02,0x04,0x04,0x22,0x3c,
    0x22,0x22,0x08,0x08,0x10,0x10,0x0e,0x12,0x08,0x08,0x2a,0x2a,0x22,0x22,0x22,0x22,
    0x22,0x1e,0x22,0x3c,0x02,0x02,0x1c,0x20,0x04,0x24,0x22,0x32,0x22,0x14,0x2a,0x2a,
    0x08,0x14,0x22,0x3c,0x08,0x04,0x0c,0x0c,0x08,0x08,0x18,0x18,0x30,0x00,0x3e,0x77,
    0x01,0x01,0x03,0x03,0x07,0x07,0x0f,0x0f,0x1f,0x1f,0x3f,0x3f,0x7f,0x7f,0x90,0x3c,
    0xf0,0x3c,0xd8,0x78,0x20,0x40,0x01,0x00,0x01,0x00,0x80,0xc0,0x1f,0x3f,0x07,0x07,
    0x00,0x00,0x70,0x70,0x00,0x00,0x1e,0x3c,0x00,0x00,0x80,0xc0,0x07,0x03,0x00,0x00,
    0x3c,0x3c,0x00,0x00,0xf8,0xf8,0x00,0x00,0x07,0x07,0x00,0x00,0x0f,0x0f,0x00,0x00,
    0x00,0x00,0x08,0x00,0x00,0x00,0x14,0x00,0x08,0x00,0x60,0x00,0x2c,0x00,0x00,0x00,
    0x10,0x00,0x08,0x00,0x08,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x08,0x00,0x00,0x00,
    0x1c,0x00,0x1c,0x00,0x3e,0x00,0x1c,0x00,0x10,0x00,0x1c,0x00,0x1c,0x00,0x04,0x00,
    0x1c,0x00,0x0e,0x00,0x00,0x00,0x04,0x00,0x10,0x00,0x00,0x00,0x04,0x00,0x08,0x00,
    0x3c,0x00,0x22,0x00,0x1e,0x00,0x1c,0x00,0x1e,0x00,0x3e,0x00,0x02,0x00,0x3c,0x00,
    0x22,0x00,0x1c,0x00,0x1c,0x00,0x22,0x00,0x3e,0x00,0x22,0x00,0x22,0x00,0x1c,0x00,
    0x02,0x00,0x2c,0x00,0x22,0x00,0x1c,0x00,0x08,0x00,0x1c,0x00,0x08,0x00,0x22,0x00,
    0x22,0x00,0x08,0x00,0x3e,0x00,0x3e,0x00,0x00,0x00,0x3e,0x00,0x00,0x00,0x00,0x7f,
    0x00,0x00,0x3c,0x00,0x1e,0x00,0x3c,0x00,0x3c,0x00,0x3c,0x00,0x04,0x00,0x20,0x1c,
    0x22,0x00,0x1c,0x00,0x12,0x0c,0x22,0x00,0x1c,0x00,0x22,0x00,0x22,0x00,0x1c,0x00,
    0x02,0x02,0x20,0x20,0x02,0x00,0x1e,0x00,0x18,0x00,0x2c,0x00,0x08,0x00,0x36,0x00,
    0x22,0x00,0x20,0x1c,0x3e,0x00,0x38,0x00,0x08,0x08,0x0e,0x00,0x00,0x00,0x63,0x00,
    0x01,0x01,0x03,0x03,0x07,0x07,0x0f,0x0f,0x1f,0x1f,0x3f,0x3f,0x7f,0x7f,0x00,0x00,
    0x00,0x00,0x10,0x00,0x18,0x00,0x00,0x00,0x00,0x00,0xe0,0xf0,0x79,0xf0,0x07,0x07,
    0x00,0x00,0x70,0x70,0x00,0x00,0x78,0xf0,0x00,0x00,0xe0,0xf0,0x01,0x00,0x00,0x00,
    0x3c,0x00,0x24,0x00,0xf8,0x78,0x00,0x00,0x07,0x00,0x04,0x00,0x0f,0x0f,0x00,0x00,
    0xff,0xff,0x00,0x00,0x7f,0x7f,0x00,0x00,0x18,0x3c,0x18,0x00,0x06,0x00,0xff,0xff,
    0x00,0x00,0xff,0xff,0x00,0x00,0xbc,0xbc,0x00,0x00,0xff,0xff,0xf7,0xf7,0x00,0x00,
    0xff,0xff,0x00,0x00,0xfc,0xfc,0x00,0x00,0xff,0xff,0xf3,0xf3,0x00,0x00,0x0f,0x0f,
    0x00,0x00,0x78,0x3c,0x00,0x04,0x00,0x00,0x1e,0x3c,0x00,0x20,0xff,0xff,0x00,0x00,
    0xff,0xff,0x00,0x00,0x3c,0x3c,0x78,0x78,0xfc,0xfc,0xff,0xff,0xf3,0xf3,0x00,0x00,
    0x00,0x00,0xff,0x7e,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0xff,0xff,0x00,0x00,
    0x3c,0x3c,0x00,0x00,0x78,0x78,0x00,0x00,0xff,0xff,0x00,0x00,0xfc,0xfc,0x00,0x00,
    0xf3,0xf3,0x00,0x00,0x0f,0x0f,0x00,0x00,0x00,0xc0,0x00,0xff,0x00,0x03,0x60,0x60,
    0x1e,0x1e,0x00,0x00,0x00,0x00,0x00,0x00,0x30,0x18,0x08,0x04,0x00,0xc0,0x00,0x01,
    0x00,0x00,0x00,0x00,0xc6,0xc6,0x00,0x00,0x68,0x60,0x00,0x00,0xc0,0xc0,0x00,0x00,
    0x68,0x60,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0xf0,0xf0,0x0f,0x0f,0x1e,0x1e,0xc0,0x00,0xff,0xe0,0xff,0x01,0x03,0x00,
    0xff,0x00,0x00,0xe0,0x00,0x01,0x00,0x00,0x1e,0x0f,0xc0,0x00,0x7f,0xff,0x00,0x01,
    0xe0,0xf0,0x01,0x00,0xe0,0xe0,0x03,0x01,0xe0,0x80,0x3f,0xff,0x00,0x00,0x3e,0x1e,
    0x00,0x00,0xe0,0x00,0x01,0x00,0xe0,0x00,0x00,0x00,0xf0,0xf8,0xc3,0x81,0x0f,0x1f,
    0xe0,0xf0,0x03,0x01,0xc0,0x80,0x07,0x0f,0x00,0x00,0x7e,0xfc,0x00,0x00,0x7e,0x3f,
    0xff,0x00,0x01,0x00,0x7f,0x00,0x40,0x00,0x7e,0xff,0x00,0x00,0x00,0x00,0xff,0x0f,
    0x00,0x00,0xff,0x00,0x80,0x00,0xbc,0x3c,0x80,0x00,0xff,0x78,0xf7,0x00,0x14,0x00,
    0xff,0x0f,0x80,0x00,0xfc,0x3c,0x00,0x00,0xff,0xc0,0xf3,0xf3,0x00,0x00,0x0f,0x0f,
    0x00,0x00,0x3c,0x78,0x04,0x00,0x00,0x00,0x3c,0x1e,0x20,0x00,0xff,0x00,0x01,0x00,
    0xff,0xf0,0x00,0x00,0x3c,0x3c,0x78,0x78,0xfc,0x3c,0xff,0x00,0xf3,0xf0,0x02,0x00,
    0x00,0x00,0x3c,0x18,0x00,0x18,0x00,0x00,0xff,0x00,0x01,0x00,0xff,0x00,0x80,0x00,
    0x3c,0x00,0x24,0x00,0x78,0x00,0x48,0x00,0xff,0x00,0x81,0x00,0xfc,0x00,0x04,0x00,
    0xf3,0x00,0x12,0x00,0x0f,0x00,0x08,0x00,0xe0,0x60,0xff,0x00,0x07,0x06,0x60,0x60,
    0x1e,0x06,0x00,0x00,0x00,0x00,0x00,0x00,0x0e,0xc6,0x82,0x48,0xe3,0x61,0x03,0x03,
    0x00,0xc0,0x80,0x40,0xc6,0xc6,0x00,0x48,0x60,0x61,0x01,0x00,0xc0,0xc0,0x00,0x40,
    0x60,0x60,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0xf8,0x78,0x1f,0x1e,0x1e,0x1e,0x00,0x00,0xf0,0xf8,0x07,0x1f,0x00,0x00,
    0x00,0x00,0xf0,0xf8,0x07,0x1f,0x00,0x80,0x0f,0x07,0x00,0x00,0xfc,0xf0,0x03,0x07,
    0xf0,0xf8,0x00,0x00,0xf0,0xf0,0x01,0x00,0x00,0x00,0xfe,0xf8,0x03,0x0f,0x1f,0x0f,
    0x00,0x00,0x18,0x7e,0x00,0x00,0x00,0x00,0x18,0x7e,0xfc,0x7e,0x00,0x00,0x3f,0x7e,
    0xf0,0xe0,0x01,0x03,0x80,0xc0,0x0f,0x07,0x00,0x00,0xf8,0xf0,0x81,0xc3,0x1f,0x0f,
    0x00,0x00,0x7e,0x18,0xff,0x1f,0x00,0x00,0xff,0x00,0xff,0xf8,0x00,0x00,0xf8,0xf8,
    0xff,0xff,0x00,0x01,0xff,0xff,0xff,0xff,0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x00,
    0xc0,0xc0,0xff,0xff,0xff,0xff,0xff,0xff,0x03,0x03,0xfc,0xfc,0xc0,0x80,0xff,0xff,
    0xff,0xff,0xff,0xff,0x03,0x01,0x00,0x00,0x00,0x80,0xff,0xff,0x3f,0xff,0x00,0x00,
    0x00,0x00,0x00,0x80,0xff,0xff,0x3f,0xff,0xf8,0xf8,0x1f,0x0f,0xfc,0xf0,0xff,0xff,
    0x80,0x80,0xff,0xff,0x00,0x00,0x00,0x00,0x0f,0x1f,0x0f,0x0f,0xf0,0xf0,0x3f,0x1f,
    0x80,0x80,0x00,0x00,0xff,0xff,0x03,0x03,0x0f,0x3f,0x00,0x00,0xf0,0xf0,0x3f,0x3f,
    0x00,0x00,0xff,0xfc,0xff,0xff,0x00,0x00,0x00,0x00,0xff,0xff,0x3f,0x3f,0xc0,0xf0,
    0x03,0x0f,0x00,0x00,0x00,0x00,0x03,0x0f,0xf0,0xf8,0xff,0xff,0xff,0xff,0x0f,0x1f,
    0x01,0x00,0x80,0x00,0xf0,0xf8,0x0f,0x1f,0xff,0xff,0x03,0x07,0xc0,0xe0,0xff,0xff,
    0xe0,0xc0,0xff,0xff,0x03,0x07,0xc0,0xe0,0xff,0xff,0x07,0x03,0xe0,0xc0,0x07,0x03,
    0x00,0x00,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0x00,0x00,0x00,0x00,0x1f,0x1f,0x00,0x00,0x00,0x00,0xf8,0xf8,0x00,0x00,0xf8,0xf8,
    0xff,0xff,0x01,0x07,0xff,0xff,0xff,0xff,0x80,0xe0,0xf8,0xfe,0xff,0xff,0x1f,0x7f,
    0xc0,0xc0,0x3f,0x3f,0x00,0x00,0xfc,0xfc,0x03,0x03,0xfc,0xfc,0x80,0x00,0xff,0xff,
    0xff,0xff,0xff,0xff,0x01,0x00,0x00,0x00,0xc0,0xc0,0xff,0xff,0xff,0xff,0x03,0x0f,
    0x00,0x00,0xc0,0xc0,0xff,0xff,0xff,0xff,0xfc,0xfc,0x07,0x07,0xc0,0x00,0xff,0xff,
    0xc0,0xc0,0x7f,0x7f,0x00,0x00,0x00,0x00,0x1f,0x3f,0x07,0x07,0xf8,0xf8,0x1f,0x1f,
    0x80,0xc0,0x80,0x80,0xff,0xff,0x01,0x01,0xff,0xff,0x00,0x03,0xf8,0xf8,0x1f,0x1f,
    0x00,0x00,0xf0,0xc0,0xff,0xff,0x80,0x83,0x00,0x00,0xff,0xff,0x1f,0x0f,0xfc,0xfe,
    0x3f,0x7f,0x00,0x00,0x00,0x00,0x3f,0x7f,0xfc,0xfe,0x7f,0x3f,0xfe,0xfc,0x3f,0x7f,
    0x00,0x00,0x00,0x00,0xfc,0xfc,0x3f,0x3f,0xfe,0xfe,0x0f,0x1f,0xf0,0xf8,0x7f,0x7f,
    0x80,0x00,0xff,0xff,0x0f,0x1f,0xf0,0xf8,0xff,0xff,0x01,0x00,0x80,0x00,0x01,0x00,
    0x00,0x00,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
};
};  // namespace CPU
};  // namespace Cube
