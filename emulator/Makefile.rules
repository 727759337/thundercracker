all: $(BIN_DIR)/$(BIN)$(BIN_EXT)

# Disable implicit rules. Speeds up make, especially on Windows.
.SUFFIXES:

ifeq ($(BUILD_PLATFORM),windows32)
$(BIN_DIR)/$(BIN)$(BIN_EXT): $(OBJS)
	$(CC) -o "src/$(BIN)-d.exe" $(OBJS) $(LDFLAGS)
	$(STRIP) -s "src/$(BIN)-d$(BIN_EXT)" -o "src/$(BIN)-stripped$(BIN_EXT)"
	rm -f "$(BIN_DIR)/$(BIN)$(BIN_EXT)"
	$(UPX) -o "$(BIN_DIR)/$(BIN)$(BIN_EXT)" "src/$(BIN)-stripped$(BIN_EXT)"
endif

ifeq ($(BUILD_PLATFORM),Darwin)
$(BIN_DIR)/$(BIN): $(BIN_DIR)/$(BIN).app
	ln -sf $(BIN).app/Contents/MacOS/$(BIN) $(BIN_DIR)/$(LOWERCASE_BIN)
$(BIN_DIR)/$(BIN).app: $(OBJS)
	$(CC) -o "src/$(BIN)-d" $(OBJS) $(LDFLAGS)
	mkdir -p "$(BIN_DIR)/$(BIN).app/Contents/MacOS"
	mkdir -p "$(BIN_DIR)/$(BIN).app/Contents/Resources"
	cp resources/Info.plist "$(BIN_DIR)/$(BIN).app/Contents/Info.plist"
	cp resources/siftrunner_icon.icns "$(BIN_DIR)/$(BIN).app/Contents/Resources/$(BIN).icns"
	$(STRIP) -Sx "src/$(BIN)-d" -o "$(BIN_DIR)/$(BIN).app/contents/MacOS/$(BIN)"
	touch "$@"
endif

ifeq ($(BUILD_PLATFORM),Linux)
$(BIN_DIR)/$(BIN): $(BIN_DIR)/$(LOWERCASE_BIN)
$(BIN_DIR)/$(LOWERCASE_BIN): $(OBJS)
	$(CC) -o "src/$(LOWERCASE_BIN)-d" $(OBJS) $(LDFLAGS)
	$(STRIP) -s "src/$(LOWERCASE_BIN)-d" -o "src/$(LOWERCASE_BIN)-stripped"
	rm -f "$(BIN_DIR)/$(LOWERCASE_BIN)"
	$(UPX) -o "$(BIN_DIR)/$(LOWERCASE_BIN)" "src/$(LOWERCASE_BIN)-stripped"
endif

%.o: %.cpp
	$(CC) -c $(CCFLAGS) $*.cpp -o $*.o

%.o: %.c
	$(CC) -c $(CFLAGS) $*.c -o $*.o

%.o: %.m
	$(CC) -c $(MFLAGS) $*.m -o $*.o

%.o: %.rc
	$(WINDRES) -i $< -o $@

resources/data.cpp: $(DATADEPS)
	$(PYTHON) resources/bin2c.py

resources/firmware-sbt.cpp: $(FIRMWARE_RST)
	$(PYTHON) resources/firmware-sbt.py $(FIRMWARE_RST)

.PHONY: clean firmware

clean:
	rm -Rf $(BIN_DIR)/$(BIN)$(BIN_EXT)
	rm -Rf $(BIN_DIR)/$(BIN)$(BIN_EXT).app
	rm -Rf $(OBJS) $(DEPFILES) $(BIN).dSYM
	rm -Rf $(GENERATED_FILES)

