all: $(BIN_DIR)/$(BIN)

ifeq ($(BUILD_PLATFORM),windows32)
# Win32 Link: Stripped and packed binaries, and separate debug symbols.
$(BIN_DIR)/$(BIN)$(BIN_EXT): $(OBJS)
	$(CC) -o "src/$(BIN)-d.exe" $(OBJS) $(LDFLAGS)
	$(OBJCOPY) --only-keep-debug "src/$(BIN)-d.exe" "$(BIN).dSYM"
	$(STRIP) -s "src/$(BIN)-d$(BIN_EXT)" -o "$(BIN_DIR)/$(BIN)$(BIN_EXT)"
	$(UPX) "$(BIN_DIR)/$(BIN)$(BIN_EXT)"
else
ifeq ($(BUILD_PLATFORM),Darwin)
# Mac OS Link: Create an app bundle with a stripped binary.
$(BIN_DIR)/$(BIN): $(BIN_DIR)/$(BIN).app
$(BIN_DIR)/$(BIN).app: $(OBJS)
	$(CC) -o "src/$(BIN)-d" $(OBJS) $(LDFLAGS)
	mkdir -p "$(BIN_DIR)/$(BIN).app/Contents/MacOS"
	mkdir -p "$(BIN_DIR)/$(BIN).app/Contents/Resources"
	cp resources/Info.plist "$(BIN_DIR)/$(BIN).app/Contents/Info.plist"
	cp resources/siftrunner_icon.icns "$(BIN_DIR)/$(BIN).app/Contents/Resources/$(BIN).icns"
	$(STRIP) -Sx "src/$(BIN)-d" -o "$(BIN_DIR)/$(BIN).app/contents/MacOS/$(BIN)"
	touch "$@"
else
# Default link
$(BIN_DIR)/$(BIN): $(OBJS)
	$(CC) -o $@ $(OBJS) $(LDFLAGS)
endif	
endif

%.o: %.cpp
	$(CC) -c $(CCFLAGS) $*.cpp -o $*.o

%.o: %.c
	$(CC) -c $(CFLAGS) $*.c -o $*.o

%.o: %.m
	$(CC) -c $(MFLAGS) $*.m -o $*.o

%.o: %.rc
	$(WINDRES) -i $< -o $@

# Data dependencies don't need to be rebuilt by everyone,
# the resulting generated code is checked into git. The
# firmware target is somewhat inconvenient, since it relies
# on the temporary files left over after compiling the cube
# firmware.
#
# Only run the firmware build if you really intend to upgrade
# the simulator to a new stable build of the firmware! Testing
# and debugging of the firmware is much more easily accomplished
# using interpreted mode, and specifying a firmware image on
# the command line.

resources/data.cpp: $(DATADEPS)
	$(PYTHON) resources/bin2c.py

firmware:
	$(PYTHON) resources/firmware-sbt.py ../firmware/cube/*.rst

.PHONY: clean firmware

clean:
	rm -Rf $(BIN_DIR)/$(BIN)$(BIN_EXT)
	rm -Rf $(BIN_DIR)/$(BIN)$(BIN_EXT).app
	rm -Rf $(OBJS) $(DEPFILES) $(BIN).dSYM
